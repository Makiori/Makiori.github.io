<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>第一篇博客</title>
    <url>/2021/04/20/blog/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h1 id="关于博客"><a href="#关于博客" class="headerlink" title="关于博客"></a>关于博客</h1><p>上一年建的博客，因为个人原因删除了。<br>主要就是当时选的主题过于复杂，后面不想整理。<br>再加上放了太多可能涉及版权问题的四格漫画。<br>（虽然说本来就经常做灰色地带的勾当）<br>一二月放寒假的时候，每天躺在床上什么都不想做，所以就拖到了开学。<br>但有动力做事的情况下，还是出了一系列的意外，就不多说了。<br>于是摸鱼摸了几个月之后，终于在19岁生日的时候，重新建好了自己的小地盘。<br>后面会专门写一篇关于如何用 Hexo+GitPages 建立个人博客的文章。<br>算是给自己留个记录，也希望能在以后帮到想建个人博客的朋友。</p>
<h1 id="关于现状"><a href="#关于现状" class="headerlink" title="关于现状"></a>关于现状</h1><p>这摸过去的几个月里，发生了很多事情，比如说我的人际关系就发生了翻天覆地的变化。<br>嘛，有相遇就会有分别，一段关系的结束或许会是另一段关系的开始呢？<br>而且我也深刻地认识到了自己在人际交往中的种种问题，<br>于是我注销掉了自己的微博账号，还退掉了许多已经没有交流的QQ群。<br>在圈子里面彻底消失，而且已经没有回归的机会了。<br>希望自己能在下一个圈子里有更为理想的形态。<br>我一直在盼望自己的人生会发生不同寻常的事情，<br>但当它已经在发生变化的时候，我却没有意识到。</p>
<h1 id="关于未来"><a href="#关于未来" class="headerlink" title="关于未来"></a>关于未来</h1><p>以后会在这里分享一下自己的学习情况，以及生活上各种各样的小事情。<br>还会稍微放一些翻译工作，如果还能有这样的工作机会的话，<br>又或者是还能遇到让自己兴奋的事物的话。<br>最后还有自己的脑洞，属于我的牧尾宇宙。<br>会慢慢地更新，能写多少就不知道了。<br>先放一个题目：《角落里的魔女》<br>嗯，然后还有很多想尝试的事情，比如说：制作游戏啊，到处旅行然后用视频记录下来之类的。<br>嘛，只有一次的人生，应该好好地享受。</p>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Python Flask框架</title>
    <url>/2022/05/15/blog/Python%20Flask/</url>
    <content><![CDATA[<h2 id="写在前头"><a href="#写在前头" class="headerlink" title="#写在前头"></a>#写在前头</h2><p>本篇博客属于不务正业环节！<br>写了那么久的SpringBoot项目，难免会有点疲倦。<br>为了开拓自己的视野，自然得想办法去见识一些未见过的事物。<br>刚好这个学期选修了Python这门课课程，那正好就来了解一下这个语言的web框架。</p>
<h2 id="Flask"><a href="#Flask" class="headerlink" title="#Flask"></a>#Flask</h2><p>Flask是一个轻量级Web应用程序框架。使用Python语言编写，较其他同类型框架更为灵活、轻便、安全且容易上手。它可以很好地结合MVC模式进行开发，开发人员分工合作，小型团队在短时间内就可以完成功能丰富的中小型网站或Web服务的实现。另外，Flask还有很强的定制性，用户可以根据自己的需求来添加相应的功能，在保持核心功能简单的同时实现功能的丰富与扩展，其强大的插件库可以让用户实现个性化的网站定制，开发出功能强大的网站。<a href="https://baike.baidu.com/item/Flask/1241509?fr=aladdin">抄自百度百科</a></p>
<h2 id="简单快速的开始"><a href="#简单快速的开始" class="headerlink" title="#简单快速的开始"></a>#简单快速的开始</h2><p>首先我们要准备好一个虚拟环境，Virtualenv为每个不同项目提供了一份Python安装，在没有真正安装多个Python副本的前提下，提供了一种巧妙的方式来让各项项目环境保持独立。</p>
<h3 id="使用pip安装Virtualenv"><a href="#使用pip安装Virtualenv" class="headerlink" title="#使用pip安装Virtualenv"></a>#使用pip安装Virtualenv</h3><p><code>pip install virtualenv</code></p>
<h3 id="可通过以下命令检查安装版本"><a href="#可通过以下命令检查安装版本" class="headerlink" title="#可通过以下命令检查安装版本"></a>#可通过以下命令检查安装版本</h3><p><code>virtualenv --version</code></p>
<h3 id="安装之后，通过以下命令创建虚拟环境。"><a href="#安装之后，通过以下命令创建虚拟环境。" class="headerlink" title="#安装之后，通过以下命令创建虚拟环境。"></a>#安装之后，通过以下命令创建虚拟环境。</h3><p><code>virtualenv venv</code><br>创建之后，目录下会新增一个venv文件夹，里面存储了一个全新的虚拟环境，其中包含一个私有的Python解释器。</p>
<h3 id="激活和关闭"><a href="#激活和关闭" class="headerlink" title="#激活和关闭"></a>#激活和关闭</h3><p>下面的命令可以做到激活虚拟环境和关闭虚拟环境<br>激活虚拟环境：<code>venv\Scripts\activate</code><br>关闭虚拟还击：<code>venv\Scripts\deactivate</code></p>
<h3 id="使用pip安装Flask"><a href="#使用pip安装Flask" class="headerlink" title="#使用pip安装Flask"></a>#使用pip安装Flask</h3><p><code>pip install flask</code></p>
<p>可以通过以下命令，查看所有安装包<br><code>pip list --format columns</code></p>
<h3 id="第一个Flask程序"><a href="#第一个Flask程序" class="headerlink" title="#第一个Flask程序"></a>#第一个Flask程序</h3><p>一个最简单的flask程序只要一个文件。</p>
<p>hello.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span>():</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="string">&quot;Hello World!&quot;</span>)</span><br><span class="line">    </span><br><span class="line">if__name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure>

<p>运行hello.py，访问http:/localhost:5000，看到”Hello World!”即为成功。</p>
<br>

<h2 id="进阶教程"><a href="#进阶教程" class="headerlink" title="#进阶教程"></a>#进阶教程</h2><h3 id="教程来源网站"><a href="#教程来源网站" class="headerlink" title="#教程来源网站"></a>#教程来源网站</h3><p><a href="https://dormousehole.readthedocs.io/en/latest/tutorial/index.html">https://dormousehole.readthedocs.io/en/latest/tutorial/index.html</a></p>
<h3 id="第一步：新建flaker文件夹"><a href="#第一步：新建flaker文件夹" class="headerlink" title="#第一步：新建flaker文件夹"></a>#第一步：新建flaker文件夹</h3><p>新增flaker文件夹，并往里添加__init__.py</p>
<h4 id="flaskr-init-py"><a href="#flaskr-init-py" class="headerlink" title="#flaskr/init.py"></a>#flaskr/<strong>init</strong>.py</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> db</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> auth</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> blog</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_app</span>(<span class="params">test_config=<span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="comment"># create and configure the app</span></span><br><span class="line">    app = Flask(__name__, instance_relative_config=<span class="literal">True</span>)</span><br><span class="line">    app.config.from_mapping(</span><br><span class="line">        SECRET_KEY=<span class="string">&#x27;dev&#x27;</span>,</span><br><span class="line">        DATABASE=os.path.join(app.instance_path, <span class="string">&#x27;flaskr.sqlite&#x27;</span>),</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> test_config <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="comment"># load the instance config, if it exists, when not testing</span></span><br><span class="line">        app.config.from_pyfile(<span class="string">&#x27;config.py&#x27;</span>, silent=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># load the test config if passed in</span></span><br><span class="line">        app.config.from_mapping(test_config)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ensure the instance folder exists</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        os.makedirs(app.instance_path)</span><br><span class="line">    <span class="keyword">except</span> OSError:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># a simple page that says hello</span></span><br><span class="line"><span class="meta">    @app.route(<span class="params"><span class="string">&#x27;/hello&#x27;</span></span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hello</span>():</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Hello, World!&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    db.init_app(app)</span><br><span class="line">    app.register_blueprint(auth.bp)</span><br><span class="line">    app.register_blueprint(blog.bp)</span><br><span class="line">    app.add_url_rule(<span class="string">&#x27;/&#x27;</span>, endpoint=<span class="string">&#x27;index&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> app</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="运行应用方法"><a href="#运行应用方法" class="headerlink" title="#运行应用方法"></a>#运行应用方法</h4><p>在cmd中运行</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">&gt; <span class="built_in">set</span> FLASK_APP=flaskr</span><br><span class="line">&gt; <span class="built_in">set</span> FLASK_ENV=development</span><br><span class="line">&gt; flask run</span><br></pre></td></tr></table></figure>

<p>成功会输出</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">* Serving Flask app &#x27;flaskr&#x27; (lazy loading)</span><br><span class="line">* Environment: development</span><br><span class="line">* Debug <span class="built_in">mode</span>: on</span><br><span class="line">* Running on http://<span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">5000</span> (Press CTRL+C to quit)</span><br><span class="line">* Restarting with stat</span><br><span class="line">* Debugger is active!</span><br><span class="line">* Debugger PIN: <span class="number">714</span>-<span class="number">187</span>-<span class="number">162</span></span><br></pre></td></tr></table></figure>

<p>在浏览器中访问 <a href="http://127.0.0.1:5000/hello">http://127.0.0.1:5000/hello</a> ，就可以看到 “Hello, World!” 信息。</p>
<h3 id="第二步：-定义和操作数据库"><a href="#第二步：-定义和操作数据库" class="headerlink" title="#第二步： 定义和操作数据库"></a>#第二步： 定义和操作数据库</h3><p>Python 内置了SQLite 数据库支持。</p>
<h4 id="flaskr-db-py"><a href="#flaskr-db-py" class="headerlink" title="#flaskr/db.py"></a>#flaskr/db.py</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> click</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> current_app, g</span><br><span class="line"><span class="keyword">from</span> flask.cli <span class="keyword">import</span> with_appcontext</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init_db</span>():</span></span><br><span class="line">    db = get_db()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> current_app.open_resource(<span class="string">&#x27;schema.sql&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        db.executescript(f.read().decode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@click.command(<span class="params"><span class="string">&#x27;init-db&#x27;</span></span>)</span></span><br><span class="line"><span class="meta">@with_appcontext</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init_db_command</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Clear the existing data and create new tables.&quot;&quot;&quot;</span></span><br><span class="line">    init_db()</span><br><span class="line">    click.echo(<span class="string">&#x27;Initialized the database.&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_db</span>():</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;db&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> g:</span><br><span class="line">        g.db = sqlite3.connect(</span><br><span class="line">            current_app.config[<span class="string">&#x27;DATABASE&#x27;</span>],</span><br><span class="line">            detect_types=sqlite3.PARSE_DECLTYPES</span><br><span class="line">        )</span><br><span class="line">        g.db.row_factory = sqlite3.Row</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> g.db</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">close_db</span>(<span class="params">e=<span class="literal">None</span></span>):</span></span><br><span class="line">    db = g.pop(<span class="string">&#x27;db&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> db <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        db.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init_app</span>(<span class="params">app</span>):</span></span><br><span class="line">    app.teardown_appcontext(close_db)</span><br><span class="line">    app.cli.add_command(init_db_command)</span><br></pre></td></tr></table></figure>

<h4 id="flaskr-schema-sql"><a href="#flaskr-schema-sql" class="headerlink" title="#flaskr/schema.sql"></a>#flaskr/schema.sql</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> <span class="keyword">user</span>;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> post;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> (</span><br><span class="line">  id <span class="type">INTEGER</span> <span class="keyword">PRIMARY</span> KEY AUTOINCREMENT,</span><br><span class="line">  username TEXT <span class="keyword">UNIQUE</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  password TEXT <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> post (</span><br><span class="line">  id <span class="type">INTEGER</span> <span class="keyword">PRIMARY</span> KEY AUTOINCREMENT,</span><br><span class="line">  author_id <span class="type">INTEGER</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  created <span class="type">TIMESTAMP</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line">  title TEXT <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  body TEXT <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">FOREIGN</span> KEY (author_id) <span class="keyword">REFERENCES</span> <span class="keyword">user</span> (id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h4 id="初始化数据库文件"><a href="#初始化数据库文件" class="headerlink" title="#初始化数据库文件"></a>#初始化数据库文件</h4><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">$ flask init-db</span><br><span class="line">Initialized the database.</span><br></pre></td></tr></table></figure>

<p>现在会有一个 <code>flaskr.sqlite</code> 文件出现在项目所在文件夹的 <code>instance</code> 文件夹中。</p>
<h3 id="第三步：创建蓝图和视图"><a href="#第三步：创建蓝图和视图" class="headerlink" title="#第三步：创建蓝图和视图"></a>#第三步：创建蓝图和视图</h3><h4 id="flaskr-auth-py"><a href="#flaskr-auth-py" class="headerlink" title="#flaskr/auth.py"></a>#flaskr/auth.py</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> (</span><br><span class="line">    Blueprint, flash, g, redirect, render_template, request, session, url_for</span><br><span class="line">)</span><br><span class="line"><span class="keyword">from</span> werkzeug.security <span class="keyword">import</span> check_password_hash, generate_password_hash</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flaskr.db <span class="keyword">import</span> get_db</span><br><span class="line"></span><br><span class="line">bp = Blueprint(<span class="string">&#x27;auth&#x27;</span>, __name__, url_prefix=<span class="string">&#x27;/auth&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注册视图</span></span><br><span class="line"><span class="meta">@bp.route(<span class="params"><span class="string">&#x27;/register&#x27;</span>, methods=(<span class="params"><span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span></span>)</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span>():</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        username = request.form[<span class="string">&#x27;username&#x27;</span>]</span><br><span class="line">        password = request.form[<span class="string">&#x27;password&#x27;</span>]</span><br><span class="line">        db = get_db()</span><br><span class="line">        error = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> username:</span><br><span class="line">            error = <span class="string">&#x27;Username is required.&#x27;</span></span><br><span class="line">        <span class="keyword">elif</span> <span class="keyword">not</span> password:</span><br><span class="line">            error = <span class="string">&#x27;Password is required.&#x27;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> error <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                db.execute(</span><br><span class="line">                    <span class="string">&quot;INSERT INTO user (username, password) VALUES (?, ?)&quot;</span>,</span><br><span class="line">                    (username, generate_password_hash(password)),</span><br><span class="line">                )</span><br><span class="line">                db.commit()</span><br><span class="line">            <span class="keyword">except</span> db.IntegrityError:</span><br><span class="line">                error = <span class="string">f&quot;User <span class="subst">&#123;username&#125;</span> is already registered.&quot;</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> redirect(url_for(<span class="string">&quot;auth.login&quot;</span>))</span><br><span class="line"></span><br><span class="line">        flash(error)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;auth/register.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 登录视图</span></span><br><span class="line"><span class="meta">@bp.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>, methods=(<span class="params"><span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span></span>)</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        username = request.form[<span class="string">&#x27;username&#x27;</span>]</span><br><span class="line">        password = request.form[<span class="string">&#x27;password&#x27;</span>]</span><br><span class="line">        db = get_db()</span><br><span class="line">        error = <span class="literal">None</span></span><br><span class="line">        user = db.execute(</span><br><span class="line">            <span class="string">&#x27;SELECT * FROM user WHERE username = ?&#x27;</span>, (username,)</span><br><span class="line">        ).fetchone()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> user <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            error = <span class="string">&#x27;Incorrect username.&#x27;</span></span><br><span class="line">        <span class="keyword">elif</span> <span class="keyword">not</span> check_password_hash(user[<span class="string">&#x27;password&#x27;</span>], password):</span><br><span class="line">            error = <span class="string">&#x27;Incorrect password.&#x27;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> error <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            session.clear()</span><br><span class="line">            session[<span class="string">&#x27;user_id&#x27;</span>] = user[<span class="string">&#x27;id&#x27;</span>]</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br><span class="line"></span><br><span class="line">        flash(error)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;auth/login.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@bp.before_app_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_logged_in_user</span>():</span></span><br><span class="line">    user_id = session.get(<span class="string">&#x27;user_id&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> user_id <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        g.user = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        g.user = get_db().execute(</span><br><span class="line">            <span class="string">&#x27;SELECT * FROM user WHERE id = ?&#x27;</span>, (user_id,)</span><br><span class="line">        ).fetchone()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注销视图</span></span><br><span class="line"><span class="meta">@bp.route(<span class="params"><span class="string">&#x27;/logout&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">logout</span>():</span></span><br><span class="line">    session.clear()</span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login_required</span>(<span class="params">view</span>):</span></span><br><span class="line"><span class="meta">    @functools.wraps(<span class="params">view</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapped_view</span>(<span class="params">**kwargs</span>):</span></span><br><span class="line">        <span class="keyword">if</span> g.user <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;auth.login&#x27;</span>))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> view(**kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wrapped_view</span><br></pre></td></tr></table></figure>

<h3 id="第四步：新增模板与静态文件"><a href="#第四步：新增模板与静态文件" class="headerlink" title="#第四步：新增模板与静态文件"></a>#第四步：新增模板与静态文件</h3><p>不是前端程序员，不做过多描述。</p>
<h4 id="flaskr-templates-base-html"><a href="#flaskr-templates-base-html" class="headerlink" title="#flaskr/templates/base.html"></a>#flaskr/templates/base.html</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>&#123;% block title %&#125;&#123;% endblock %&#125; - Flaskr<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123; url_for(&#x27;static&#x27;, filename=&#x27;style.css&#x27;) &#125;&#125;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Flaskr<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    &#123;% if g.user %&#125;</span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; g.user[&#x27;username&#x27;] &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123; url_for(&#x27;auth.logout&#x27;) &#125;&#125;&quot;</span>&gt;</span>Log Out<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    &#123;% else %&#125;</span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123; url_for(&#x27;auth.register&#x27;) &#125;&#125;&quot;</span>&gt;</span>Register<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123; url_for(&#x27;auth.login&#x27;) &#125;&#125;&quot;</span>&gt;</span>Log In<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">    &#123;% block header %&#125;&#123;% endblock %&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">  &#123;% for message in get_flashed_messages() %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flash&quot;</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  &#123;% endfor %&#125;</span><br><span class="line">  &#123;% block content %&#125;&#123;% endblock %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="flaskr-templates-auth-register-html"><a href="#flaskr-templates-auth-register-html" class="headerlink" title="#flaskr/templates/auth/register.html"></a>#flaskr/templates/auth/register.html</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% extends &#x27;base.html&#x27; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block header %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;% block title %&#125;Register&#123;% endblock %&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;username&quot;</span>&gt;</span>Username<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;password&quot;</span>&gt;</span>Password<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;password&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Register&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>

<h4 id="flaskr-templates-auth-login-html"><a href="#flaskr-templates-auth-login-html" class="headerlink" title="#flaskr/templates/auth/login.html"></a>#flaskr/templates/auth/login.html</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% extends &#x27;base.html&#x27; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block header %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;% block title %&#125;Log In&#123;% endblock %&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;username&quot;</span>&gt;</span>Username<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;password&quot;</span>&gt;</span>Password<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;password&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Log In&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>

<h4 id="flaskr-templates-blog-create-html"><a href="#flaskr-templates-blog-create-html" class="headerlink" title="#flaskr/templates/blog/create.html"></a>#flaskr/templates/blog/create.html</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% extends &#x27;base.html&#x27; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block header %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;% block title %&#125;New Post&#123;% endblock %&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;title&quot;</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;title&quot;</span> <span class="attr">id</span>=<span class="string">&quot;title&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&#123;&#123; request.form[&#x27;title&#x27;] &#125;&#125;&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;body&quot;</span>&gt;</span>Body<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;body&quot;</span> <span class="attr">id</span>=<span class="string">&quot;body&quot;</span>&gt;</span>&#123;&#123; request.form[&#x27;body&#x27;] &#125;&#125;<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Save&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>

<h4 id="flaskr-templates-blog-update-html"><a href="#flaskr-templates-blog-update-html" class="headerlink" title="#flaskr/templates/blog/update.html"></a>#flaskr/templates/blog/update.html</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% extends &#x27;base.html&#x27; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block header %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;% block title %&#125;Edit &quot;&#123;&#123; post[&#x27;title&#x27;] &#125;&#125;&quot;&#123;% endblock %&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;title&quot;</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;title&quot;</span> <span class="attr">id</span>=<span class="string">&quot;title&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">value</span>=<span class="string">&quot;&#123;&#123; request.form[&#x27;title&#x27;] or post[&#x27;title&#x27;] &#125;&#125;&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;body&quot;</span>&gt;</span>Body<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;body&quot;</span> <span class="attr">id</span>=<span class="string">&quot;body&quot;</span>&gt;</span>&#123;&#123; request.form[&#x27;body&#x27;] or post[&#x27;body&#x27;] &#125;&#125;<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Save&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&#123;&#123; url_for(&#x27;blog.delete&#x27;, id=post[&#x27;id&#x27;]) &#125;&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;danger&quot;</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Delete&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;return confirm(&#x27;Are you sure?&#x27;);&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>



<h4 id="flaskr-static-style-css"><a href="#flaskr-static-style-css" class="headerlink" title="#flaskr/static/style.css"></a>#flaskr/static/style.css</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123; <span class="attribute">font-family</span>: sans-serif; <span class="attribute">background</span>: <span class="number">#eee</span>; <span class="attribute">padding</span>: <span class="number">1rem</span>; &#125;</span><br><span class="line"><span class="selector-tag">body</span> &#123; <span class="attribute">max-width</span>: <span class="number">960px</span>; <span class="attribute">margin</span>: <span class="number">0</span> auto; <span class="attribute">background</span>: white; &#125;</span><br><span class="line"><span class="selector-tag">h1</span> &#123; <span class="attribute">font-family</span>: serif; <span class="attribute">color</span>: <span class="number">#377ba8</span>; <span class="attribute">margin</span>: <span class="number">1rem</span> <span class="number">0</span>; &#125;</span><br><span class="line"><span class="selector-tag">a</span> &#123; <span class="attribute">color</span>: <span class="number">#377ba8</span>; &#125;</span><br><span class="line">hr &#123; <span class="attribute">border</span>: none; <span class="attribute">border-top</span>: <span class="number">1px</span> solid lightgray; &#125;</span><br><span class="line"><span class="selector-tag">nav</span> &#123; <span class="attribute">background</span>: lightgray; <span class="attribute">display</span>: flex; <span class="attribute">align-items</span>: center; <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">0.5rem</span>; &#125;</span><br><span class="line"><span class="selector-tag">nav</span> <span class="selector-tag">h1</span> &#123; <span class="attribute">flex</span>: auto; <span class="attribute">margin</span>: <span class="number">0</span>; &#125;</span><br><span class="line"><span class="selector-tag">nav</span> <span class="selector-tag">h1</span> <span class="selector-tag">a</span> &#123; <span class="attribute">text-decoration</span>: none; <span class="attribute">padding</span>: <span class="number">0.25rem</span> <span class="number">0.5rem</span>; &#125;</span><br><span class="line"><span class="selector-tag">nav</span> <span class="selector-tag">ul</span>  &#123; <span class="attribute">display</span>: flex; <span class="attribute">list-style</span>: none; <span class="attribute">margin</span>: <span class="number">0</span>; <span class="attribute">padding</span>: <span class="number">0</span>; &#125;</span><br><span class="line"><span class="selector-tag">nav</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span>, <span class="selector-tag">nav</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-tag">span</span>, <span class="selector-tag">header</span> <span class="selector-class">.action</span> &#123; <span class="attribute">display</span>: block; <span class="attribute">padding</span>: <span class="number">0.5rem</span>; &#125;</span><br><span class="line"><span class="selector-class">.content</span> &#123; <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">1rem</span> <span class="number">1rem</span>; &#125;</span><br><span class="line"><span class="selector-class">.content</span> &gt; <span class="selector-tag">header</span> &#123; <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid lightgray; <span class="attribute">display</span>: flex; <span class="attribute">align-items</span>: flex-end; &#125;</span><br><span class="line"><span class="selector-class">.content</span> &gt; <span class="selector-tag">header</span> <span class="selector-tag">h1</span> &#123; <span class="attribute">flex</span>: auto; <span class="attribute">margin</span>: <span class="number">1rem</span> <span class="number">0</span> <span class="number">0.25rem</span> <span class="number">0</span>; &#125;</span><br><span class="line"><span class="selector-class">.flash</span> &#123; <span class="attribute">margin</span>: <span class="number">1em</span> <span class="number">0</span>; <span class="attribute">padding</span>: <span class="number">1em</span>; <span class="attribute">background</span>: <span class="number">#cae6f6</span>; <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#377ba8</span>; &#125;</span><br><span class="line"><span class="selector-class">.post</span> &gt; <span class="selector-tag">header</span> &#123; <span class="attribute">display</span>: flex; <span class="attribute">align-items</span>: flex-end; <span class="attribute">font-size</span>: <span class="number">0.85em</span>; &#125;</span><br><span class="line"><span class="selector-class">.post</span> &gt; <span class="selector-tag">header</span> &gt; <span class="selector-tag">div</span><span class="selector-pseudo">:first</span>-of-type &#123; <span class="attribute">flex</span>: auto; &#125;</span><br><span class="line"><span class="selector-class">.post</span> &gt; <span class="selector-tag">header</span> <span class="selector-tag">h1</span> &#123; <span class="attribute">font-size</span>: <span class="number">1.5em</span>; <span class="attribute">margin-bottom</span>: <span class="number">0</span>; &#125;</span><br><span class="line"><span class="selector-class">.post</span> <span class="selector-class">.about</span> &#123; <span class="attribute">color</span>: slategray; <span class="attribute">font-style</span>: italic; &#125;</span><br><span class="line"><span class="selector-class">.post</span> <span class="selector-class">.body</span> &#123; <span class="attribute">white-space</span>: pre-line; &#125;</span><br><span class="line"><span class="selector-class">.content</span><span class="selector-pseudo">:last-child</span> &#123; <span class="attribute">margin-bottom</span>: <span class="number">0</span>; &#125;</span><br><span class="line"><span class="selector-class">.content</span> <span class="selector-tag">form</span> &#123; <span class="attribute">margin</span>: <span class="number">1em</span> <span class="number">0</span>; <span class="attribute">display</span>: flex; <span class="attribute">flex-direction</span>: column; &#125;</span><br><span class="line"><span class="selector-class">.content</span> <span class="selector-tag">label</span> &#123; <span class="attribute">font-weight</span>: bold; <span class="attribute">margin-bottom</span>: <span class="number">0.5em</span>; &#125;</span><br><span class="line"><span class="selector-class">.content</span> <span class="selector-tag">input</span>, <span class="selector-class">.content</span> <span class="selector-tag">textarea</span> &#123; <span class="attribute">margin-bottom</span>: <span class="number">1em</span>; &#125;</span><br><span class="line"><span class="selector-class">.content</span> <span class="selector-tag">textarea</span> &#123; <span class="attribute">min-height</span>: <span class="number">12em</span>; <span class="attribute">resize</span>: vertical; &#125;</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-class">.danger</span> &#123; <span class="attribute">color</span>: <span class="number">#cc2f2e</span>; &#125;</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=submit]</span> &#123; <span class="attribute">align-self</span>: start; <span class="attribute">min-width</span>: <span class="number">10em</span>; &#125;</span><br></pre></td></tr></table></figure>

<h3 id="第五步：定义蓝图并注册到应用工长"><a href="#第五步：定义蓝图并注册到应用工长" class="headerlink" title="#第五步：定义蓝图并注册到应用工长"></a>#第五步：定义蓝图并注册到应用工长</h3><h4 id="flaskr-blog-py"><a href="#flaskr-blog-py" class="headerlink" title="#flaskr/blog.py"></a>#flaskr/blog.py</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> (</span><br><span class="line">    Blueprint, flash, g, redirect, render_template, request, url_for</span><br><span class="line">)</span><br><span class="line"><span class="keyword">from</span> werkzeug.exceptions <span class="keyword">import</span> abort</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flaskr.auth <span class="keyword">import</span> login_required</span><br><span class="line"><span class="keyword">from</span> flaskr.db <span class="keyword">import</span> get_db</span><br><span class="line"></span><br><span class="line">bp = Blueprint(<span class="string">&#x27;blog&#x27;</span>, __name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@bp.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    db = get_db()</span><br><span class="line">    posts = db.execute(</span><br><span class="line">        <span class="string">&#x27;SELECT p.id, title, body, created, author_id, username&#x27;</span></span><br><span class="line">        <span class="string">&#x27; FROM post p JOIN user u ON p.author_id = u.id&#x27;</span></span><br><span class="line">        <span class="string">&#x27; ORDER BY created DESC&#x27;</span></span><br><span class="line">    ).fetchall()</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;blog/index.html&#x27;</span>, posts=posts)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@bp.route(<span class="params"><span class="string">&#x27;/create&#x27;</span>, methods=(<span class="params"><span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span></span>)</span>)</span></span><br><span class="line"><span class="meta">@login_required</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span>():</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        title = request.form[<span class="string">&#x27;title&#x27;</span>]</span><br><span class="line">        body = request.form[<span class="string">&#x27;body&#x27;</span>]</span><br><span class="line">        error = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> title:</span><br><span class="line">            error = <span class="string">&#x27;Title is required.&#x27;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> error <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            flash(error)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            db = get_db()</span><br><span class="line">            db.execute(</span><br><span class="line">                <span class="string">&#x27;INSERT INTO post (title, body, author_id)&#x27;</span></span><br><span class="line">                <span class="string">&#x27; VALUES (?, ?, ?)&#x27;</span>,</span><br><span class="line">                (title, body, g.user[<span class="string">&#x27;id&#x27;</span>])</span><br><span class="line">            )</span><br><span class="line">            db.commit()</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;blog.index&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;blog/create.html&#x27;</span>)   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_post</span>(<span class="params"><span class="built_in">id</span>, check_author=<span class="literal">True</span></span>):</span></span><br><span class="line">    post = get_db().execute(</span><br><span class="line">        <span class="string">&#x27;SELECT p.id, title, body, created, author_id, username&#x27;</span></span><br><span class="line">        <span class="string">&#x27; FROM post p JOIN user u ON p.author_id = u.id&#x27;</span></span><br><span class="line">        <span class="string">&#x27; WHERE p.id = ?&#x27;</span>,</span><br><span class="line">        (<span class="built_in">id</span>,)</span><br><span class="line">    ).fetchone()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> post <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        abort(<span class="number">404</span>, <span class="string">f&quot;Post id <span class="subst">&#123;<span class="built_in">id</span>&#125;</span> doesn&#x27;t exist.&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> check_author <span class="keyword">and</span> post[<span class="string">&#x27;author_id&#x27;</span>] != g.user[<span class="string">&#x27;id&#x27;</span>]:</span><br><span class="line">        abort(<span class="number">403</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> post</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@bp.route(<span class="params"><span class="string">&#x27;/&lt;int:id&gt;/update&#x27;</span>, methods=(<span class="params"><span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span></span>)</span>)</span></span><br><span class="line"><span class="meta">@login_required</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update</span>(<span class="params"><span class="built_in">id</span></span>):</span></span><br><span class="line">    post = get_post(<span class="built_in">id</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        title = request.form[<span class="string">&#x27;title&#x27;</span>]</span><br><span class="line">        body = request.form[<span class="string">&#x27;body&#x27;</span>]</span><br><span class="line">        error = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> title:</span><br><span class="line">            error = <span class="string">&#x27;Title is required.&#x27;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> error <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            flash(error)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            db = get_db()</span><br><span class="line">            db.execute(</span><br><span class="line">                <span class="string">&#x27;UPDATE post SET title = ?, body = ?&#x27;</span></span><br><span class="line">                <span class="string">&#x27; WHERE id = ?&#x27;</span>,</span><br><span class="line">                (title, body, <span class="built_in">id</span>)</span><br><span class="line">            )</span><br><span class="line">            db.commit()</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;blog.index&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;blog/update.html&#x27;</span>, post=post)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@bp.route(<span class="params"><span class="string">&#x27;/&lt;int:id&gt;/delete&#x27;</span>, methods=(<span class="params"><span class="string">&#x27;POST&#x27;</span>,</span>)</span>)</span></span><br><span class="line"><span class="meta">@login_required</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span>(<span class="params"><span class="built_in">id</span></span>):</span></span><br><span class="line">    get_post(<span class="built_in">id</span>)</span><br><span class="line">    db = get_db()</span><br><span class="line">    db.execute(<span class="string">&#x27;DELETE FROM post WHERE id = ?&#x27;</span>, (<span class="built_in">id</span>,))</span><br><span class="line">    db.commit()</span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;blog.index&#x27;</span>))</span><br></pre></td></tr></table></figure>

<h3 id="第六步：运行项目"><a href="#第六步：运行项目" class="headerlink" title="#第六步：运行项目"></a>#第六步：运行项目</h3><p>如果没有出错，你就会得到一个简单的blog。</p>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>不务正业</tag>
        <tag>Python</tag>
        <tag>Flask</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot 整合 elasticsearch</title>
    <url>/2022/05/08/blog/SpringBoot%20%E6%95%B4%E5%90%88%20elasticsearch/</url>
    <content><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="#写在前面"></a>#写在前面</h1><p>无聊看了看自己的博客，发现上一次更新居然是一月份的事情，而且还是自己的无厘头小说，看来是就连自己的二十岁生日也想不到有什么可以写的内容。</p>
<p>但是随着最近我的视频网站开发完成，想着写几篇博客记录一下自己学过的东西。</p>
<p>属于是代码小鬼，内行人看个笑话就好。</p>
<br>

<h1 id="过程"><a href="#过程" class="headerlink" title="#过程"></a>#过程</h1><p>其实在四月份，我就完成了视频网站的基础功能的实现，选择走的极简路线，换句话说就是没那么多花里胡哨的东西，再换句话说，就是我不会整那些玩意。</p>
<p>在我准备开始专心优化代码的时候，前端一个不起眼的地方倒是突然吸引了我的注意，一个搜索框。<br>这时我才突然想起来，我的视频网站还差一个最基础的功能，那就是搜索功能，算是自己打自己的脸了。</p>
<p>那这个功能怎么实现呢，其实很简单，模糊查询就可以了。 说到这里，相信已经有人开始看不下去了。<br>模糊查询谁不会啊，总不会还有人不会吧？ 这么简单就实现了，那你这篇博客写个毛线。</p>
<p>那肯定不会只写那么简单的内容，于是接下来就开始今天的内容<br>SpringBoot集成Elasticsearch</p>
<br>

<h2 id="关于Elasticsearch"><a href="#关于Elasticsearch" class="headerlink" title="#关于Elasticsearch"></a>#关于Elasticsearch</h2><p>首先，Elaticsearch是什么？<br>它是一个分布式、RESTful风格的搜索和数据分析引擎。简单来说，就是你可以把你的数据丢到上面，在上面进行搜索和数据的分析。</p>
<br>

<h2 id="如何下载Elasticsearch"><a href="#如何下载Elasticsearch" class="headerlink" title="#如何下载Elasticsearch"></a>#如何下载Elasticsearch</h2><p><a href="https://www.elastic.co/cn/downloads/past-releases">https://www.elastic.co/cn/downloads/past-releases</a></p>
<p>在官网就可以下到你想要的zip包</p>
<p><img src="https://makiori.oss-cn-beijing.aliyuncs.com/blog/5.7/1.png?versionId=CAEQIRiBgIClh6H4hBgiIDY0NDFhMWFhNjZjNTRmMDJiNjZhM2VkZDI1Yzg5OTlm" alt="Elasticsearch"></p>
<p><img src="https://makiori.oss-cn-beijing.aliyuncs.com/blog/5.7/2.png?versionId=CAEQIRiBgID8hqH4hBgiIGNhNDhlMmJmOGE5NjRkNTM5ODE3OTAxNDNmMGQyMDlm" alt="Kibana"></p>
<p>分别是Elaticsearch的本体，以及使其可视化的Kibana。这两个都是开包即用的，所以说很方便。</p>
<p>下载解压之后，分别运行其bin目录下的elasticsearch.bat和kibana.bat</p>
<p>接着访问 <code>http://localhost:5601</code>  , 就可以看到Kibana的用户界面了。</p>
<br>


<h2 id="如何集成Elasticsearch"><a href="#如何集成Elasticsearch" class="headerlink" title="#如何集成Elasticsearch"></a>#如何集成Elasticsearch</h2><p>接下来讲如何讲Elaticsearch集成到我的视频网站，也就是springboot项目当中。</p>
<br>

<h3 id="在pom-xml中添加相关依赖"><a href="#在pom-xml中添加相关依赖" class="headerlink" title="#在pom.xml中添加相关依赖"></a>#在pom.xml中添加相关依赖</h3><p>万变不离其宗，第一件事情肯定是为其添加相关依赖。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--Elasticsearch相关依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-elasticsearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<br>

<h3 id="客户端配置文件-RestClientConfig"><a href="#客户端配置文件-RestClientConfig" class="headerlink" title="#客户端配置文件 RestClientConfig"></a>#客户端配置文件 RestClientConfig</h3><p>接着是其配置文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  ElasticSearch 客户端配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestClientConfig</span> <span class="keyword">extends</span> <span class="title">AbstractElasticsearchConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;es.host:localhost&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String esHost;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;es.port:9200&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer esPort;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestHighLevelClient <span class="title">elasticsearchClient</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> ClientConfiguration clientConfiguration = ClientConfiguration.builder()</span><br><span class="line">                .connectedTo(esHost+<span class="string">&quot;:&quot;</span>+esPort)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="keyword">return</span> RestClients.create(clientConfiguration).rest();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>记得不要忘了在application.properties上面配置你的Elasticsearch端口，默认为9200</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">es.host&#x3D;localhost</span><br><span class="line">es.port&#x3D;9200</span><br></pre></td></tr></table></figure>

<br>

<h3 id="在domain中添加文档对象-EsVideo"><a href="#在domain中添加文档对象-EsVideo" class="headerlink" title="在domain中添加文档对象 EsVideo"></a>在domain中添加文档对象 EsVideo</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.makiori.server.domain.es;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonFormat;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.annotation.Id;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.elasticsearch.annotations.Document;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.elasticsearch.annotations.Field;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.elasticsearch.annotations.FieldType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Makiori</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022/5/6 13:55</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Document(indexName = &quot;video&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EsVideo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="meta">@Field(type = FieldType.Text, analyzer = &quot;ik_max_word&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@Field(type = FieldType.Text)</span></span><br><span class="line">    <span class="keyword">private</span> String item;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@Field(type = FieldType.Integer)</span></span><br><span class="line">    <span class="keyword">private</span> Integer time;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@Field(type = FieldType.Text)</span></span><br><span class="line">    <span class="keyword">private</span> String vod;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    @Field(type = FieldType.Date,format = DateFormat.basic_date_time)</span></span><br><span class="line">    <span class="meta">@JsonFormat(pattern=&quot;yyyy-MM-dd HH:mm:ss&quot;,timezone = &quot;GMT+8&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date createdAt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    @Field(type = FieldType.Date,format = DateFormat.basic_date_time)</span></span><br><span class="line">    <span class="meta">@JsonFormat(pattern=&quot;yyyy-MM-dd HH:mm:ss&quot;,timezone = &quot;GMT+8&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date updatedAt;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@Field(type = FieldType.Text)</span></span><br><span class="line">    <span class="keyword">private</span> String cover;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@Field(type = FieldType.Text)</span></span><br><span class="line">    <span class="keyword">private</span> String status;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//getting &amp; setting 省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h3 id="添加EsVideoRepository接口用于操作Elasticsearch"><a href="#添加EsVideoRepository接口用于操作Elasticsearch" class="headerlink" title="添加EsVideoRepository接口用于操作Elasticsearch"></a>添加EsVideoRepository接口用于操作Elasticsearch</h3><p>有了类，就得想办法操作Elaticsearch， 我们通过继承<code>ElasticsearchRepository</code>获得操作Elaticsearch的手段</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.makiori.server.repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.makiori.server.domain.es.EsVideo;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.elasticsearch.annotations.Highlight;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.elasticsearch.annotations.HighlightField;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.elasticsearch.annotations.Query;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.elasticsearch.core.SearchHits;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.elasticsearch.repository.ElasticsearchRepository;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Makiori</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022/5/6 15:15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EsVideoRepository</span> <span class="keyword">extends</span> <span class="title">ElasticsearchRepository</span>&lt;<span class="title">EsVideo</span>, <span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关键词高亮</span></span><br><span class="line">    <span class="meta">@Highlight(fields = &#123;</span></span><br><span class="line"><span class="meta">            @HighlightField(name = &quot;title&quot;)</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Query(&quot;&#123;\&quot;match\&quot;:&#123;\&quot;title\&quot;:\&quot;?0\&quot;&#125;&#125;&quot;)</span></span><br><span class="line">    <span class="function">SearchHits&lt;EsVideo&gt; <span class="title">find</span><span class="params">(String keyword)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>


<h3 id="添加EsVideoService"><a href="#添加EsVideoService" class="headerlink" title="添加EsVideoService"></a>添加EsVideoService</h3><p>添加EsVideoService，实现相应操作。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.makiori.server.service.es;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.makiori.server.domain.es.EsVideo;</span><br><span class="line"><span class="keyword">import</span> com.makiori.server.domain.Video;</span><br><span class="line"><span class="keyword">import</span> com.makiori.server.mapper.my.MyVideoMapper;</span><br><span class="line"><span class="keyword">import</span> com.makiori.server.repository.EsVideoRepository;</span><br><span class="line"><span class="keyword">import</span> com.makiori.server.util.CopyUtil;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.elasticsearch.core.SearchHits;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EsVideoService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> EsVideoRepository esVideoRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> MyVideoMapper myVideoMapper;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  导入所有视频到ES</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">importAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;EsVideo&gt; esVideoList = myVideoMapper.getAllEsVideoList(<span class="keyword">null</span>);</span><br><span class="line">        Iterable&lt;EsVideo&gt; esVideoIterable = esVideoRepository.saveAll(esVideoList);</span><br><span class="line">        Iterator&lt;EsVideo&gt; iterator = esVideoIterable.iterator();</span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(iterator.hasNext()) &#123;</span><br><span class="line">            result++;</span><br><span class="line">            iterator.next();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  查询视频</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SearchHits&lt;EsVideo&gt; <span class="title">searchVideo</span> <span class="params">(String keyword)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> esVideoRepository.find(keyword);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  es新增</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">esInsert</span><span class="params">(Video video)</span> </span>&#123;</span><br><span class="line">        EsVideo esVideo = CopyUtil.copy(video, EsVideo.class);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            esVideoRepository.save(esVideo);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  es修改</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">esUpdate</span><span class="params">(Video video)</span> </span>&#123;</span><br><span class="line">        EsVideo esVideo = CopyUtil.copy(video, EsVideo.class);</span><br><span class="line"><span class="comment">//        Optional&lt;EsVideo&gt; esVideo1 = esVideoRepository.findById(esVideo.getId());</span></span><br><span class="line"><span class="comment">//        EsVideo test = esVideo1.get();</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;es修改：&quot; + test);</span></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            esVideoRepository.save(esVideo);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  es删除</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">esDelete</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            esVideoRepository.deleteById(id);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<br>

<h3 id="添加EsVideoController定义接口"><a href="#添加EsVideoController定义接口" class="headerlink" title="添加EsVideoController定义接口"></a>添加EsVideoController定义接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.makiori.search.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.makiori.server.domain.es.EsVideo;</span><br><span class="line"><span class="keyword">import</span> com.makiori.server.dto.ResponseDto;</span><br><span class="line"><span class="keyword">import</span> com.makiori.server.service.es.EsVideoService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.elasticsearch.core.SearchHits;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StopWatch;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Makiori</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022/5/7 13:45</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/esvideo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EsVideoController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> EsVideoService esVideoService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 导入所有数据库中视频到ES</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/importAll&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseDto <span class="title">importAllList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ResponseDto responseDto = <span class="keyword">new</span> ResponseDto();</span><br><span class="line">        <span class="keyword">int</span> count = esVideoService.importAll();</span><br><span class="line">        responseDto.setContent(count);</span><br><span class="line">        <span class="keyword">return</span> responseDto;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  ElasticSearch查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/search/&#123;key&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseDto <span class="title">search</span><span class="params">(<span class="meta">@PathVariable</span> String key)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        ResponseDto responseDto = <span class="keyword">new</span> ResponseDto();</span><br><span class="line">        <span class="comment">//计时器</span></span><br><span class="line">        <span class="keyword">final</span> StopWatch stopWatch = <span class="keyword">new</span> StopWatch();</span><br><span class="line">        <span class="comment">//开始记时</span></span><br><span class="line">        stopWatch.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> SearchHits&lt;EsVideo&gt; searchHits = esVideoService.searchVideo(key);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//停止计时</span></span><br><span class="line">        stopWatch.stop();</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">double</span> totalTimeSeconds = stopWatch.getTotalTimeSeconds();</span><br><span class="line">        responseDto.setContent(searchHits.getSearchHits());</span><br><span class="line"><span class="comment">//        responseDto.setCode(String.valueOf(totalTimeSeconds));</span></span><br><span class="line">        <span class="keyword">return</span> responseDto;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="学习思考"><a href="#学习思考" class="headerlink" title="学习思考"></a>学习思考</h3><p>由于是第一次使用这玩意，所以第一次集成的时候并没有考虑将其分离出一个模块来，但毕竟是分布式，所以还是得想法设法将其服务分离出来。<br>其实现在还有一些未解决的问题，比如说如何同步搜索引擎与数据库中的数据呢。<br>网上看来的一个侵入性比较强的方法，就是在对数据库进行增删改查的同时，对搜索引擎也进行相同的操作。忽略侵入性的问题，如果当搜索引擎崩溃的时候，就会堆积出莫名奇妙的数据。或者像我这样项目删除添加了事务注释之后，会导致无法完成任务而使得整个软件崩溃。那么分布式就变得没有一点意义了。</p>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>SpringBoot</tag>
        <tag>elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>《角落里的魔女》第0.2022章</title>
    <url>/2022/01/31/novel/%E8%A7%92%E8%90%BD%E9%87%8C%E7%9A%84%E9%AD%94%E5%A5%B3/%E8%A7%92%E8%90%BD%E9%87%8C%E7%9A%84%E9%AD%94%E5%A5%B3%EF%BC%880.2022%EF%BC%89/</url>
    <content><![CDATA[<p>&nbsp;&nbsp;在这个城市的角落里，风铃书屋今天并没有在营业，而大街上也没有几家开门做生意的店。要说为什么的话，因为今天是特别的日子，忙碌了一整年的人们回家团圆的日子，所以先不说店里的人们要不要回家休息，就连大街上也见不到多少在闲逛的人，即使开门也不怎么会有生意的。</p>
  <!-- read more -->

<p>&nbsp;&nbsp;不过，风铃书屋没有营业的真正原因是…… </p>
<p>&nbsp;&nbsp;在寂静的店面里，柜台后面的躺椅上，有一团人与被子的混合物，从中发出微弱的呼吸声。这都已经快到中午了，裹在被子里面的人却丝毫没有要醒来的迹象，糟糕的睡相一直维持到手机闹钟大响特响。</p>
<p>&nbsp;&nbsp;“好吵…” 被吵醒的小风一脸痛苦，半眯着眼睛，从被子里伸出手来寻找声音的来源。</p>
<p>&nbsp;&nbsp;“砰”的一下，闹钟虽然被关掉了，但手机也掉在了地上，而小风刚弓起的身子，又慢慢地躺了下去。</p>
<p>&nbsp;&nbsp;“好困…” 小风之所以会睡在店里面，一般是因为前夜在柜台前通宵看书了。小风会根据时间的不同选择所看的书籍，其实也就是知道什么时候该做些什么。而根据看的书的不同，她的入迷程度也会有所变化。看店时读的一般是小说，只是帮助打发时间而已；而晚上的时间，小风则会研究奶奶留下来的那些关于魔法的书籍。不过话说回来，小风其实也没经历过几次通宵，之前阻止的人是奶奶，而现在则是云云，甚至有几次小风是被揪着耳朵拖回了房间。</p>
<p>&nbsp;&nbsp;“通宵对身体有害，所以禁止。” 无论是奶奶还是云云，她们的说法是一样的。</p>
<p>&nbsp;&nbsp;“呜。” 以及谁都无法反抗的小风。</p>
<p>……</p>
<p>&nbsp;&nbsp;虽然小风人又躺了下去，不过她却没办法再顺利入睡，因为“饥饿”的感觉在她被吵醒的那一个瞬间就充斥在了小风的身体里。</p>
<p>&nbsp;&nbsp;“云云~” 她试图呼喊着同居人的名字，但书屋内没有人回应，她又喊了几次，直到模糊空白的大脑慢慢地清醒了。</p>
<p>&nbsp;&nbsp;“对哦，今天云云回家去了。” </p>
<p>&nbsp;&nbsp;从被窝里钻出来的小风，身上单薄白色睡衣，呈现出一幅反季节的样子。哪怕天气再冷，小风的睡衣永远都会是短袖短裤，她也经常被云声吐槽：“诗诗是风的孩子所以不怕冷呢。” </p>
<p>&nbsp;&nbsp;这两人，小风怕热不怕冷，而云声却是怕冷不怕热。</p>
<p>&nbsp;&nbsp;简单洗漱之后，小风走进了厨房。冰箱里面有几个饭盒，是云声给她准备的，从中间随便拿出一盒丢进了微波炉里。睡意还没完成散去的，于是在盯着微波炉看的小风，耳边又响起了云云的声音。</p>
<p>&nbsp;&nbsp;“饭我给你做好了，别老是看书看到忘记吃饭啊。”</p>
<p>&nbsp;&nbsp;“嗯，好的。” 那时小风正沉迷于书本当中。</p>
<p>&nbsp;&nbsp;“好冷淡哦，不能多说两句吗？”</p>
<p>&nbsp;&nbsp;“我可真是幸福呢。” 目光依旧没有从书上移开。</p>
<p>&nbsp;&nbsp;“下次再那么敷衍就不给你做饭了。”</p>
<p>……</p>
<p>&nbsp;&nbsp;简单地吃完午饭之后，小风久违地感觉到了闲的滋味，在这安静的书店里。昨天晚上通宵看完了手头上的书，同居人不在，今天也不用开店。</p>
<p>&nbsp;&nbsp;“出门走走吧。”小风突然决定下来。</p>
<p>&nbsp;&nbsp;就算在店里穿得再怎么违反季节，但出门小风还是会好好穿衣服的。南方冬天的冷，是冷得不同寻常，要是遇到下雨天，甚至能够要人性命。因为这股寒冷，路上就更不可能会有多少闲逛的人了，偶尔能见到几个拿着大包小包行李的人，也都是有目的地地赶着路。</p>
<p>&nbsp;&nbsp;不知不觉今年就要结束了啊，小风漫步在街上感叹道。</p>
<p>&nbsp;&nbsp;目光中出现了一位老婆婆，她书店的熟客，也是附近商店街里一间古董店的店主。</p>
<p>&nbsp;&nbsp;此时她的手里也提着也大包小包的东西。</p>
<p>&nbsp;&nbsp;“要帮忙吗？” 小风连忙走了上去。</p>
<p>&nbsp;&nbsp;“这不是书店家的女儿吗，谢谢你啊。”老婆婆微笑着，任由小风接过她手中的袋子。</p>
<p>&nbsp;&nbsp;帮婆婆提着大包小包的小风，稍微瞄了一眼 “这是菜吗？”</p>
<p>&nbsp;&nbsp;“是啊，这个时间只有大超市还开着门了。”</p>
<p>&nbsp;&nbsp;“嗯。”</p>
<p>&nbsp;&nbsp;“孩子们要回来了，得好好做一餐才行。” 老婆婆走在前面。</p>
<p>&nbsp;&nbsp;“对了” 老婆婆突然说道。</p>
<p>&nbsp;&nbsp;“怎么了吗？” </p>
<p>&nbsp;&nbsp;“要来和我们一起吃饭吗？” </p>
<p>&nbsp;&nbsp;“欸……” 小风没有预想到这个邀请。</p>
<p>&nbsp;&nbsp;“很孤单吧，一个人。” 老婆婆接着说道。</p>
<p>&nbsp;&nbsp;小风没有回答，所以路上老婆婆又换了别的话题，不过除了预定书本的事情之外，基本上都是在一问一答，不知不觉就走到了目的地。</p>
<p>&nbsp;&nbsp;进屋前，老婆婆再一次问道。</p>
<p>&nbsp;&nbsp;“真的不和我们一起吃饭吗？”</p>
<p>&nbsp;&nbsp;小风摇了摇头。</p>
<p>&nbsp;&nbsp;“好吧。”老婆婆慈祥地微笑着望着小风，之后便转过身屋子走去</p>
<p>&nbsp;&nbsp;正当老婆婆要进门的时候，小风突然发出了声音。</p>
<p>&nbsp;&nbsp;“那个……我不是一个人……”</p>
<p>&nbsp;&nbsp;老婆婆又回过头来。</p>
<p>&nbsp;&nbsp;“那个经常跑到书店里找你玩的女孩子？”</p>
<p>&nbsp;&nbsp;“嗯，她是…我现在最重要的人。”</p>
<p>&nbsp;&nbsp;“那真是太好了。”</p>
<p>&nbsp;&nbsp;“所以，我不孤单……”</p>
<p>&nbsp;&nbsp;“哦，你等我一下。”</p>
<p>&nbsp;&nbsp;老婆婆走进屋内，但她再出来的时候，另外拿着一个塑料袋。</p>
<p>&nbsp;&nbsp;“给你的，我孙女可喜欢吃这个了，应该都会合你们这个年纪的女孩的胃口。”</p>
<p>&nbsp;&nbsp;小风接过袋子，里装着的是两个布丁。</p>
<p>&nbsp;&nbsp;“谢谢。” </p>
<p>……</p>
<p>&nbsp;&nbsp;再次和老婆婆告别之后，小风踏上了回家的路。</p>
<p>&nbsp;&nbsp;回想起自己刚刚鼓起勇气说的话语，小风的脸与耳朵微微泛红，不过也有可能是冻的。</p>
<p>&nbsp;&nbsp;就好像在和小风开玩笑一般，罪魁祸首此时却正好站在书屋的门口，那个熟悉的身影，那头熟悉的亚麻色波浪长发。双手拿着手机的云声，看起来相当着急。</p>
<p>&nbsp;&nbsp;“云云…？怎么了在这？” 小风稍微有点慌张。</p>
<p>&nbsp;&nbsp;只见云声望了过来，眼里还泛着些许泪光。</p>
<p>&nbsp;&nbsp;“你去哪里了啊？” </p>
<p>&nbsp;&nbsp;“散步，你钥匙呢？”</p>
<p>&nbsp;&nbsp;“忘记带了，你怎么不接电话？”</p>
<p>&nbsp;&nbsp;“啊……” 小风从兜里掏出手机，点亮屏幕后确实显示了未接来电，可能是刚刚帮婆婆拿东西的时候没听到吧。</p>
<p>&nbsp;&nbsp;“稍微发生了点事情，没听到。还有你不是回家了吗？”</p>
<p>&nbsp;&nbsp;“我还是舍不得留你孤单一个人。” 云声无奈地微笑着，注视小风的眼睛。</p>
<p>&nbsp;&nbsp;“我一个人，也没什么关系的……而且只是暂时而已。” 小风注意到这目光，微微地低下头。</p>
<p>&nbsp;&nbsp;“我爸爸妈妈说，一定要见见你。” 熟悉的声音静静地诉说着。</p>
<p>&nbsp;&nbsp;“嗯？”  因为惊讶，小风突然抬起了头。</p>
<p>&nbsp;&nbsp;“‘能让我们的女儿如此挂念的人，会是个怎样的孩子？’是这么说的。”</p>
<p>&nbsp;&nbsp;“……”</p>
<p>&nbsp;&nbsp;“说是让我一定要带回家看看。”</p>
<p>&nbsp;&nbsp;“……”</p>
<p>&nbsp;&nbsp;“所以先说好，后天跟我一起回家。”</p>
<p>&nbsp;&nbsp;“……好的。” 小风一边说着，一边微微地低下头，识图掩饰自己的害羞。</p>
<p>&nbsp;&nbsp;估计是没想到眼前人直率的样子，云声先是有点吃惊，随后笑出了声来。</p>
<p>&nbsp;&nbsp;“你笑什么啊？” 小风更加不好意思了。</p>
<p>&nbsp;&nbsp;“没什么。” 云声轻轻拂去眼角笑出来的泪水。</p>
<p>&nbsp;&nbsp;“别在这里冻着了，快进去吧。” </p>
<p>&nbsp;&nbsp;“对了，商店街的那个老婆婆你还记得吗？”</p>
<p>&nbsp;&nbsp;“那个卖古灵精怪东西的古董店的？”</p>
<p>&nbsp;&nbsp;“她给了两个布丁给我。” 小风提起手中白色的塑料袋。</p>
<p>&nbsp;&nbsp;“那么就作为饭后甜点吧，晚饭想吃什么？”</p>
<p>&nbsp;&nbsp;“嗯……那就……”</p>
<p>&nbsp;&nbsp;“等等等等，我也有想吃的，我们三二一一起说”</p>
<p>&nbsp;&nbsp;“三”</p>
<p>&nbsp;&nbsp;“二”</p>
<p>&nbsp;&nbsp;“一”</p>
<p>&nbsp;&nbsp;“火锅！” 两人同时做出了回答。</p>
]]></content>
      <categories>
        <category>novel</category>
      </categories>
      <tags>
        <tag>小说</tag>
        <tag>角落里的魔女</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot相关笔记</title>
    <url>/2021/12/06/note/SpringBoot%E7%9B%B8%E5%85%B3/</url>
    <content><![CDATA[<h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><ul>
<li><a href="https://snailclimb.gitee.io/springboot-guide/#/">https://snailclimb.gitee.io/springboot-guide/#/</a></li>
<li><a href="http://www.imooc.com/wiki/springbootlesson">http://www.imooc.com/wiki/springbootlesson</a></li>
</ul>
<h1 id="关于Spring-Boot"><a href="#关于Spring-Boot" class="headerlink" title="关于Spring Boot"></a>关于Spring Boot</h1><p><br></br></p>
<h2 id="Spring-Boot-官方介绍"><a href="#Spring-Boot-官方介绍" class="headerlink" title="Spring Boot 官方介绍"></a>Spring Boot 官方介绍</h2><p>原文：Spring Boot makes it easy to create stand-alone, production-grade Spring based Applications that you can “just run”…Most Spring Boot applications need very little Spring configuration.</p>
<p>翻译：<code>Spring Boot</code> 可以轻松创建独立的生产级基于 <code>Spring</code> 的应用程序,只要通过 “just run”（可能是 run ‘Application’或 java -jar 或 tomcat 或 maven 插件 run 或 shell 脚本）便可以运行项目…大部分 Spring Boot 项目只需要少量的配置即可</p>
<!-- read more -->

<p>所以其实<code>Spring Boot</code>就是<code>Spring</code>, 它做了那些没有它你自己也会去做的<code>Spring Bean</code>配置</p>
<p><br></br></p>
<h2 id="Spring-Boot-的主要优点"><a href="#Spring-Boot-的主要优点" class="headerlink" title="Spring Boot 的主要优点"></a>Spring Boot 的主要优点</h2><ol>
<li>开发基于 Spring 的应用程序很容易。</li>
<li>Spring Boot 项目所需的开发或工程时间明显减少，通常会提高整体生产力。</li>
<li>Spring Boot 不需要编写大量样板代码、XML 配置和注释。</li>
<li>Spring 引导应用程序可以很容易地与 Spring 生态系统集成，如 Spring JDBC、Spring ORM、Spring Data、Spring Security 等。</li>
<li>Spring Boot 遵循“固执己见的默认配置”，以减少开发工作（默认配置可以修改）。</li>
<li>Spring Boot 应用程序提供嵌入式 HTTP 服务器，如 Tomcat 和 Jetty，可以轻松地开发和测试 web 应用程序。（这点很赞！普通运行 Java 程序的方式就能运行基于 Spring Boot web 项目，省事很多）</li>
<li>Spring Boot 提供命令行接口(CLI)工具，用于开发和测试 Spring Boot 应用程序，如 Java 或 Groovy。</li>
<li>Spring Boot 提供了多种插件，可以使用内置工具(如 Maven 和 Gradle)开发和测试 Spring Boot 应用程序。</li>
</ol>
]]></content>
      <categories>
        <category>note</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>note</tag>
        <tag>blog</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring相关笔记</title>
    <url>/2021/12/06/note/Spring%E7%9B%B8%E5%85%B3/</url>
    <content><![CDATA[<h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><ul>
<li><a href="https://snailclimb.gitee.io/javaguide/#/docs/system-design/framework/spring/Spring%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93">https://snailclimb.gitee.io/javaguide/#/docs/system-design/framework/spring/Spring%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93</a></li>
</ul>
<p><br></br></p>
<h1 id="关于Spring"><a href="#关于Spring" class="headerlink" title="关于Spring"></a>关于Spring</h1><p><br></br></p>
<h2 id="什么是Spring框架？"><a href="#什么是Spring框架？" class="headerlink" title="什么是Spring框架？"></a>什么是Spring框架？</h2><p><code>Spring</code>是一款开源的轻量级java开发框架，旨在提高开发人员的开发效率以及系统的可维护性。<br><code>Spring</code>框架一般指的是<code>Spring Framework</code>，使用这些模块的集合可以方便协助我们进行开发。<br>Spring的组件代码是轻量级的，但它的配置却是重量级的。  </p>
<p>题外话：<code>Spring（春天）</code>，可见其目标和使命就是为java程序员带来春天！</p>
<!-- read more -->

<br>

<p><img src="https://makiori.oss-cn-beijing.aliyuncs.com/spring/1.png?versionId=CAEQGxiBgICYwf217BciIDRjOTk1NmQ4OThlZDQyMzdiMzMwOTE2NzllZDJlYzVj" alt="Spring的体系结构"></p>
<ol>
<li>左上角是负责持久层的部分，是Spring对数据持久化，事务管理，支持的功能框架。例如：SpringDataJpa。</li>
<li>右上角是负责表现层的部分， 是Spring对表现出层数据的处理部分的支持。例如：SpringMVC。</li>
<li>中间的两部分就是大家俗称的Spring框架。</li>
<li>最底层的部分负责测试，是Spring对于项目的测试，提供了完整的一个测试环境支持。</li>
</ol>
<br>

<p><code>Spring</code>提供的核心功能主要是<code>loC</code>和<code>AOP</code>。</p>
<br>

<h3 id="Ioc（Inverse-of-Control）"><a href="#Ioc（Inverse-of-Control）" class="headerlink" title="Ioc（Inverse of Control）"></a>Ioc（Inverse of Control）</h3><p><code>控制反转/反转控制</code>是一种设计思想，而不是一个具体的技术实现。<br>loC的思想就是将原本在程序中手动创建对象的控制权，交由Spring框架来管理。<br>loC并非Spring特有，在其他语言中也有应用。</p>
<p>例如：现有类A依赖于类B</p>
<ul>
<li>传统的开发方式：往往是在类A中动手通过new关键字来new一个B的对象出来</li>
<li>使用Ioc思想的开发方式：不通过new关键字来创建对象，而是通过Ioc容器（Spring框架）来帮助我们实例化对象。需要哪个对象，直接从Ioc容器里面过去接口。</li>
</ul>
<p>坏处：丧失了一个权力（创建、管理对象的权力）<br>好处：不用再考虑对象的创建，管理等一系列的事情</p>
<h4 id="为什么叫控制反转？"><a href="#为什么叫控制反转？" class="headerlink" title="为什么叫控制反转？"></a>为什么叫控制反转？</h4><ul>
<li>控制：指的是对象创建（实例化、管理）的权力</li>
<li>反转：控制权交给外部环境（Spring框架、loC容器）</li>
</ul>
<p>将对象之间的相互依赖关系交给loC容器来管理，并由loC容器完成对象的注入。可以很大程度上简化应用的开发，把应用从复杂的依赖关系中解放出来。loC容器就如同一个工厂，当需要创建对象时，只需要配置好配置文件/注解即可，完全不用考虑对象是如何被创建出来的。</p>
<h4 id="Ioc解决了什么问题"><a href="#Ioc解决了什么问题" class="headerlink" title="Ioc解决了什么问题"></a>Ioc解决了什么问题</h4><p>Ioc的思想就是两方之间不互相依赖，由第三方容器来管理相关资源，好处是什么呢？</p>
<ol>
<li>对象之间的耦合度或者说依赖程度降低</li>
<li>资源变得容易管理；比如说用Spring容器提供的话很容易就可以实现一个单例。</li>
</ol>
<br>

<h3 id="DI（Dependency-Injection）"><a href="#DI（Dependency-Injection）" class="headerlink" title="DI（Dependency Injection）"></a>DI（Dependency Injection）</h3><p><code>依赖注入</code> 首先理解依赖，程序运行的需要可以称之为依赖。由于<code>Spring框架</code>通过反射技术实例化了对象，并将对象的实例存入在容器进行管理。那么如果一个类中的属性为某个其余的类，属性无需手动赋值，通过Spring的配置文件，或者Spring提供的注解，通过Spring框架可以实现直接注入属性。</p>
<br>

<h3 id="AOP（Aspect-Oriented-Programming）"><a href="#AOP（Aspect-Oriented-Programming）" class="headerlink" title="AOP（Aspect-Oriented Programming）"></a>AOP（Aspect-Oriented Programming）</h3><p>AOP是OOP的一种延续。<br><code>面向切面编程</code>能够将那些与业务无关，却为业务模块共同调用的逻辑或责任（例如事务处理、日志管理、权限控制等）封装起来，便于减少系统的重复代码，降低模块间的耦合度，并有利于未来的可拓展性和可维护性。</p>
<br>

<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p><code>Spring</code>是分层的<code>Java SE/EE应用</code> 轻量级开源框架，以<code>IoC</code>和<code>AOP</code>为内核，提供了展示层<code>Spring MVC</code>和持久层<code>Spring JDBC</code>以及业务层事务管理等众多的企业级应用技术，还能整合开源世界众多著名的第三方框架和类库，是使用最多的<code>Java EE</code>企业应用开源框架。使用<code>Spring</code>能对<code>bean</code>对象的实例管理更加方便，代码编写更加优雅，降低代码的耦合性，提升代码的扩展性。</p>
<br>

<h2 id="Spring的优势"><a href="#Spring的优势" class="headerlink" title="Spring的优势"></a>Spring的优势</h2><ul>
<li>Spring简化项目开发：Spring灵活全面的扩展功能，使我们开发项目如鱼得水。通过Spring提供的Ioc容器，可以将对象间的依赖关系交由Spring进行控制，避免硬编码所造成的过度程序耦合。用户也不必再未单例模式类，属性文件解析等这些很多底层的需求编写代码，可以更专注于上层的应用</li>
<li>Spring的面向切面编程：Spring框架的AOP面向切面编程，极大地提高了程序的扩展性，支持开发人员实现对程序的自定义增强。同时可以方便地使用Spring提供的事务管理</li>
<li>面向接口编程： 面向接口编程 降低代码的耦合性，同时也提高了代码的扩展性</li>
<li>测试方便： 对于测试的支持 有很多的组件实现</li>
<li>方便集成第三方框架Spring可以降低各种框架的使用难度，提供了对各种优秀框架（Struts，Hibernate，Hessian，Quartz等）的直接支持。</li>
</ul>
<p><br></br></p>
<h1 id="关于Spring-bean"><a href="#关于Spring-bean" class="headerlink" title="关于Spring bean"></a>关于Spring bean</h1><h2 id="什么是bean？"><a href="#什么是bean？" class="headerlink" title="什么是bean？"></a>什么是bean？</h2><p>bean代指的就是那些被loC容器所管理的对象。<br>我们需要告诉loC容器帮助我们管理哪些对象，这个是通过配置元数据来定义的。配置元数据可以是XML文件、注解或者java配置类。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Constructor-arg with &#x27;value&#x27; attribute --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;...&quot;</span> <span class="attr">class</span>=<span class="string">&quot;...&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;...&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>org.springframework.beans</code>和<code>org.springframework.context</code>是Ioc实现的基础，未来如有兴趣，可以自行研究。</p>
<br>

<h2 id="bean的作用域"><a href="#bean的作用域" class="headerlink" title="bean的作用域"></a>bean的作用域</h2><p><code>Spring</code>中<code>bean</code>的作用域通常有下面几种：</p>
<ul>
<li><code>singleton</code>：唯一<code>bean</code>实例，<code>Spring</code>中的<code>bean</code>默认都是单例的，对单例设计模式的应用。</li>
<li><code>prototype</code>：每次请求都会创建一个新的<code>bean</code>实例</li>
<li><code>request</code>： 每一次<code>HTTP</code>请求都会产生一个新的<code>bean</code>，该<code>bean</code>仅在当前<code>HTTP request</code>内有效。</li>
<li><code>session</code>：每一次来自新<code>session</code>的<code>HTTP</code>请求都会产生一个新的<code>bean</code>，该<code>bean</code>仅在当前<code>HTTP session</code>内有效。</li>
<li><code>golobal-session</code>：全局<code>session</code>作用域，仅仅在基于<code>portlet</code>的wed应用中才有意义，<code>Spring5</code>已经没有了。<code>Portlet</code> 是能够生成语义代码(例如：HTML)片段的小型 <code>Java Web</code> 插件。它们基于 <code>portlet</code> 容器，可以像 <code>servlet</code> 一样处理 HTTP 请求。但是，与 <code>servlet</code> 不同，每个 <code>portlet</code> 都有不同的会话。</li>
</ul>
<br>

<h2 id="如何配置bean的作用域"><a href="#如何配置bean的作用域" class="headerlink" title="如何配置bean的作用域"></a>如何配置bean的作用域</h2><p>xml方式：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;...&quot;</span> <span class="attr">class</span>=<span class="string">&quot;...&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;singleton&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注解方式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@Scope(value = ConfigurableBeanFactory.SCOPE_PROTOTYPE)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Person <span class="title">personPrototype</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Person();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h2 id="单例bean的线程安全问题"><a href="#单例bean的线程安全问题" class="headerlink" title="单例bean的线程安全问题"></a>单例bean的线程安全问题</h2><p>单例bean存在线程问题，主要是因为当多个线程操作同一个对象的时候是存在资源竞争的。</p>
<p>解决方法：</p>
<ol>
<li>在bean中尽量避免定义可变的成员变量。</li>
<li>在类中定义一个<code>ThreadLocal</code>成员变量，将需要的可变的成员变量保存在<code>ThreadLocal</code>中。</li>
</ol>
<h2 id="Component-和-Bean的区别"><a href="#Component-和-Bean的区别" class="headerlink" title="@Component 和 @Bean的区别"></a>@Component 和 @Bean的区别</h2><ol>
<li><code>@Component</code>注解作用于类，而<code>@Bean</code>注解用于方法</li>
<li><code>@Component</code>通常是通过类路径扫描来自动侦测以及自动装配到Spring容器中 （我们可以使用<code>@Component</code>注解定义要扫描的路径从中找出标识了需要装配的类自动装配到Spring的bean容器中）。<code>@Bean</code>注解通常是我们在标有该注解的方法中定义产生这个bean，<code>@Bean</code>告诉了Spring这是某个类的实例，当我需要用它的时候还给我。</li>
<li><code>@bean</code>注解比<code>@Component</code>注解的自定义性更强，而且很多地方我们只能通过<code>@Bean</code>注解来注册bean。比如当我们引用第三方库的类需要装配到Spring容器，则只能通过<code>@Bean</code>来实现。 </li>
</ol>
<p><br></br></p>
<h1 id="关于Spring-MVC"><a href="#关于Spring-MVC" class="headerlink" title="关于Spring MVC"></a>关于Spring MVC</h1><p>MVC 是模型(Model)、视图(View)、控制器(Controller)的简写，其核心思想是通过将业务逻辑、数据、显示分离来组织代码。要想真正理解Spring MVC，得想从Model 1 和 Model 2这两个没有Spring MVC的时代讲起。</p>
<h2 id="Model-1-时代"><a href="#Model-1-时代" class="headerlink" title="Model 1 时代"></a>Model 1 时代</h2><p>在Model1 模式下，整个Web应用几乎全部用JSP页面组成，只用少量的JavaBean来处理数据库连接、访问等操作。这个模式下JSP即是控制层（Controller）又是表现层（View）, 这很明显会存在很多问题，比如控制逻辑和表现逻辑混杂在一起，导致代码重用率极低；再比如前端和后端相互依赖，难以进行测试维护并且开发效率极低。</p>
<p><img src="https://makiori.oss-cn-beijing.aliyuncs.com/spring/mvc-mode1.png?versionId=CAEQGxiBgMC9qLm27BciIDI4NjBmYTg1MWM4MjQxMjk5ZWQ2NzA5YjE3ZTBiZjY0" alt="Model 1"></p>
<h2 id="Model-2-时代"><a href="#Model-2-时代" class="headerlink" title="Model 2 时代"></a>Model 2 时代</h2><p>Java Bean(Model) + JSP(View) + Servlet (Controller)，这种开发模式就是早期的JavaWeb MVC 开发模式。</p>
<ul>
<li>Model: 系统涉及的数据，也就是dao和bean。</li>
<li>View：展示模型中的数据，只是用来展示。</li>
<li>Controller：处理用户请求都发送给Java Bean，返回数据给JSP并展示给用户。</li>
</ul>
<p><img src="https://makiori.oss-cn-beijing.aliyuncs.com/spring/mvc-model2.png?versionId=CAEQGxiBgIDRqLm27BciIGQwMWQ3ZThiMTIwYTRhOWZiZGQ1NjVmOGQ2OTUxNGY5" alt="Model 2"></p>
<p>Model2模式下还存在很多问题，Model2的抽象和封装程度还远远不够，使用Model2进行开发时不可避免地会重复造轮子，这就大大降低了程序的可维护性和复用性。</p>
<h2 id="Spring-MVC-时代"><a href="#Spring-MVC-时代" class="headerlink" title="Spring MVC 时代"></a>Spring MVC 时代</h2><p>Spring MVC 是当前最优秀的MVC框架。可以帮助我们进行更简洁的Web层的开发，并且它天生与Spring框架集成。Spring MVC 下我们一般把后端项目分为Service层（处理业务）、Dao层（数据库操作）、Entity层(实体层)、 Controller层（控制层，返回数据给前台页面）。</p>
<h2 id="Spring-MVC-工作原理"><a href="#Spring-MVC-工作原理" class="headerlink" title="Spring MVC 工作原理"></a>Spring MVC 工作原理</h2><p><img src="https://makiori.oss-cn-beijing.aliyuncs.com/spring/test.png?versionId=CAEQGxiBgMD43tG27BciIDVmMzRmMjVlOTE4MDRhMmI4ZTZkZjM3MmFiZjljY2M1" alt="Spring MVC工作流程"></p>
<p>流程说明：</p>
<ol>
<li>客户端（浏览器）发送请求，直接请求到 <code>DispatcherServlet</code>。</li>
<li><code>DispatcherServlet</code> 根据请求信息调用 <code>HandlerMapping</code>, 解析请求对应的 <code>Handler</code>。</li>
<li>解析到对应的 <code>Handler</code> （<code>Controller</code>）后，开始由 <code>HandlerAdapter</code> 适配器处理。</li>
<li><code>HandlerAdapter</code> 会根据 <code>Handler</code> 来调用真正的处理器开处理请求， 并处理相应的业务逻辑。</li>
<li>处理器处理完业务后，会返回一个 <code>ModelAndView</code> 对象，<code>Model</code>是返回的数据对象，<code>View</code> 是个逻辑上的 <code>View</code>。</li>
<li><code>ViewResolver</code> 会根据逻辑 <code>View</code> 查找实际的 <code>view</code>。</li>
<li><code>DispatcherServlet</code> 把返回的<code>Model</code>传给<code>View</code>（视图渲染）。</li>
<li>把<code>View</code> 返回给请求者（浏览器）。</li>
</ol>
<p><br></br></p>
]]></content>
      <categories>
        <category>note</category>
      </categories>
      <tags>
        <tag>note</tag>
        <tag>blog</tag>
        <tag>java</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Go Web开发(Gin框架)</title>
    <url>/2021/10/26/note/GoWeb%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<h1 id="写在开头"><a href="#写在开头" class="headerlink" title="写在开头"></a>写在开头</h1><p>这篇博客即属于博客也属于笔记，内容大部分来自于go编程课老师的Go Web开发(Gin 框架)简易入门教程。<br>本人做一些笔记整理成这篇博客。</p>
<h1 id="net-http标准库"><a href="#net-http标准库" class="headerlink" title="net/http标准库"></a>net/http标准库</h1><p>Go语言内置的net/http包，为我们提供了基础的路由函数组合和丰富的功能函数。<br>只是需要简单的API编写，net/http就完全足够了。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;log&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">//该方法接收一个路由匹配的字符串，以及一个func（ResponseWriter，*Request）类型的函数</span></span><br><span class="line">	http.HandleFunc(<span class="string">&quot;/&quot;</span>, handler)</span><br><span class="line">	log.Fatal(http.ListenAndServe(<span class="string">&quot;:8000&quot;</span>, <span class="literal">nil</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handler</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">	fmt.Fprintf(w, <span class="string">&quot;URL.Path = %q\n&quot;</span>, r.URL.Path)</span><br><span class="line">	fmt.Fprintf(w, <span class="string">&quot;helloworld&quot;</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//func HandleFunc(pattern string, handler func(ResponseWriter, *Request))</span></span><br><span class="line"><span class="comment">//注册默认路由，第一个参数指的是请求路径，第二个参数是一个函数类型，表示这个请求需要处理的事情。</span></span><br></pre></td></tr></table></figure>

<h2 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h2><h1 id="gin框架"><a href="#gin框架" class="headerlink" title="gin框架"></a>gin框架</h1><p>Gin是一个用Go（Golang）编写的HTTP web框架。它是一个类似于martini但拥有更好性能的API框架，由于httprouter，速度提高了近40倍。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	r := gin.Default()</span><br><span class="line">	r.GET(<span class="string">&quot;/ping&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		c.JSON(<span class="number">200</span>, gin.H&#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;pong&quot;</span>&#125;)</span><br><span class="line">	&#125;)</span><br><span class="line">	r.Run()</span><br><span class="line">    <span class="comment">//默认监听本地8080端口，如需更改写法为r.Run(&quot;:9000&quot;)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><h2 id="输出渲染格式"><a href="#输出渲染格式" class="headerlink" title="输出渲染格式"></a>输出渲染格式</h2><p>gin可以很方便的渲染输出数据的格式</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	r := gin.Default()</span><br><span class="line">	r.GET(<span class="string">&quot;/someString&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		<span class="comment">//渲染成String</span></span><br><span class="line">		c.String(http.StatusOK, <span class="string">&quot;string&quot;</span>)</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">	r.GET(<span class="string">&quot;/someJSON&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		<span class="comment">//渲染成JSON</span></span><br><span class="line">		c.JSON(http.StatusOK, gin.H&#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;hey&quot;</span>, <span class="string">&quot;status&quot;</span>: http.StatusOK&#125;)</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">	r.GET(<span class="string">&quot;/moreJSON&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		<span class="keyword">var</span> msg <span class="keyword">struct</span> &#123;</span><br><span class="line">			Name    <span class="keyword">string</span> <span class="string">`json:&quot;user&quot;`</span></span><br><span class="line">			Message <span class="keyword">string</span></span><br><span class="line">			Number  <span class="keyword">int</span></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		msg.Name = <span class="string">&quot;Lena&quot;</span></span><br><span class="line">		msg.Message = <span class="string">&quot;hey&quot;</span></span><br><span class="line">		msg.Number = <span class="number">123</span></span><br><span class="line">		<span class="comment">//渲染成JSON</span></span><br><span class="line">		c.JSON(http.StatusOK, msg)</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">	r.GET(<span class="string">&quot;/someXML&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		<span class="comment">//渲染成XML</span></span><br><span class="line">		c.XML(http.StatusOK, gin.H&#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;Hey&quot;</span>, <span class="string">&quot;status&quot;</span>: http.StatusOK&#125;)</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">	r.GET(<span class="string">&quot;/someYAML&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		<span class="comment">//YAML是“YAML Ain&#x27;t a Markup Language的缩写，中文名为：另一种标记语言”</span></span><br><span class="line">		<span class="comment">//是一个可读性高，用来表达数据序列化的格式。</span></span><br><span class="line">		c.YAML(http.StatusOK, gin.H&#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;Hey&quot;</span>, <span class="string">&quot;status&quot;</span>: http.StatusOK&#125;)</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">	r.Run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">r := gin.Default()</span><br></pre></td></tr></table></figure>
<p><code>Default</code>函数会默认绑定准备好的中间件，<code>Logger</code>和<code>Recovery</code>，它们分别帮助我们打印日志输出和painc处理</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Default</span><span class="params">()</span> *<span class="title">Engine</span></span> &#123;</span><br><span class="line">    debugPrintWARNINGDefault()</span><br><span class="line">    engine := New()</span><br><span class="line">    engine.Use(Logger(), Recovery())</span><br><span class="line">    <span class="keyword">return</span> engine</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>从中可以看出，Gin的中间件是通过Use方法设置的，它接收一个可变参数，所以我们同时可以设置多个中间件。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span><span class="params">(engine *Engine)</span> <span class="title">Use</span><span class="params">(middleware ...HandlerFunc)</span> <span class="title">IRoutes</span></span> &#123;</span><br><span class="line">    engine.RouterGroup.Use(middleware...)</span><br><span class="line">    engine.rebuild404Handlers()</span><br><span class="line">    engine.rebuild405Handlers()</span><br><span class="line">    <span class="keyword">return</span> engine</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>而一个Gin的中间件，其实就是Gin定义的一个<code>HandlerFunc</code></p>
<p>现在来自定义一个自己的中间件。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	r := gin.Default()</span><br><span class="line">	r.Use(requestTime())</span><br><span class="line">	r.GET(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;I&#x27;m here, hello&quot;</span>)</span><br><span class="line">		c.String(<span class="number">200</span>, <span class="string">&quot;hello&quot;</span>)</span><br><span class="line">	&#125;)</span><br><span class="line">	r.Run(<span class="string">&quot;:8888&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">requestTime</span><span class="params">()</span> <span class="title">gin</span>.<span class="title">HandlerFunc</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		start := time.Now()</span><br><span class="line">		fmt.Println(<span class="string">&quot;这里被我拦截住了&quot;</span>)</span><br><span class="line">		fmt.Println(<span class="string">&quot;因为调用了c.Next() 我现在要走了&quot;</span>)</span><br><span class="line">		c.Next()</span><br><span class="line">		fmt.Println(<span class="string">&quot;我又回来了&quot;</span>)</span><br><span class="line">		fmt.Println(time.Since(start))</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="c-Next"><a href="#c-Next" class="headerlink" title="c.Next()"></a>c.Next()</h3><p>立即执行下一个HandlerFunc，完后跳转回来继续执行c.Next()接下去的代码</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	r := gin.New()</span><br><span class="line">	r.Use(mymiddleware())</span><br><span class="line">	r.Use(mymiddleware2())</span><br><span class="line">	r.GET(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;test in&quot;</span>)</span><br><span class="line">		c.String(<span class="number">200</span>, <span class="string">&quot;自我定义中间件测试成功&quot;</span>)</span><br><span class="line"></span><br><span class="line">		fmt.Println(<span class="string">&quot;test out&quot;</span>)</span><br><span class="line"></span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">	r.Run()</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mymiddleware</span><span class="params">()</span> <span class="title">gin</span>.<span class="title">HandlerFunc</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;mml 1 in&quot;</span>)</span><br><span class="line">		<span class="comment">//调用后续的处理函数</span></span><br><span class="line">		<span class="comment">//c.Next()</span></span><br><span class="line">		fmt.Println(<span class="string">&quot;mml 1 out&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mymiddleware2</span><span class="params">()</span> <span class="title">gin</span>.<span class="title">HandlerFunc</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;mml 2 in&quot;</span>)</span><br><span class="line">		c.Next()</span><br><span class="line">		fmt.Println(<span class="string">&quot;mml 2 out&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://makiori.oss-cn-beijing.aliyuncs.com/%E7%AC%94%E8%AE%B0/GoWeb/Gin%E4%B8%AD%E9%97%B4%E4%BB%B6%E4%BB%8Ec.Next3.png?versionId=CAEQGxiBgMD36q_v5RciIGU2OWFkYTFhOTBjNTRlNDRiMDRiYjI0MTE3N2Q5MDg4" alt="输出结果"></p>
<p><img src="https://makiori.oss-cn-beijing.aliyuncs.com/%E7%AC%94%E8%AE%B0/GoWeb/Gin%E4%B8%AD%E9%97%B4%E4%BB%B6%E4%BB%8Ec.Next1.png?versionId=CAEQGxiBgMCY66_v5RciIGZhZDhiNTRmY2E0ZjRkYjg5YWM3M2U4YmI1NDA3YzI0" alt="c.Next()相关1"></p>
<p><img src="https://makiori.oss-cn-beijing.aliyuncs.com/%E7%AC%94%E8%AE%B0/GoWeb/Gin%E4%B8%AD%E9%97%B4%E4%BB%B6%E4%BB%8Ec.Next2.png?versionId=CAEQGxiBgICp66_v5RciIDRhOWJkMjM1YjhlMTQ4ODA4NzUxODdmZDJkZjFkMjY1" alt="c.Next()相关2"></p>
<h3 id="c-Abort"><a href="#c-Abort" class="headerlink" title="c.Abort()"></a>c.Abort()</h3><p>阻断执行下一个HandlerFunc，仅会执行接下去的代码，常用于权限控制拦截操作。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	r := gin.Default()</span><br><span class="line">	r.Use(authority())</span><br><span class="line">	<span class="comment">//如果post请求中为admin，调用c.Next()方法，执行后续的处理函数</span></span><br><span class="line">	<span class="comment">//否则调用c.Abort()方法2，阻止执行后续的处理函数，并执行中间件中的拦截方法</span></span><br><span class="line">	r.GET(<span class="string">&quot;/path/:name&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;欢迎&quot;</span>)</span><br><span class="line">		c.String(http.StatusOK, <span class="string">&quot;Hello %s&quot;</span>, c.Param(<span class="string">&quot;name&quot;</span>))</span><br><span class="line">	&#125;)</span><br><span class="line">	r.Run(<span class="string">&quot;:8090&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">authority</span><span class="params">()</span> <span class="title">gin</span>.<span class="title">HandlerFunc</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		isAdmain := c.Param(<span class="string">&quot;name&quot;</span>) == <span class="string">&quot;admin&quot;</span></span><br><span class="line">		<span class="keyword">if</span> isAdmain &#123;</span><br><span class="line">			<span class="comment">//执行后续的处理函数</span></span><br><span class="line">			c.Next()</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="comment">//阻止执行后续的处理函数</span></span><br><span class="line">			c.Abort()</span><br><span class="line">			c.String(http.StatusOK, <span class="string">&quot;sorry, you cann&#x27;t in&quot;</span>)</span><br><span class="line">		&#125;</span><br><span class="line">		fmt.Println(<span class="string">&quot;end&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="c-Set-key-value-和-c-Get-key"><a href="#c-Set-key-value-和-c-Get-key" class="headerlink" title="c.Set(key, value) 和 c.Get(key)"></a>c.Set(key, value) 和 c.Get(key)</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	r := gin.Default()</span><br><span class="line">	r.Use(authority2())</span><br><span class="line">	r.GET(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		value, ok := c.Get(<span class="string">&quot;key&quot;</span>)</span><br><span class="line">		<span class="keyword">if</span> ok &#123;</span><br><span class="line">			fmt.Println(value)</span><br><span class="line">		&#125;</span><br><span class="line">		c.String(http.StatusOK, <span class="string">&quot;hello&quot;</span>)</span><br><span class="line">	&#125;)</span><br><span class="line">	r.Run(<span class="string">&quot;:8099&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">authority2</span><span class="params">()</span> <span class="title">gin</span>.<span class="title">HandlerFunc</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		c.Set(<span class="string">&quot;key&quot;</span>, <span class="string">&quot;你好&quot;</span>)</span><br><span class="line">		c.Next()</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>note</category>
      </categories>
      <tags>
        <tag>note</tag>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title>HotSpot虚拟机对像探秘</title>
    <url>/2021/10/08/note/HotSpot%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AF%B9%E5%83%8F%E6%8E%A2%E7%A7%98/</url>
    <content><![CDATA[<h1 id="对像的创建"><a href="#对像的创建" class="headerlink" title="对像的创建"></a>对像的创建</h1><ol>
<li>类的加载检查</li>
<li>分配内存</li>
<li>初始化零值</li>
<li>设置对象头</li>
<li>执行init方法</li>
</ol>
<h2 id="类的加载检查"><a href="#类的加载检查" class="headerlink" title="类的加载检查"></a>类的加载检查</h2><p>虚拟机遇到一条new指令时，首先将去检查这个指令的参数是否能在常量池中定位到这个类的符号引用，并且检查这个符号引用代表的类是否已经被加载过，解析和初始化过。如果没有，那必须先执行相应的类加载过程。</p>
<h2 id="分配内存"><a href="#分配内存" class="headerlink" title="分配内存"></a>分配内存</h2><p>在类的加载检查通过后，接下来虚拟机将为新生对象分配内存。对象所需的内存大小在类加载完成后便可确定，为对象分配空间的任务，等同于把一个块确定大小的内存从Java堆中划分出来。分配方式有“指针碰撞”和“空闲列表”两种，选择哪种分配方式由Java堆是否规整决定，而Java堆是否规整又由所采用的垃圾收集器是否带有压缩整理功能决定。</p>
<h3 id="内存分配的两种方法"><a href="#内存分配的两种方法" class="headerlink" title="内存分配的两种方法"></a>内存分配的两种方法</h3><ol>
<li><p>指针碰撞<br>适用场景：堆内存规整（即没有内存碎片）的情况下。<br>原理：用过的内存全部整合到一边，没有用过的内存放在另一半，中间有一个分界值指针，只需要向着没用过的内存方向将该指针移动对象内存大小位置即可。<br>GC收集器：Serial、ParNew</p>
</li>
<li><p>空闲列表<br>适用场景：堆内存不规整的情况下。<br>原理：虚拟机会维护一个列表，该列表会记录哪些内存块是可用的，在分配的时候，找一块足够大的内存块来划分给对象实例，最后更新列表记录。<br>GC收集器：CMS</p>
</li>
</ol>
<h3 id="内存分配并发问题"><a href="#内存分配并发问题" class="headerlink" title="内存分配并发问题"></a>内存分配并发问题</h3><p>在创建对象的时候有一个很重要的问题，就是线程安全，因为在实际开发过程中，创建对象是频繁的事情，作为虚拟机来说，必须要保证线程是安全的，通常来讲，虚拟机采用两种方式来保证线程安全：</p>
<ul>
<li>CAS + 失败重试：CAS是乐观锁的一种实现方式。所谓乐观锁就是，每次不加锁而是假设没有冲突而去完成某项操作，如果因为冲突失败就重试，直到成功为止。虚拟机采用CAS配上失败重试的方法保证更新操作的原子性。</li>
<li>TLAB：为每一个线程预先在Eden区分配一块儿内存，JVM在给线程中的对象分配内存时，首先在TLAB分配，当对象大于TLAB中的剩余内存或TLAB的内存已用尽时，再采用上述的CAS进行内存分配。</li>
</ul>
<h2 id="初始化零值"><a href="#初始化零值" class="headerlink" title="初始化零值"></a>初始化零值</h2><p>内存分配完成后，虚拟机需要将分配到的内存空间都初始化为零值（不包括对象头），这一步操作保证了对象的实例字段在Java代码中可以不赋初始值就直接使用，程序能访问到这些字段的数据类型所对应的零值。</p>
<h2 id="设置对象头"><a href="#设置对象头" class="headerlink" title="设置对象头"></a>设置对象头</h2><p>初始化零值完成之后，虚拟机要对对象进行必要的设置，例如这个对象是哪个类的实例，如何才能找到类的元数据信息、对象的哈希码、对象的GC分代年龄等信息。这些信息存放在对象头中。另外，根据虚拟机当前运行状态的不同，如是否启用偏向锁等，对象头会有不同的设置方式。</p>
<h2 id="执行init方法"><a href="#执行init方法" class="headerlink" title="执行init方法"></a>执行init方法</h2><p>在上面工作都完成之后，从虚拟机的视角来看，一个新的对象已经产生了，但从Java程序的视角来看，对象创建才刚开始，<br><code>&lt;init&gt;</code>方法还没有执行，所有的字段都还为零。所有一般来说，执行new指令之后会接着执行<code>&lt;init&gt;</code>方法，把对象按照程序员的意愿进行初始化，这样一个真正可用的对象才算是完全产生出来。</p>
<h1 id="对象的内存布局"><a href="#对象的内存布局" class="headerlink" title="对象的内存布局"></a>对象的内存布局</h1><p>对象在堆内存中的存储布局可以划分为三个部分：</p>
<ol>
<li>对象头</li>
<li>实例数据</li>
<li>对齐填充</li>
</ol>
<h2 id="对象头（Header）"><a href="#对象头（Header）" class="headerlink" title="对象头（Header）"></a>对象头（Header）</h2><p>Hotspot虚拟机的对象头包括两部分信息：  </p>
<ol>
<li>用于存储对象自身的运行时数据（哈希码，GC分代年龄、锁状态标志等等）</li>
<li>类型指针，即对象指向它的类型元数据的指针，Java虚拟机通过这个指针来确定该对象是哪个类的实例。</li>
</ol>
<h2 id="实例数据（Instance-Data）"><a href="#实例数据（Instance-Data）" class="headerlink" title="实例数据（Instance Data）"></a>实例数据（Instance Data）</h2><p>实例数据是对象真正存储的有效信息，也是在程序中所定义的各种类型的字段内容。</p>
<h2 id="对齐填充（Padding）"><a href="#对齐填充（Padding）" class="headerlink" title="对齐填充（Padding）"></a>对齐填充（Padding）</h2><p>对齐填充不是必然存在的，也没有什么特别的含义，仅仅起到占位的作用。因为HotSpot虚拟机的自动内存管理系统要求对象起始地址必须是8字节的整数 倍，换句话说就是对象的大小必须是8字节的整数倍。而对象头部分正好是8字节的倍数（1倍或2倍），因此，当对象实例数据部分没有对齐时，就需要通过对齐填充来补全。</p>
<h1 id="对象的访问定位"><a href="#对象的访问定位" class="headerlink" title="对象的访问定位"></a>对象的访问定位</h1><p>建立对象就是为了使用对象，Java程序会通过栈上的reference数据来操作堆上的具体对象。对象的访问方式由虚拟机实现而定，主流的访问方式主要有使用<mark>句柄</mark>和<mark>直接指针</mark>两种。</p>
<h2 id="句柄"><a href="#句柄" class="headerlink" title="句柄"></a>句柄</h2><p>如果使用句柄访问的话，Java堆中将可能会划出一块内存来作为句柄池，reference中存储的就是对象的句柄地址，而句柄中包含了对象实例数据与类型数据各自具体的地址信息。<br><img src="https://makiori.oss-cn-beijing.aliyuncs.com/%E7%AC%94%E8%AE%B0/%E5%AF%B9%E8%B1%A1%E7%9A%84%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D-%E4%BD%BF%E7%94%A8%E5%8F%A5%E6%9F%84.png?versionId=CAEQGxiBgIDUkpj94hciIDIwZWZlMjlhOTcxNTQ2MGNiMWQzNmFjNDBlODQzNGRm" alt="使用句柄"></p>
<h2 id="直接指针"><a href="#直接指针" class="headerlink" title="直接指针"></a>直接指针</h2><p>如果使用直接指针的话，那么Java堆中对象的内存布局就必须考虑如何放置访问类型数据的相关信息，reference中存储的直接就是对象地址，如果只访问对象本身的话，就不需要多一次间接访问的开销。<br><img src="https://makiori.oss-cn-beijing.aliyuncs.com/%E7%AC%94%E8%AE%B0/%E5%AF%B9%E8%B1%A1%E7%9A%84%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D-%E7%9B%B4%E6%8E%A5%E6%8C%87%E9%92%88.png?versionId=CAEQGxiBgMDWkpj94hciIGFiZjg4YWY4NDk1ZDQzNzI4ZWM5ZjU3NTc4YTUwZWVl" alt="使用直接指针"></p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>两种对象访问方式各有优势，使用句柄来访问的最大好处就是reference中存储的是稳定句柄地址，在对象被移动时只会改变句柄中的实例数据指针，而referen本身不需要修改。使用直接指针访问方式最大的好处就是速度快，它节省了一次指针定位的时间开销。</p>
]]></content>
      <categories>
        <category>note</category>
      </categories>
      <tags>
        <tag>note</tag>
        <tag>Java</tag>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>Java虚拟机运行时数据区域</title>
    <url>/2021/10/07/note/Java%E8%99%9A%E6%8B%9F%E6%9C%BA%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E5%9F%9F/</url>
    <content><![CDATA[<h1 id="关于java虚拟机运行时数据区域"><a href="#关于java虚拟机运行时数据区域" class="headerlink" title="关于java虚拟机运行时数据区域"></a>关于java虚拟机运行时数据区域</h1><p><img src="https://makiori.oss-cn-beijing.aliyuncs.com/%E7%AC%94%E8%AE%B0/3UKA5ME@%60Y~N(%7B~0L4G1U47.png?versionId=CAEQGxiBgMDHquzr4hciIDYxMjEwNDRjOGVkZTQ4NjY4YzAzNzVhNjdlZjEzMGU1" alt="运行时数据区域"></p>
<br>

<p><img src="https://makiori.oss-cn-beijing.aliyuncs.com/%E7%AC%94%E8%AE%B0/2.png?versionId=CAEQGxiBgICw6e_r4hciIGViNGM4YzM0ODYxZDQyNDk4ZTg1MDg3OGFkY2M2OTMx" alt="运行时数据区域(JDK1.8)"></p>
<br>

<h1 id="运行时数据区域"><a href="#运行时数据区域" class="headerlink" title="运行时数据区域"></a>运行时数据区域</h1><p>线程私有：</p>
<ol>
<li>程序计数器</li>
<li>虚拟机栈</li>
<li>本地方法栈</li>
</ol>
<p>线程共享：</p>
<ol>
<li>堆</li>
<li>方法区</li>
<li>直接内存</li>
</ol>
<br>

<h2 id="程序计数器-（Program-Counter-Register）"><a href="#程序计数器-（Program-Counter-Register）" class="headerlink" title="程序计数器 （Program Counter Register）"></a>程序计数器 （Program Counter Register）</h2><p><mark>程序计数器是一块较小的内存空间，可以看作是当前线程所执行的字节码的行号指示器。</mark><br>字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令。<br>它是程序控制流的指示器，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成。</p>
<p>为了线程切换后能恢复到正常的执行位置，每条线程都需要一个独立的程序计数器，各线程之间计数器互不影响，独立存储。这类内存区域被称为“线程私有”的内存。</p>
<p>程序计算器这一内存区域是唯一不会出现<code>OutOfMemoryError</code>的内存区域，它的生命周期随着线程的创建而创建，随着线程的结束而死亡。</p>
<p>程序计数器主要有两个作用：</p>
<ol>
<li>字节码解释器通过改变程序计数器来依次读取指令，从而实现代码的流程控制，如：顺序执行、选择、循环、异常处理。</li>
<li>在多线程的情况下，程序计数器用于记录当前线程执行的位置，从而当线程被切换回来的时候能够知道该线程上次运行的位置。</li>
</ol>
<br>

<h2 id="Java虚拟机栈（Java-Virtual-Machine-Stack）"><a href="#Java虚拟机栈（Java-Virtual-Machine-Stack）" class="headerlink" title="Java虚拟机栈（Java Virtual Machine Stack）"></a>Java虚拟机栈（Java Virtual Machine Stack）</h2><p>与程序计数器一样，Java虚拟机栈也是线程私有的，它的生命周期与线程相同，随着线程的创建而创建，随着线程的死亡而死亡。它描述Java方法执行的线程内存模型，每个方法被执行时，Java虚拟机都会同步创建一个栈帧（Stack Frame）用于存储局部变量表，操作数栈、动态连接、方法出口等信息。</p>
<p>Java内存区域可以笼统地划分为堆内存（Heap）和栈内存（Stack），其中栈就是现在说的虚拟机栈或者更多情况下指的只是虚拟机栈中局部变量表部分。</p>
<p>局部变量表主要存放了：</p>
<ol>
<li>编译期可知的各种Java虚拟机基本类型（boolean、byte、char、short、int、float、long、double）</li>
<li>对象引用（reference类型，它并不等同于对象本身，可能时一个指向对象起始地址的引用指针，也可能是指向一个代表对象的句柄或者其他与此对象相关的位置）</li>
<li>returnAddress类型（指向了一条字节码指令的地址）</li>
</ol>
<br>

<p>Java虚拟机栈会出现两种错误</p>
<ol>
<li><code>StackOverFlowError</code>：若Java虚拟机栈的内存大小不允许动态扩展，那么当线程请求栈的深度超过当前Java虚拟机栈的最大深度的时候，就抛出<code>StackOverFlowError</code>错误。</li>
<li><code>OutOfMemoryError</code>：若Java虚拟机栈的内存大小可以动态扩展，如果虚拟机在动态扩展栈时无法申请到足够的内存空间，则抛出<code>OutOfMemoryError</code>异常。</li>
</ol>
<br>

<h2 id="本地方法栈（Native-Method-Stacks）"><a href="#本地方法栈（Native-Method-Stacks）" class="headerlink" title="本地方法栈（Native Method Stacks）"></a>本地方法栈（Native Method Stacks）</h2><p>和虚拟机所发挥的作用非常相似，区别是：虚拟机栈执行Java方法（字节码）服务，而本地方法栈则为虚拟机使用到的Native方法服务。</p>
<p>本地方法被执行的时候，在本地方法栈也会创建一个栈帧，用于存放该本地方法的局部变量表、操作数栈、动态链接、出口信息。</p>
<p>与虚拟机栈一样，本地方法栈也会在栈深度溢出或者栈扩展失败时分别抛出<code>StackOverFlowError</code>和<code>OutOfMemoryError</code>异常。</p>
<br>

<h2 id="Java堆（Java-Heap）"><a href="#Java堆（Java-Heap）" class="headerlink" title="Java堆（Java Heap）"></a>Java堆（Java Heap）</h2><p>Java堆是Java虚拟机所管理的内存中最大的一块，Java堆是被所有线程共享的一块内存区域，在虚拟机启动时创建。此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例以及数组都在这里分配内存。</p>
<p>在《Java虚拟机规范》中对Java堆的描述是：“所有的对象实例以及数组都应当在堆上分配。”  但随着Java语言的发展，<br>即时编译器的进步，尤其时逃逸分析技术的日渐强大，栈上分配、标量替换优化手段已经导致一些微妙的变化悄然发生，<br>使得Java对象实例都分配在堆上也渐渐变得不是那么绝对了。</p>
<p>Java堆是垃圾收集器管理的主要区域，因此也被称作GC推（Garbage Collec Heap）, 戏称“垃圾堆”。从垃圾回收的角度，由于现在收集器基本都采用分代垃圾收集算法，所以Java堆还可以细分为：新生代和老年代；再细致一点有：Eden空间、From Survivor、To Survivor空间等。进一步划分的目的是为了更好地回收内存，或者更快地分配内存。</p>
<p>Java堆既可以被实现成固定大小的，也可以是可扩展的，不过当前主流的Java虚拟机都是按照可扩展来实现的（通过参数-Xmx和-Xms设定）。如果在Java堆中没有内存完成实例分配，并且堆也无法扩展时，Java虚拟机将会抛出<code>OufOfMemoryError</code>异常。</p>
<br>

<h2 id="方法区（Method-Area）"><a href="#方法区（Method-Area）" class="headerlink" title="方法区（Method Area）"></a>方法区（Method Area）</h2><p>方法区与Java堆一样，是各个线程共享的内存区域，它用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码缓存等数据。虽然《Java虚拟机规范》中把方法区描述为堆的一个逻辑部分，但是它却有一个别名叫作“非堆”（Non-Heap），目的是与Java堆区分开来。</p>
<p>根据《Java虚拟机规范》的规定，如果方法区无法满足新的内存分配需求时，将抛出<code>OutOfMemoryError</code>异常。</p>
<br>

<h3 id="永久代（Permanent-Generation）"><a href="#永久代（Permanent-Generation）" class="headerlink" title="永久代（Permanent Generation）"></a>永久代（Permanent Generation）</h3><p>说到方法区，不得不提一下“永久代”这个概念。<br>在JDK8以前，许多Java程序员习惯在HotSpot虚拟机上开发、部署程序，很多人更愿意把方法区称呼为<mark>永久代</mark>，<br>或者将两者混为一谈。其实本质上这两者并不是等价的。</p>
<p>《Java虚拟机规范》只是规定了有方法区这个概念和它的作用，并没有规定如何区实现它。所以，在不同的JVM上方法区的实现肯定不同的。方法区和永久代的关系就像Java中接口和类的关系，类实现了接口，而永久代就是HotSpot虚拟机对虚拟机规范中方法区的一种实现方式。也就是说，永久代是HotSpot的概念，方法区是Java虚拟机规范中的定义，是一种规范，而永久代是一种实现，一个是标准一个是实现，其他的虚拟机实现并没有永久代这一说法。</p>
<br>

<h3 id="为什么要将永久代替换为元空间（MetaSpace）呢？"><a href="#为什么要将永久代替换为元空间（MetaSpace）呢？" class="headerlink" title="为什么要将永久代替换为元空间（MetaSpace）呢？"></a>为什么要将永久代替换为元空间（MetaSpace）呢？</h3><p>在JDK1.8的时候，方法区（HotSpot的永久代）被彻底移除了（JDK1.7就已经开始了），取而代之的是元空间，元空间使用的直接内存。</p>
<ol>
<li><p>整个永久代有一个JVM本身设置的固定大小上限，无法进行调整，而元空间使用的是直接内存，受本机可用内存的限制，虽然元空间仍可能溢出，但比原来出现的几率会更小。<br>元空间溢出时错误：<code>java.lang.OutOfMemoryError: MetaSpace</code><br>可以使用<code>-XX：MaxMetaspaceSize</code>标志设置最大元空间大小，默认值为unlimited，这意味着它只受系统内存的限制。<br><code>-XX：MaxMetaspaceSize</code> 调整标志定义元空间的初始大小如果未指定此标志，则Metaspace将根据运行时的应用程序需求动态地重新调整大小。</p>
</li>
<li><p>元空间里面存放的是类的元数据，这样加载多少类的元数据就不由<code>MaxPermSize</code>控制了，而由系统的实际可用空间来控制，这样能加载的类就更多了。</p>
</li>
<li><p>在JDK8中，合并HotSpot 和 JRockit的代码时，JRockit从来没有一个叫永久代的东西，合并之后就没有必要额外地设置一个永久代的地方了。</p>
</li>
</ol>
<br>

<h3 id="运行时常量池-（Runtime-Constant-Pool）"><a href="#运行时常量池-（Runtime-Constant-Pool）" class="headerlink" title="运行时常量池 （Runtime Constant Pool）"></a>运行时常量池 （Runtime Constant Pool）</h3><p>运行时常量池是方法区的一部分。Class文件中除了有类的版本、字段、方法、接口等描述信息外，还有一项信息是常量池表（Constant Pool Table），它用于存放编译期生成的各种字面量与符号引用。</p>
<p>既然运行时常量池是方法区的一部分，自然受到方法区内存的限制，当常量池无法再申请到内存时会抛出<code>OutOfMemoryError</code>异常。</p>
<br>

<h2 id="直接内存-Direct-Memory"><a href="#直接内存-Direct-Memory" class="headerlink" title="直接内存 (Direct Memory)"></a>直接内存 (Direct Memory)</h2><p>直接内存并不是虚拟机运行时数据区的一部分，也不是《Java虚拟机规范》中定义的内存区域。但是这部分内存也被频繁地使用，而且可能导致OutOfMemoryError异常出现。</p>
<p>JDK1.4中新加入了NIO（New Input/Output）类，引入了一种基于通道（Channel）与缓冲区（Buffer）的I/O方式，它可以使用Native函数库直接分配堆外内存，然后通过一个存储再Java堆中的DirectByteBuffer对象作为这块内存的引用进行操作。这样能在一些场景中显著提高性能，因为避免了在Java堆和Native堆中来回复制数据。</p>
<p>本机直接内存的分配不会受到Java堆的限制，但是既然是内存就会受到本机总内存大小以及处理器寻址空间的限制。</p>
]]></content>
      <categories>
        <category>note</category>
      </categories>
      <tags>
        <tag>note</tag>
        <tag>Java</tag>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络笔记（1）</title>
    <url>/2021/10/07/note/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AC%94%E8%AE%B0%EF%BC%881%EF%BC%89/</url>
    <content><![CDATA[<h1 id="OSI-参考模型"><a href="#OSI-参考模型" class="headerlink" title="OSI 参考模型"></a>OSI 参考模型</h1><p>OSI参考模型将网络通信功能划分为<mark>7</mark>个层次，详细地定义了各层所包含的服务，以及层次之间的相互关系。但到目前为止，市场上还没有按照OSI模型开发的产品，所以只能是一个概念性框架。</p>
<ol>
<li>应用层：为应用程序提供网络通信服务</li>
<li>表示层：处理两个系统中的信息表示方法</li>
<li>会话层：建立和维护通信双方的会话连接</li>
<li>运输层：实现端到端的可靠性数据传输</li>
<li>网络层：在通信网络中选择最佳的路由</li>
<li>数据链路层：在物理层的基础上，在通信实体之间建立数据链路连接，通过流量控制与差错控制实现相邻节点之间无差错的传输。</li>
<li>物理层：利用传输介质为通信网络节点之间建立、管理和释放物理连接，实现比特流的透明传输。</li>
</ol>
<br>

<h1 id="TCP-IP-参考模型"><a href="#TCP-IP-参考模型" class="headerlink" title="TCP/IP 参考模型"></a>TCP/IP 参考模型</h1><h2 id="应用层-application-layer）"><a href="#应用层-application-layer）" class="headerlink" title="应用层(application-layer）"></a>应用层(application-layer）</h2><p>应用层的任务是通过应用进程间的交互来完成特定网络应用。应用层协议定义的是应用进程间的通信和交互的规则。对于不同的网络应用需要不同的应用层协议。在互联网中应用层协议很多，如域名系统<mark>DNS</mark>，支持万维网应用的<mark>HTTP</mark> 协议，支持电子邮件的<mark>SMTP</mark> 协议等等。我们把应用层交互的数据单元称为报文。</p>
<h3 id="域名系统-Domain-Name-System"><a href="#域名系统-Domain-Name-System" class="headerlink" title="域名系统(Domain Name System)"></a>域名系统(Domain Name System)</h3><p>DNS是因特网的一项核心服务，它作为可以将域名和 IP 地址相互映射的一个分布式数据库，能够使人更方便的访问互联网，而不用去记住能够被机器直接读取的 IP 数串。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">ip：185.199.110.153</span><br><span class="line">域名：blog.makiori.moe</span><br></pre></td></tr></table></figure>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">ping blog.makiori.moe</span><br></pre></td></tr></table></figure>
<h3 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h3><p>超文本传输协议是互联网上应用最为广泛的一种网络协议。<br>所有的www(万维网)文件必须遵守这个标准。<br>设计HTTP最初的目的就是提供一种发布和接收HTML页面的方法。 </p>
<br>

<h2 id="运输层-transport-layer"><a href="#运输层-transport-layer" class="headerlink" title="运输层(transport layer)"></a>运输层(transport layer)</h2><p>运输层的主要任务就是负责向两台主机进程之间的通信提供通用的数据传输服务。应用进程利用该服务传送应用层报文。“通用的”是指并不针对某一个特定的网络应用，而是多种应用可以使用同一个运输层服务。由于一台主机可同时运行多个线程，因此运输层有复用和分用的功能。所谓复用就是指多个应用层进程可同时使用下面运输层的服务，分用和复用相反，是运输层把收到的信息分别交付上面应用层中的相应进程。</p>
<p>传输层使用两种传输协议，提供不同的服务类型:</p>
<ol>
<li>传输控制协议<code>TCP</code>提供连接型传输服务</li>
<li>用户数据协议<code>UDP</code>提供非连接性传输服务</li>
</ol>
<h3 id="TCP-Transmission-Control-Protocol"><a href="#TCP-Transmission-Control-Protocol" class="headerlink" title="TCP(Transmission Control Protocol)"></a>TCP(Transmission Control Protocol)</h3><p>TCP提供面向连接的服务。在传送数据之前必须先建立连接，拥有高质量的的传输通道，数据传送结束后要释放连接。 但在传送少量数据时，建立连接的时间可能会比<br>传送数据花的时间要长得多。</p>
<h3 id="UDP-User-Datagram-Protocol"><a href="#UDP-User-Datagram-Protocol" class="headerlink" title="UDP(User Datagram Protocol)"></a>UDP(User Datagram Protocol)</h3><p>UDP在传送数据之前不需要先建立连接，但报文可能会丢失，可靠性较差。<br>在某些情况下UDP却是一种最有效的工作方式。</p>
<br>

<h2 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h2><p>在计算机网络中进行通信的两个计算机之间可能会经过很多个数据链路，也可能还要经过很多通信子网。网络层的任务就是选择合适的网间路由和交换结点， 确保数据及时传送。在发送数据时，网络层把运输层产生的报文段或用户数据报封装成分组和包进行传送。在 TCP/IP 体系结构中，由于网络层使用 IP 协议，因此分组也叫 IP 数据报 ，简称 数据报。</p>
<p>这里要注意：不要把运输层的“用户数据报 UDP ”和网络层的“ IP 数据报”弄混。另外，无论是哪一层的数据单元，都可笼统地用“分组”来表示。</p>
<p>这里强调指出，网络层中的“网络”二字已经不是我们通常谈到的具体网络，而是指计算机网络体系结构模型中第三层的名称.</p>
<p>互联网是由大量的异构（heterogeneous）网络通过路由器（router）相互连接起来的。互联网使用的网络层协议是无连接的网际协议（Internet Protocol）和许多路由选择协议，因此互联网的网络层也叫做网际层或IP 层。<br>网络层协议，并不是一个协议，而是由互联层协议（Internet Protocol），地址解析协议（Address Resolution Protocol）<br>Internet控制报文协议（Internet Control Message Protocol，ICMP）等协议组成的一个协议簇(cu)。IPv6中不再使用ARP协议，由邻居发现协议（Neighbor Discovery Protocol）完成ARP协议的功能以及增强ICMP协议功能。</p>
<h2 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h2><p>数据链路层(data link layer)通常简称为链路层。两台主机之间的数据传输，总是在一段一段的链路上传送的，这就需要使用专门的链路层的协议。 在两个相邻节点之间传送数据时，数据链路层将网络层交下来的 IP 数据报组装成帧，在两个相邻节点间的链路上传送帧。每一帧包括数据和必要的控制信息（如同步信息，地址信息，差错控制等）。</p>
<p>在接收数据时，控制信息使接收端能够知道一个帧从哪个比特开始和到哪个比特结束。这样，数据链路层在收到一个帧后，就可从中提出数据部分，上交给网络层。 控制信息还使接收端能够检测到所收到的帧中有无差错。如果发现差错，数据链路层就简单地丢弃这个出了差错的帧，以避免继续在网络中传送下去白白浪费网络资源。如果需要改正数据在链路层传输时出现差错（这就是说，数据链路层不仅要检错，而且还要纠错），那么就要采用可靠性传输协议来纠正出现的差错。这种方法会使链路层的协议复杂些。</p>
<h2 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h2><p>在物理层上所传送的数据单位是比特。<br>物理层(physical layer)的作用是实现相邻计算机节点之间比特流的透明传送，尽可能屏蔽掉具体传输介质和物理设备的差异， 使其上面的数据链路层不必考虑网络的具体传输介质是什么。“透明传送比特流”表示经实际电路传送后的比特流没有发生变化，对传送的比特流来说，这个电路好像是看不见的。<br>在互联网使用的各种协议中最重要和最著名的就是 TCP/IP 两个协议。现在人们经常提到的 TCP/IP 并不一定单指 TCP 和 IP 这两个具体的协议，而往往表示互联网所使用的整个 TCP/IP 协议族。</p>
<br>

<h1 id="TCP-三次握手和四次握手"><a href="#TCP-三次握手和四次握手" class="headerlink" title="TCP 三次握手和四次握手"></a>TCP 三次握手和四次握手</h1><h2 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h2><p>建立一个TCP连接需要“三次握手”</p>
<ol>
<li>客户端 - 发生带有SYN标志的数据包 - 服务端；此处为一次握手</li>
<li>服务端 - 发送带有SYN/ACK标志的数据包 - 客户端；此次为二次握手</li>
<li>客户端 - 发生带有ACK标志的数据包 - 服务端；此处为三次握手</li>
</ol>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">SYN:同步序列编号，是TCP/IP建立连接时使用的握手信号</span><br><span class="line">ACK:确认字符，一种传输类控制字符</span><br></pre></td></tr></table></figure>

<p>三次握手的目的是建立可靠的通信信道，就是双方确认自己与对方的发送与接收是正常的。</p>
<br>

<h2 id="四次握手"><a href="#四次握手" class="headerlink" title="四次握手"></a>四次握手</h2><p>断开一个TCP连接则需要“四次握手”</p>
<ol>
<li>客户端 - 发送一个FIN，用于关闭客户端到服务端的数据传送</li>
<li>服务端 - 接受这个FIN，返回一个ACK，确认序号为收到的序号加1。</li>
<li>服务端 - 关闭与客户端的连接，发送一个FIN给客户端</li>
<li>客户端 - 发回ACK报文确认，并将确认序号设置为收到序号加1。</li>
</ol>
<p>任何一方都可以在数据传送结束后发出连接释放的通知，待对方确认后进入半关闭状态。当另一方也没有数据再发送时，则发出连接释放通知，对方确认后就完全关闭TCP连接。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">SYN 表示 建立连接</span><br><span class="line">FIN 表示 关闭连接</span><br><span class="line">ACK 表示 响应</span><br><span class="line">PSH 表示 有DATA数据传输</span><br><span class="line">RST 表示 连接重置</span><br></pre></td></tr></table></figure>

<br>

<h2 id="TCP协议如何保证可靠传输"><a href="#TCP协议如何保证可靠传输" class="headerlink" title="TCP协议如何保证可靠传输"></a>TCP协议如何保证可靠传输</h2><ol>
<li>应用程序被分割成TCP认为最适合发送的数据块。</li>
<li>TCP给要发送的每一个包进行编号，接收方对数据包进行排序，把有序数据传送给应用层。</li>
<li>校验和 ： TCP将保持它首部和数据的检验和。这是一个端到端的校验和有差错，TCP将丢弃这个报文段和不确认收到此报文段。</li>
<li>TCP的接收端会丢弃重复的数据。</li>
<li>流量控制：TCP连接的每一方都有固定大小的缓冲空间，TCP的接收端只允许发送端发送接受端缓冲区能接纳的数据。当接收方来不及处理发送方的数据，能提示发送方降低发送的速率，防止包丢失。TCP使用的流量控制协议是可变大小的滑动窗口协议。（TCP利用滑动窗口实现流量控制）</li>
<li>拥塞控制：当网络拥塞时，减少数据的发送。</li>
<li>ARQ协议： 为了实现可靠传输。它的基本原理就是每发完一个分组就停止发送，等待对方确认。在收到确认后再发下一个分组。</li>
<li>超时重传： 当TCP发出一个段后，它启动一个定时器，等待目的端确认收到这个报文段。如果不能及时收到一个确认，就重新发送这个报文段。</li>
</ol>
<h3 id="ARQ协议（Automatic-Repeat-reQuest，ARQ）"><a href="#ARQ协议（Automatic-Repeat-reQuest，ARQ）" class="headerlink" title="ARQ协议（Automatic Repeat-reQuest，ARQ）"></a>ARQ协议（Automatic Repeat-reQuest，ARQ）</h3><p>自动重传请求是 OSI 模型中数据链路层和传输层的错误纠正协议之一。它通过使用确认和超时这两个机制，在不可靠服务的基础上实现可靠的信息传输。如果发送方在发送后一段时间之内没有收到确认帧，它通常会重新发送。ARQ 包括停止等待 ARQ 协议和连续 ARQ 协议。</p>
<h4 id="停止等待ARQ协议"><a href="#停止等待ARQ协议" class="headerlink" title="停止等待ARQ协议"></a>停止等待ARQ协议</h4><p>停止等待协议是为了实现可靠传输的，它的基本原理就是每发完一个分组就停止发送，等待对方确认（回复 ACK）。如果过了一段时间（超时时间后），还是没有收到 ACK 确认，说明没有发送成功，需要重新发送，直到收到确认后再发下一个分组。<br>在停止等待协议中，若接收方收到重复分组，就丢弃该分组，但同时还要发送确认。</p>
<p>优点： 简单<br>缺点： 信道利用率低，等待时间长</p>
<ol>
<li>无差错情况:</li>
</ol>
<p>发送方发送分组,接收方在规定时间内收到,并且回复确认.发送方再次发送。</p>
<ol start="2">
<li>出现差错情况（超时重传）:</li>
</ol>
<p>停止等待协议中超时重传是指只要超过一段时间仍然没有收到确认，就重传前面发送过的分组（认为刚才发送过的分组丢失了）。因此每发送完一个分组需要设置一个超时计时器，其重传时间应比数据在分组传输的平均往返时间更长一些。这种自动重传方式常称为 自动重传请求 ARQ 。另外在停止等待协议中若收到重复分组，就丢弃该分组，但同时还要发送确认。连续 ARQ 协议 可提高信道利用率。发送维持一个发送窗口，凡位于发送窗口内的分组可连续发送出去，而不需要等待对方确认。接收方一般采用累积确认，对按序到达的最后一个分组发送确认，表明到这个分组位置的所有分组都已经正确收到了。</p>
<ol start="3">
<li>确认丢失和确认迟到</li>
</ol>
<p>确认丢失：确认消息在传输过程丢失。当 A 发送 M1 消息，B 收到后，B 向 A 发送了一个 M1 确认消息，但却在传输过程中丢失。而 A 并不知道，在超时计时过后，A 重传 M1 消息，B 再次收到该消息后采取以下两点措施：1. 丢弃这个重复的 M1 消息，不向上层交付。 2. 向 A 发送确认消息。（不会认为已经发送过了，就不再发送。A 能重传，就证明 B 的确认消息丢失）。<br><br>确认迟到：确认消息在传输过程中迟到。A 发送 M1 消息，B 收到并发送确认。在超时时间内没有收到确认消息，A 重传 M1 消息，B 仍然收到并继续发送确认消息（B 收到了 2 份 M1）。此时 A 收到了 B 第二次发送的确认消息。接着发送其他数据。过了一会，A 收到了 B 第一次发送的对 M1 的确认消息（A 也收到了 2 份确认消息）。处理如下：1. A 收到重复的确认后，直接丢弃。2. B 收到重复的 M1 后，也直接丢弃重复的 M1。</p>
<h3 id="连续ARQ协议"><a href="#连续ARQ协议" class="headerlink" title="连续ARQ协议"></a>连续ARQ协议</h3><p>连续 ARQ 协议可提高信道利用率。发送方维持一个发送窗口，凡位于发送窗口内的分组可以连续发送出去，而不需要等待对方确认。接收方一般采用累计确认，对按序到达的最后一个分组发送确认，表明到这个分组为止的所有分组都已经正确收到了。</p>
<p>优点： 信道利用率高，容易实现，即使确认丢失，也不必重传。<br>缺点： 不能向发送方反映出接收方已经正确收到的所有分组的信息。 比如：发送方发送了 5 条 消息，中间第三条丢失（3 号），这时接收方只能对前两个发送确认。发送方无法知道后三个分组的下落，而只好把后三个全部重传一次。这也叫 Go-Back-N（回退 N），表示需要退回来重传已经发送过的 N 个消息</p>
<br>

<h2 id="滑动窗口和流量控制"><a href="#滑动窗口和流量控制" class="headerlink" title="滑动窗口和流量控制"></a>滑动窗口和流量控制</h2><p>TCP 利用滑动窗口实现流量控制。流量控制是为了控制发送方发送速率，保证接收方来得及接收。 接收方发送的确认报文中的窗口字段可以用来控制发送方窗口大小，从而影响发送方的发送速率。将窗口字段设置为 0，则发送方不能发送数据。</p>
<h2 id="拥塞控制"><a href="#拥塞控制" class="headerlink" title="拥塞控制"></a>拥塞控制</h2><p>在某段时间，若对网络中某一资源的需求超过了该资源所能提供的可用部分，网络的性能就要变坏。这种情况就叫拥塞。拥塞控制就是为了防止过多的数据注入到网络中，这样就可以使网络中的路由器或链路不致过载。拥塞控制所要做的都有一个前提，就是网络能够承受现有的网络负荷。拥塞控制是一个全局性的过程，涉及到所有的主机，所有的路由器，以及与降低网络传输性能有关的所有因素。相反，流量控制往往是点对点通信量的控制，是个端到端的问题。流量控制所要做到的就是抑制发送端发送数据的速率，以便使接收端来得及接收。</p>
<p>为了进行拥塞控制，TCP 发送方要维持一个 拥塞窗口(cwnd) 的状态变量。拥塞控制窗口的大小取决于网络的拥塞程度，并且动态变化。发送方让自己的发送窗口取为拥塞窗口和接收方的接受窗口中较小的一个。</p>
<p>TCP 的拥塞控制采用了四种算法，即 慢开始 、 拥塞避免 、快重传 和 快恢复。在网络层也可以使路由器采用适当的分组丢弃策略（如主动队列管理 AQM），以减少网络拥塞的发生。</p>
<p>慢开始： 慢开始算法的思路是当主机开始发送数据时，如果立即把大量数据字节注入到网络，那么可能会引起网络阻塞，因为现在还不知道网络的符合情况。经验表明，较好的方法是先探测一下，即由小到大逐渐增大发送窗口，也就是由小到大逐渐增大拥塞窗口数值。cwnd 初始值为 1，每经过一个传播轮次，cwnd 加倍。<br>拥塞避免： 拥塞避免算法的思路是让拥塞窗口 cwnd 缓慢增大，即每经过一个往返时间 RTT 就把发送放的 cwnd 加 1.<br>快重传与快恢复： 在 TCP/IP 中，快速重传和恢复（fast retransmit and recovery，FRR）是一种拥塞控制算法，它能快速恢复丢失的数据包。没有 FRR，如果数据包丢失了，TCP 将会使用定时器来要求传输暂停。在暂停的这段时间内，没有新的或复制的数据包被发送。有了 FRR，如果接收机接收到一个不按顺序的数据段，它会立即给发送机发送一个重复确认。如果发送机接收到三个重复确认，它会假定确认件指出的数据段丢失了，并立即重传这些丢失的数据段。有了 FRR，就不会因为重传时要求的暂停被耽误。 　当有单独的数据包丢失时，快速重传和恢复（FRR）能最有效地工作。当有多个数据信息包在某一段很短的时间内丢失时，它则不能很有效地工作。</p>
]]></content>
      <categories>
        <category>note</category>
      </categories>
      <tags>
        <tag>note</tag>
        <tag>计网</tag>
      </tags>
  </entry>
  <entry>
    <title>《角落里的魔女》目前可公开的情报（1）</title>
    <url>/2021/09/12/novel/%E8%A7%92%E8%90%BD%E9%87%8C%E7%9A%84%E9%AD%94%E5%A5%B3/%E8%A7%92%E8%90%BD%E9%87%8C%E7%9A%84%E9%AD%94%E5%A5%B3%EF%BC%88%E4%BA%BA%E8%AE%BE1%EF%BC%89/</url>
    <content><![CDATA[<p>风织诗，18岁，身高165cm，妹妹头，头发是深蓝色。<br>大一学生，语言专业。<br>风铃书屋的现任主人。<br>在外人的眼里看来，小风一直都是个安静沉稳很有个性的孩子。<br>虽然不善于言语表达，但其实她的内心世界很丰富。<br>亲生父母未知，<br>只知道在一个大风天的夜晚，风华在风铃书屋的门口捡到了仍是婴儿的风织诗，将她抚养长大。</p>
<p>轻云声，18岁，身高170cm，波浪长发，头发是亚麻色。<br>大一学生，教育学专业。<br>目前与风织诗同居在风铃书屋。<br>初中时的朋友，高中时的女友，大学时的妈妈。<br>云声是小风的引路人，也是避风港。<br>温柔善良，内心又潜藏着些许叛逆。<br>因为她出生于一个幸福美满的家庭。<br>父母善解人意，只要是云声选择并且是正确的事情，他们都会放手让云声去做。</p>
]]></content>
      <categories>
        <category>novel</category>
      </categories>
      <tags>
        <tag>小说</tag>
        <tag>角落里的魔女</tag>
      </tags>
  </entry>
  <entry>
    <title>《角落里的魔女》第1章：书店里的魔女</title>
    <url>/2021/09/12/novel/%E8%A7%92%E8%90%BD%E9%87%8C%E7%9A%84%E9%AD%94%E5%A5%B3/%E8%A7%92%E8%90%BD%E9%87%8C%E7%9A%84%E9%AD%94%E5%A5%B3%EF%BC%881%EF%BC%89/</url>
    <content><![CDATA[<p>&nbsp;&nbsp;“所以说，小姐姐是魔女啰？”</p>
  <!-- read more -->

<p>&nbsp;&nbsp;面前的这个女孩子，从她的眼睛里仿佛能看到星星一般。望着她兴奋又有点紧张的样子，我淡定地从桌子上拿起了自己的马克杯，抿了口刚刚冲泡好的茶水，却不小心被烫了一下嘴，还是先吹一吹吧。</p>
<p>&nbsp;&nbsp;大概在半个小时前，我和往常一样，飞在半空中整理着店里的书籍。魔法有时还是挺方便的，不用把梯子搬来搬去，虽然我也可以用魔法搬运梯子就是了。我坐着的也不是魔女惯例的木扫帚，而是最近新购入的扫地机器人，圆圆的平板坐着比扫帚那单根木棍要舒服不少，要是能加个垫子就更好了，下次试一试。而就在我专心的时候，门口用来提醒我客人进门的铃铛却响了起来，明明记得外面挂着的应该是“休息中”的牌子才对啊。我还没反应过来，紧接而来的是女孩子大叫的声音。老实说，我对突然出现的事物都不擅长，比如说我原来并不害怕小强，但如果它是突然出现在我意想不到的地方的话，我还是能被它吓一大跳。于是乎就这么被吓到的我，一下子失去了重心，从扫地机器人上面摔了下来。</p>
<p>&nbsp;&nbsp;“小姐姐你没事吧？！”</p>
<p>&nbsp;&nbsp;屁股疼的同时，眼前也是黑漆漆的一片，但我确切地听到了有人在向我跑来，以及这个声音，它的主人好像是个年轻的女孩子。接下来的事情，就是她扶我起身，坐到店里供客人看书的椅子上。在我缓了一阵之后，去泡了一壶茶，和她面对面地坐在了一起。</p>
<p>&nbsp;&nbsp;回到现在。在我面前的，是一个穿着初中校服的女孩子，扎着马尾辫，头在晃动的时候马尾也会跟着一甩一甩的，感觉好可爱。脸蛋也是充满稚气，比起初中生更像是小学生的样子。要说我是怎么知道那是初中校服，这是因为几年前我也在那所初中就读。</p>
<p>&nbsp;&nbsp;听着她从“你是怎么飞在空中的？”，到“难道说你会魔法吗？好厉害！”，再到“所以说，小姐姐是魔女啰？”；我都没怎么作声，但也没有否认地点着头，没有刻意去掩藏自己是魔女的事情，相信如果是以前的自己的话，是绝对做不到的。</p>
<p>&nbsp;&nbsp;现代社会的人们对奇异事物的接受能力高了不少，生活上的熟人也大概全都知道自己的这个身份，不过大家待我还是如同常人一般。或许也有奶奶的关系吧。只要还不到极端情况，我就不需要去担心自己身份的问题。其实要是我想的话，不管是大家还是眼前的这个女孩，都不会有提出问题的机会，所以没必要顾虑太多。</p>
<p>&nbsp;&nbsp;她的眼睛一亮，紧张的心情似乎已经消失不见了，兴奋到双手都紧握成了拳头。让我想起了自己在初中的时候，也曾见过这样的表情，是从谁身上来着…</p>
<p>&nbsp;&nbsp;“我呀，一直希望自己能遇到这个世界里的不可思议啊。”女孩低下头，好像在收敛自己的情绪一般，轻声地说出了这番话。</p>
<p>&nbsp;&nbsp;“…不可思议，…那是什么？”我有点不明所以，于是出声问道。</p>
<p>&nbsp;&nbsp;“现在小姐姐你就是这个不可思议哦！”哦，她并没有收敛。</p>
<p>&nbsp;&nbsp;“嗯？什么？”我更加不明所以了。</p>
<p>&nbsp;&nbsp;“因为小姐姐你可是魔女啊！”</p>
<p>&nbsp;&nbsp;我面前这个穿着初中校服的女孩子，激动地说着这番话。</p>
<p>&nbsp;&nbsp;“仅仅只因为是魔女吗？这个世界里可不只有我一个魔女哦…甚至在很久很久之前，这里到处都能见到魔女呢。”我苦笑着说道，已经跟不上她的节奏。</p>
<p>&nbsp;&nbsp;“但我相信，小姐姐你会是一位独一无二的魔女，会是我心里的，甚至是这个世界的不可思议哦！”她越说越激动，甚至将身子从桌子那头伸过来，紧握着我原本随意摆在桌上的的双手。</p>
<p>&nbsp;&nbsp;“…”我有点被吓到了，她的力气虽然不大，但我却怎么都无法甩开她的手。感觉再继续这样闹腾下去，我会出一身的汗，于是偷偷地用魔法调低了几度空调。</p>
<p>&nbsp;&nbsp;在这之后，她开始一边不断提问，一边拿出来笔记本来做起了笔记，不过就像是夹带了私货一般，问我姓名年龄以及电话号码就算了，还要问我的身高体重三围是什么意思哦…整个过程当中，唯一不变的就是她那眼中的星星，一直都在闪闪发光。人身调查了我大半天，她终于提出了“该回家了”的说法，在向我表示感谢之后，便起身向门口走去。</p>
<p>&nbsp;&nbsp;“下次来的时候，小姐姐能给我讲讲关于魔女的故事吗？”她推着门，转过头来问道。</p>
<p>&nbsp;&nbsp;“可以是可以…”</p>
<p>&nbsp;&nbsp;“那么就下次见咯。”她向我挥了挥手，接着就走到了门外。</p>
<p>&nbsp;&nbsp;我望着她出门，当铃铛的声音消失，书店里又重回了寂静，我继续坐了一会，消化着刚刚发生的事情，直到杯中已经凉透的茶水喝完，才起身继续完成今天的工作。由于剩下的书都是摆在下层的，所以我既不用梯子，也用不着用飞的了。在一切工作都做完之后，我无所事事地躺回在柜台里，那张习惯用于午休的躺椅上面。</p>
<p>&nbsp;&nbsp;“不可思议… 到底是什么意思呢？”我回想着今天的事情。</p>
<p>&nbsp;&nbsp;门口的铃铛再次响起，这次我可没再被吓着了，而这次走进来的人，不是什么客人，而是我熟悉到不能再熟悉的同居人，名字是“晴云”，我一般叫她云云。</p>
<p>&nbsp;&nbsp;“怎么躺在这里了？来客人了？今天不是休息吗？”她肩膀上挂着的环保袋看起来装得满满的。</p>
<p>&nbsp;&nbsp;“云云~晚饭吃什么？”我并没有起来的意思。</p>
<p>&nbsp;&nbsp;“我问题的回答呢？算了，今晚吃糖醋排骨哦。”</p>
<p>&nbsp;&nbsp;“好耶！”我欢呼着坐起身来。</p>
<p>&nbsp;&nbsp;“唉，这个是什么？”云云弯下腰，捡起了一个我之前都没有注意到的东西。</p>
<p>&nbsp;&nbsp;“这个不是学生证吗？而且还是我们以前那个中学的…”她走过来，然后把东西递给了我。</p>
<p>&nbsp;&nbsp;不久还在我面前的女孩子，现在出现在相片里面，名字那一栏里写着“雨点”。</p>
<p>&nbsp;&nbsp;“不可思议的联系吗…”我自言自语道。</p>
<p>&nbsp;&nbsp;“你在说什么？”云云问道。</p>
<p>&nbsp;&nbsp;“没什么，我找个时间去一趟学校给她送去吧，或者等她来取也行，她说过她还会来的。”我将证件随手一放，从柜台后面走出来，打算帮云云提她的袋子。</p>
<p>&nbsp;&nbsp;“小魔杖呢？你给她喂饭了吗？”</p>
<p>&nbsp;&nbsp;“啊，我忘了，它应该在哪睡着吧…”</p>
<p>&nbsp;&nbsp;“你还有什么是记得的？”</p>
<p>&nbsp;&nbsp;“我可是刚刚才干完活！”</p>
<p>&nbsp;&nbsp;“说起来怎么那么冷啊，空调你开了多少度啊？”云云突然打了个喷嚏。</p>
<p>&nbsp;&nbsp;“啊…18度？”我突然感觉到了一丝不妥。</p>
<p>&nbsp;&nbsp;“我不是说过只能开26度吗？你是不知道电费有多贵吗？……”云云皱起眉头。</p>
<p>&nbsp;&nbsp;“…”</p>
<p>&nbsp;&nbsp;预感到云云的训话会讲会很长的我，像是无法找到反驳理由的小孩子一般，只好加快脚步默默带着手中的重物们，逃进了后面的生活区域里。</p>
]]></content>
      <categories>
        <category>novel</category>
      </categories>
      <tags>
        <tag>小说</tag>
        <tag>角落里的魔女</tag>
      </tags>
  </entry>
  <entry>
    <title>go语言学习笔记(1)</title>
    <url>/2021/09/05/note/go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%881%EF%BC%89/</url>
    <content><![CDATA[<h1 id="GO-语言学习"><a href="#GO-语言学习" class="headerlink" title="GO 语言学习"></a>GO 语言学习</h1><p>开始了GO语言的学习，做点自认为有意思的笔记。<br>笔记摘抄自<a href="http://www.imooc.com/wiki/golesson">慕课教程 Go入门教程</a><br><br></br></p>
<h1 id="Go-语言的"><a href="#Go-语言的" class="headerlink" title="Go 语言的 :="></a>Go 语言的 :=</h1><h2 id="单变量"><a href="#单变量" class="headerlink" title="单变量 :="></a>单变量 :=</h2><p>Go语言中新增了一个特殊的运算符 :=，可以是变量在未声明的情况下被赋值使用。<br>使用方法与带值声明变量类似，只是少了var关键字，使用例子如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    helloWorld := <span class="string">&quot;Hello World!&quot;</span></span><br><span class="line">    fmt.Println(helloWorld)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="多变量"><a href="#多变量" class="headerlink" title="多变量 :="></a>多变量 :=</h2><p>在 Go 语言的多变量赋值体系中，也支持了:=运算符。你可以使用形如变量名,变量名:=变量值,<br>变量值的形式来进行多变量操作。其使用方法和多变量带值声明类似，只是少了var关键字。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    hello, World := <span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;World!&quot;</span></span><br><span class="line">    fmt.Println(hello, World)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><br></br></p>
<h1 id="Go语言的整形（int）数据类型"><a href="#Go语言的整形（int）数据类型" class="headerlink" title="Go语言的整形（int）数据类型"></a>Go语言的整形（int）数据类型</h1><h2 id="定长类型"><a href="#定长类型" class="headerlink" title="定长类型"></a>定长类型</h2><table>
<thead>
<tr>
<th>类型</th>
<th>范围</th>
</tr>
</thead>
<tbody><tr>
<td>int8</td>
<td>-128~127</td>
</tr>
<tr>
<td>int16</td>
<td>-32768~32786</td>
</tr>
<tr>
<td>int32</td>
<td>-2147483648~2147483647</td>
</tr>
<tr>
<td>int64</td>
<td>-9223372036854775808~9223372036854775807</td>
</tr>
</tbody></table>
<p><br></br></p>
<h2 id="不定长类型"><a href="#不定长类型" class="headerlink" title="不定长类型"></a>不定长类型</h2><figure class="highlight plain"><figcaption><span>num int ``` 这个类型在32位的系统中长度和int32一致，在64位的系统中长度和int64一致。</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;br&gt;&lt;&#x2F;br&gt;</span><br><span class="line"></span><br><span class="line">## 类型转换</span><br><span class="line">Go 语言是强类型语言，各个虽然同是整型，但是不同整型的变量不允许直接赋值，需要进行强制类型转换，同时长度大的整型向长度小的整型转换时，要考虑溢出问题。而且不同类的整型无法进行运算，想要进行运算必须要进行强制类型转换，使他们都变成同一类型之后，再运算。举一个int8和int16类型的变量赋值与计算的例子：</span><br><span class="line">&#96;&#96;&#96;Go</span><br><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">    &quot;fmt&quot;</span><br><span class="line">    &quot;math&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">    var a int8 &#x3D; math.MaxInt8</span><br><span class="line">    var b int16 &#x3D; math.MaxInt8 + 1</span><br><span class="line">    fmt.Println(a, b)</span><br><span class="line"></span><br><span class="line">    a &#x3D; int8(b)</span><br><span class="line">    fmt.Println(a, b) &#x2F;&#x2F;因为b长度过长，在转换为int8的过程中溢出了</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;整型变量可以和常数进行计算</span><br><span class="line">    a &#x3D; a + 1</span><br><span class="line">    b &#x3D; b + 1</span><br><span class="line">    fmt.Println(a, b)</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;不同类型的整型变量计算必须强转为相同类型，一般转换为长度大的来计算</span><br><span class="line">    c :&#x3D; int16(a) + b</span><br><span class="line">    fmt.Println(c)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><br></br></p>
<h1 id="GO语言中代替枚举的办法"><a href="#GO语言中代替枚举的办法" class="headerlink" title="GO语言中代替枚举的办法"></a>GO语言中代替枚举的办法</h1><p>枚举类型用于声明一组命名的常量，当一个变量有几种可能的取值时，可以将它定义为枚举类型。在 Go 语言中，并没有提供枚举类型，但是枚举类型又是开发过程中非常重要的数据类型。因为它可以事先定义一组有效的值，可以有效地防止用户提交无效数据，抽象到业务场景中就是我们平时网页上遇到的下拉框，或者我们选择快递地址时的省市信息，均为枚举类型的用武之地。所以在 Go 语言中对常量进行了一定的扩展，使其可以完美地替代枚举类型。<br><br></br></p>
<h2 id="常量中的iota"><a href="#常量中的iota" class="headerlink" title="常量中的iota"></a>常量中的iota</h2><p>为了使常量可以更好地替代枚举类型，Go 语言提供了一个iota关键字。使用iota初始化常量，可以生成一组规则类似的常量，但是不用每个常量都写一遍表达式。在一个const()表达式中，从iota开始的常量会被置为0，向后每个常量的值为前一个常量的值加一：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Weekday <span class="keyword">int</span> <span class="comment">//自定义一个星期类型，作为枚举类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    Sun Weekday = <span class="literal">iota</span></span><br><span class="line">    Mon</span><br><span class="line">    Tues</span><br><span class="line">    Wed</span><br><span class="line">    Thur</span><br><span class="line">    Fri</span><br><span class="line">    Sat</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;Sun :&quot;</span>, Sun)</span><br><span class="line">    fmt.Println(<span class="string">&quot;Mon :&quot;</span>, Mon)</span><br><span class="line">    fmt.Println(<span class="string">&quot;Tues:&quot;</span>, Tues)</span><br><span class="line">    fmt.Println(<span class="string">&quot;Wed :&quot;</span>, Wed)</span><br><span class="line">    fmt.Println(<span class="string">&quot;Thur:&quot;</span>, Thur)</span><br><span class="line">    fmt.Println(<span class="string">&quot;Fri :&quot;</span>, Fri)</span><br><span class="line">    fmt.Println(<span class="string">&quot;Sat :&quot;</span>, Sat)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><br></br></p>
<h2 id="将枚举值转换为字符串"><a href="#将枚举值转换为字符串" class="headerlink" title="将枚举值转换为字符串"></a>将枚举值转换为字符串</h2><p>使用iota是可以使用 Go 语言的常量代替枚举类型，但是由于输出值均为阿拉伯数字，给调试和辨识造成了一定的困难。为了解决这一问题，Go 语言还提供了使常量枚举值输出为字符串的办法。需要我们手动构造一个使用枚举类型输出字符串的方法。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Weekday <span class="keyword">int</span> <span class="comment">//自定义一个星期类型，作为枚举类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    Sun Weekday = <span class="literal">iota</span></span><br><span class="line">    Mon</span><br><span class="line">    Tues</span><br><span class="line">    Wed</span><br><span class="line">    Thur</span><br><span class="line">    Fri</span><br><span class="line">    Sat</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(w Weekday)</span> <span class="title">String</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> w &#123;</span><br><span class="line">    <span class="keyword">case</span> Sun:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Sun&quot;</span></span><br><span class="line">    <span class="keyword">case</span> Mon:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Mon&quot;</span></span><br><span class="line">    <span class="keyword">case</span> Tues:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Tues&quot;</span></span><br><span class="line">    <span class="keyword">case</span> Wed:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Wed&quot;</span></span><br><span class="line">    <span class="keyword">case</span> Thur:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Thur&quot;</span></span><br><span class="line">    <span class="keyword">case</span> Fri:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Fri&quot;</span></span><br><span class="line">    <span class="keyword">case</span> Sat:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Sat&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//不存在的枚举类型就返回&quot;N/A&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;N/A&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;Sun :&quot;</span>, Sun)</span><br><span class="line">    fmt.Println(<span class="string">&quot;Mon :&quot;</span>, Mon)</span><br><span class="line">    fmt.Println(<span class="string">&quot;Tues:&quot;</span>, Tues)</span><br><span class="line">    fmt.Println(<span class="string">&quot;Wed :&quot;</span>, Wed)</span><br><span class="line">    fmt.Println(<span class="string">&quot;Thur:&quot;</span>, Thur)</span><br><span class="line">    fmt.Println(<span class="string">&quot;Fri :&quot;</span>, Fri)</span><br><span class="line">    fmt.Println(<span class="string">&quot;Sat :&quot;</span>, Sat)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注：不常使用，稍作了解即可。<br><br></br></p>
<h1 id="GO语言的循环语句"><a href="#GO语言的循环语句" class="headerlink" title="GO语言的循环语句"></a>GO语言的循环语句</h1><p>在GO语言中减少了循环语句的关键字，仅有一个<code>for</code>关键字<br>但不仅没有减少其功能，而且还兼容了其他语言中的<code>while</code>关键字的用法，甚至更强大。<br><br></br></p>
<h2 id="for循环语句"><a href="#for循环语句" class="headerlink" title="for循环语句"></a>for循环语句</h2><h3 id="普通用法"><a href="#普通用法" class="headerlink" title="普通用法"></a>普通用法</h3><p>在GO语言中，for循环之后一样可以跟三个语句<code>（单次表达式; 条件表达式; 末尾循环体）</code> <br><br>但是它不需要<code>()</code>来包裹这三个表达式，写法上也更加简洁。例子如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> a := <span class="number">0</span>; a &lt; <span class="number">10</span>; a++ &#123;</span><br><span class="line">        fmt.Println(a)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    a := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> ; a &lt; <span class="number">10</span>; a++ &#123;<span class="comment">//表达式可以省略，但是;不能省略</span></span><br><span class="line">        fmt.Println(a)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="代替while的用法"><a href="#代替while的用法" class="headerlink" title="代替while的用法"></a>代替while的用法</h3><p>在其它大部分语言中 for 循环中省略单次表达式和末尾循环体其实就和其它语句中的 while 用法一致了。<br> 所以在 Go 语言中，直接使用省去单次表达式和末尾循环体的 for 循环语句来代替 while 的用法.<br>为了简便代码书写，Go 语言中 for 循环语句在省去单次表达式和末尾循环体时，可以不写分号。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    a := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> a &lt; <span class="number">10</span> &#123; <span class="comment">//和其它语言中的while(a&lt;10)一致</span></span><br><span class="line">        fmt.Println(a)</span><br><span class="line">        a++</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="for语言中的break和continue"><a href="#for语言中的break和continue" class="headerlink" title="for语言中的break和continue"></a>for语言中的<code>break</code>和<code>continue</code></h2><p>在我们的生产环境中，经常需要用到死循环的场景。所以在 Go 语言中新增了一个 for 关键字死循环的用法，让程序员不用写无聊的<code>for(;;)&#123;&#125;</code>和<code>do&#123;&#125; while(1)</code>同时可以使用<code>break</code>和<code>continue</code>来控制循环。<code>break</code> 和 <code>continue</code>的逻辑和语法类似，故笔记只有<code>break</code>。</p>
<h3 id="break跳出单层死循环"><a href="#break跳出单层死循环" class="headerlink" title="break跳出单层死循环"></a>break跳出单层死循环</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    a := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> &#123; <span class="comment">//死循环的写法就是省略 单次表达式；条件表达式；末尾循环体</span></span><br><span class="line">        fmt.Println(a)</span><br><span class="line">        a++</span><br><span class="line">        <span class="keyword">if</span> a &gt;= <span class="number">10</span> &#123;</span><br><span class="line">            <span class="keyword">break</span> <span class="comment">//跳出死循环</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><br></br></p>
<h3 id="break跳出多层死循环"><a href="#break跳出多层死循环" class="headerlink" title="break跳出多层死循环"></a>break跳出多层死循环</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    a := <span class="number">0</span></span><br><span class="line">LOOP:</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> &#123;</span><br><span class="line">            fmt.Println(a)</span><br><span class="line">            a++</span><br><span class="line">            <span class="keyword">if</span> a &gt;= <span class="number">10</span> &#123;</span><br><span class="line">                <span class="keyword">break</span> LOOP <span class="comment">//跳出循环至LOOP所在的层级</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><br></br></p>
<h1 id="Go语言的通道"><a href="#Go语言的通道" class="headerlink" title="Go语言的通道"></a>Go语言的通道</h1><p>Go 语言中有一个特殊的类型 chan，这是在 Go 语言的多线程操作中非常重要的一个数据类型。它的一般用于线程之间的数据传输，所以这个操作类型叫做 “ 通道 (channel)”。<br><br></br></p>
<h2 id="通道的声明和定义"><a href="#通道的声明和定义" class="headerlink" title="通道的声明和定义"></a>通道的声明和定义</h2><p>通道可以理解为一种特殊的变量，所以它的声明和其它变量的声明并没有太大的区别，声明通道变量的写法如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> c <span class="keyword">chan</span> <span class="keyword">int</span> <span class="comment">//声明一个存放int类型数据的通道</span></span><br></pre></td></tr></table></figure>
<p>声明之后不能被直接使用，要通过内置函数<code>make()</code>来创建一下通道变量才可以使用：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> c <span class="keyword">chan</span> <span class="keyword">int</span> <span class="comment">//声明一个存放int类型数据的通道</span></span><br><span class="line">c = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">1</span>) <span class="comment">//创建一个长度为1的通道</span></span><br></pre></td></tr></table></figure>
<p>所以一般最好使用<code>：=</code>来同时声明和创建：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">1</span>) <span class="comment">//声明并创建一个存放int类型数据的通道</span></span><br></pre></td></tr></table></figure>
<p><br></br></p>
<h2 id="通道的使用"><a href="#通道的使用" class="headerlink" title="通道的使用"></a>通道的使用</h2><p>在 Go 语言中，使用 &lt;- 符号来向通道中塞取数据。放在通道右边 chan &lt;-，就是塞数据，放在通道左边 &lt;- chan ，就是取数据。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">1</span>) </span><br><span class="line">    c &lt;- <span class="number">10</span> <span class="comment">//将10塞入通道中</span></span><br><span class="line">    i := &lt;-c <span class="comment">//将10从通道中取出，并赋值给变量i</span></span><br><span class="line">    fmt.Println(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><br></br></p>
<h2 id="通道结合-select-流程控制"><a href="#通道结合-select-流程控制" class="headerlink" title="通道结合 select 流程控制"></a>通道结合 select 流程控制</h2><p>在 Go 语言中为了更方便的利用通道的功能，提供了一个仅用于通道的流程控制语句：<code>select...case</code> 使用这个语句可以同时监听数个通道，非常适合用于并发时的进程调度，或者模块之间的解耦合。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> a := <span class="number">0</span>; a &lt; <span class="number">2</span>; a++ &#123;</span><br><span class="line">        <span class="keyword">select</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> i := &lt;-c:</span><br><span class="line">            fmt.Println(<span class="string">&quot;从通道中取出&quot;</span>, i)</span><br><span class="line">        <span class="keyword">case</span> c &lt;- <span class="number">10</span>:</span><br><span class="line">            fmt.Println(<span class="string">&quot;将 10 塞入通道中&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><br></br></p>
<h1 id="Go语言函数中的defer"><a href="#Go语言函数中的defer" class="headerlink" title="Go语言函数中的defer"></a>Go语言函数中的defer</h1><p>在 Go 语言中的 defer 关键字就是 Go 语言中延迟语句的标志。Go 语言会在函数即将返回时按逆序执行 defer 后的语句。也就是说先被 defer 的语句后执行，最先执行最后被 defer 的语句。defer 和有些语言中的 finally 语句块的用法类似，一般都用于释放一些资源，最常用的地方就是进程锁的释放。<br><br></br></p>
<h2 id="defer的逆序执行"><a href="#defer的逆序执行" class="headerlink" title="defer的逆序执行"></a>defer的逆序执行</h2><p><code>defer</code>会在函数即将结束的时候执行，而且是按照<code>defer</code>的顺序逆序执行。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">defer</span> fmt.Println(<span class="string">&quot;第一个defer的语句&quot;</span>)</span><br><span class="line">    <span class="keyword">defer</span> fmt.Println(<span class="string">&quot;第二个defer的语句&quot;</span>)</span><br><span class="line">    <span class="keyword">defer</span> fmt.Println(<span class="string">&quot;第三个defer的语句&quot;</span>)</span><br><span class="line">    fmt.Println(<span class="string">&quot;Hello Codey!&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Hello Codey!</span><br><span class="line">第三个defer的语句</span><br><span class="line">第二个defer的语句</span><br><span class="line">第一个defer的</span><br></pre></td></tr></table></figure>
<p><br></br></p>
<h2 id="defer中的变量"><a href="#defer中的变量" class="headerlink" title="defer中的变量"></a>defer中的变量</h2><p><code>defer</code>关键字之后若有变量，则<code>defer</code>记录的是在<code>defer</code>时的变量值，而不是最后函数结束时的变量值:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    a := <span class="number">10</span></span><br><span class="line">    <span class="keyword">defer</span> fmt.Println(<span class="string">&quot;defer时a的值为&quot;</span>, a)</span><br><span class="line">    a = <span class="number">100</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;print时a的值为&quot;</span>, a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print时a的值为100</span><br><span class="line">defer时a的值为10</span><br></pre></td></tr></table></figure>
<p><br></br></p>
<h2 id="defer注意小结"><a href="#defer注意小结" class="headerlink" title="defer注意小结"></a>defer注意小结</h2><p><code>defer</code>是先声明后执行的语句模式。<br><br><code>defer</code>会在函数即将结束的时候统一执行。<br><br><code>defer</code>中的变量值是不会被defer之后的语句改变。<br><br><br></br></p>
<h1 id="Go语言中的闭包"><a href="#Go语言中的闭包" class="headerlink" title="Go语言中的闭包"></a>Go语言中的闭包</h1><p>简单的说 Go 语言的闭包就是一个引用了外部自由变量的匿名函数，被引用的自由变量和该匿名函数共同存在，不会因为离开了外部环境就被释放或者删除，还可以在这个匿名函数中继续使用。<br><br></br></p>
<h2 id="Go语言的匿名函数"><a href="#Go语言的匿名函数" class="headerlink" title="Go语言的匿名函数"></a>Go语言的匿名函数</h2><p>匿名函数，顾名思义，就是隐藏函数名的函数。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;匿名函数作为变量来使用&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    f()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;匿名函数直接使用&quot;</span>)</span><br><span class="line">    &#125;()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><br></br></p>
<h2 id="匿名函数引用外部变量"><a href="#匿名函数引用外部变量" class="headerlink" title="匿名函数引用外部变量"></a>匿名函数引用外部变量</h2><p>如果在匿名函数内，使用了外部环境的变量，就构成了一个闭包。简单来讲就是一个函数内，使用匿名函数来操作函数内声明的变量。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    str := <span class="string">&quot;Hello World!&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        str = <span class="string">&quot;Hello Codey!&quot;</span></span><br><span class="line">    &#125;()</span><br><span class="line">    fmt.Println(str)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Hell Codey!</span><br></pre></td></tr></table></figure>
<p>上述例子简单的构造了一个闭包，在匿名函数中并没有声明或者定义str这个变量，但是可以直接操作，就是引用可main函数中的自由变量。这个例子可能对自由变量的引用表现不是很直观，我们接下来使用defer和闭包相结合，深入了解一下闭包中的引用外部变量。<br><br></br></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    str := <span class="string">&quot;Hello World!&quot;</span></span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;defer str=&quot;</span>, str)</span><br><span class="line">    &#125;()</span><br><span class="line">    str = <span class="string">&quot;Hello Codey!&quot;</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;main str=&quot;</span>, str)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">main str &#x3D; Hello Codey!</span><br><span class="line">defer str &#x3D; Hello Codey!</span><br></pre></td></tr></table></figure>
<p>前文提<code>defer</code>的时候明确介绍了<code>defer</code> 后变量是保留它在<code>defer</code>时的值，而不会被<code>defer</code>之后的代码所改变。但是在闭包这边这个看起来不太适用，其实是适用的，只是闭包是引用了这个变量，也就是说，在<code>defer</code>时被保留下来的是这个变量的地址，后续代码改变的不是地址，而是这个地址存储的值，所以后续代码对这个变量的操作，都会反应到这个 <code>defer</code>中。<br><br></br></p>
<h1 id="Go语言中的切片"><a href="#Go语言中的切片" class="headerlink" title="Go语言中的切片"></a>Go语言中的切片</h1><p>Go语言中可变长度的”数组”——切片<code>slice</code><br><br></br></p>
<h2 id="切片的创建"><a href="#切片的创建" class="headerlink" title="切片的创建"></a>切片的创建</h2><p>切片的声明方式和数组类似，写法上看就是声明一个没有长度的数组：<code>var 切片名 []切片类型</code>。其中切片类型可以是切片本身，也就是切片的切片，就构成了多维的切片。切片在使用之前必须要初始化，它没有零值。声明后它的值是 nil，这是因为它的底层实现是一个指向数组的指针，在你给它存入一个数组的地址之前，它只能是 nil。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> a []<span class="keyword">int</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;初始化前：&quot;</span>, a)</span><br><span class="line">    a = <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">5</span>, <span class="number">10</span>)</span><br><span class="line">    fmt.Println(<span class="string">&quot;初始化后：&quot;</span>, a)</span><br><span class="line">    a[<span class="number">4</span>] = <span class="number">5</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;  赋值后：&quot;</span>, a)</span><br><span class="line">    a[<span class="number">5</span>] = <span class="number">6</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;赋值后：&quot;</span>, a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><br></br></p>
<h2 id="切片的截取"><a href="#切片的截取" class="headerlink" title="切片的截取"></a>切片的截取</h2><p>切片之所以被叫做切片是有原因的，它可以从任意长度开始切，切到任意长度为止，然后这一段拿出来就是一个新的切片。<br>切割形式为 <code>切片名(s)[起始下标(begin):结束下标(end):最大容量(max)]</code></p>
<p>切片截取形式表<br>|操作| 含义|<br>| —- | —-  |<br>|s[begin?max] |    截取切片s从begin到end的数据，构成一个容量为max-begin，长度为begin-end的切片。（用的不多）|<br>|s[begin:end] |    截取切片s从begin到end的数据，构成一个容量和长度均为begin-end的切片。|<br>|s[begin:] | 截取切片s从begin到最后的数据，构成一个容量和长度均为len(s)-end的切片。|<br>|s[:end] | 截取切片s从0到最后的数据，构成一个容量和长度均为end-0的切片。|</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> a = []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">    fmt.Println(<span class="string">&quot;a[1:3]=&quot;</span>, a[<span class="number">1</span>:<span class="number">3</span>])</span><br><span class="line">    fmt.Println(<span class="string">&quot;a[1:]=&quot;</span>, a[<span class="number">1</span>:])</span><br><span class="line">    fmt.Println(<span class="string">&quot;a[:3]=&quot;</span>, a[:<span class="number">3</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><br></br></p>
<h2 id="切片的追加"><a href="#切片的追加" class="headerlink" title="切片的追加"></a>切片的追加</h2><p>切片使用一个 Go 语言的内置函数<code>append(切片，待添加的值)</code>，来进行切片末尾元素的追加。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> a = []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">    a = <span class="built_in">append</span>(a, <span class="number">6</span>)</span><br><span class="line">    fmt.Println(a)</span><br><span class="line">    a = <span class="built_in">append</span>(a, <span class="number">7</span>, <span class="number">8</span>)</span><br><span class="line">    fmt.Println(a)</span><br><span class="line">    b := []<span class="keyword">int</span>&#123;<span class="number">9</span>, <span class="number">10</span>&#125;</span><br><span class="line">    a = <span class="built_in">append</span>(a, b...)</span><br><span class="line">    fmt.Println(a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><br></br></p>
<h2 id="切片的长度和容量"><a href="#切片的长度和容量" class="headerlink" title="切片的长度和容量"></a>切片的长度和容量</h2><p>在切片中可以使用<code>len()</code>获取切片中元素的数量，也就是切片的长度。使用<code>cap()</code>可以获取切片引用的数组的长度，也就切片的容量。切片的容量一般大于等于长度，容量会随着长度的增长而增长。<br>在初始化一个切片的时候其实时给切片引用了一个数组，然后容量就是这个数组的长度，然后如果切片的长度超过了切片的容量，它就会让切片引用一个容量更大数组来存放这些元素。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> a = []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;a的地址%p，a的长度%d，a的容量%d\n&quot;</span>, a, <span class="built_in">len</span>(a), <span class="built_in">cap</span>(a))</span><br><span class="line">    a = <span class="built_in">append</span>(a, <span class="number">6</span>)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;a的地址%p，a的长度%d，a的容量%d\n&quot;</span>, a, <span class="built_in">len</span>(a), <span class="built_in">cap</span>(a))</span><br><span class="line">    a = <span class="built_in">append</span>(a, <span class="number">7</span>, <span class="number">8</span>)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;a的地址%p，a的长度%d，a的容量%d\n&quot;</span>, a, <span class="built_in">len</span>(a), <span class="built_in">cap</span>(a))</span><br><span class="line">    b := []<span class="keyword">int</span>&#123;<span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>&#125;</span><br><span class="line">    a = <span class="built_in">append</span>(a, b...)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;a的地址%p，a的长度%d，a的容量%d\n&quot;</span>, a, <span class="built_in">len</span>(a), <span class="built_in">cap</span>(a))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>能从执行结果看到，在切片a每次添加的元素要超过它的容量时，它的地址就会发生改变，其实就是让它引用了一个新的容量更大的数组。<br><br></br></p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>切片在使用前需要初始化。<br><br>切片的本质是一个指针数组，但是它的地址会随着长度超过容量而改变。<br><br>在应用场景中一般都使用切片。<br><br><br></br></p>
<h1 id="Go语言中的Map"><a href="#Go语言中的Map" class="headerlink" title="Go语言中的Map"></a>Go语言中的Map</h1><p><code>map</code>是一种元素对的无序集合，每一个索引(key)对应一个值(value)。<code>map</code> 是一种能够通过索引(key)迅速找到值(value)的数据结构，所以也被称为字典。在 Go 语言中因为线程安全问题，一共实现了两种类型的<code>map</code>。<br><br></br></p>
<h2 id="无锁的map"><a href="#无锁的map" class="headerlink" title="无锁的map"></a>无锁的map</h2><p>这种类型的 map 是线程不安全的 map，多个线程同时访问这个类型的 map 的同一个变量时，会有读写冲突，会导致系统奔溃。所以一般在单线程程序中使用的较多。</p>
<h3 id="map的创建"><a href="#map的创建" class="headerlink" title="map的创建"></a>map的创建</h3><p>map 的底层结构也是一个指针，所以和变量不同，并不是声明后立刻能够使用。和切片相同，需要使用make()函数进行初始化。在初始化之前为空，没有零值。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> m <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span></span><br><span class="line">    fmt.Println(m == <span class="literal">nil</span>)</span><br><span class="line">    m = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>)</span><br><span class="line">    fmt.Println(m == <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><br></br></p>
<h3 id="map的赋值"><a href="#map的赋值" class="headerlink" title="map的赋值"></a>map的赋值</h3><p>map 的赋值有两种方式：<br><br>使用:=使map在定义的时候直接赋值。<br><br>使用map[key]=value的形式对map进行赋值。<br><br>在明确知道 map 的值的时候就可以使用第一种方式进行赋值，比如说在建立中英文对应关系的时候。在未知 map 的取值时，一般建议使用后者进行赋值。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    m1 := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;<span class="string">&quot;Apple&quot;</span>: <span class="string">&quot;苹果&quot;</span>, <span class="string">&quot;Orange&quot;</span>: <span class="string">&quot;橘子&quot;</span>, <span class="string">&quot;Banana&quot;</span>: <span class="string">&quot;香蕉&quot;</span>&#125;</span><br><span class="line">    fmt.Println(m1[<span class="string">&quot;Apple&quot;</span>])</span><br><span class="line">    m2 := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>)</span><br><span class="line">    m2[<span class="string">&quot;Apple&quot;</span>] = <span class="string">&quot;苹果&quot;</span></span><br><span class="line">    m2[<span class="string">&quot;Orange&quot;</span>] = <span class="string">&quot;橘子&quot;</span></span><br><span class="line">    m2[<span class="string">&quot;Banana&quot;</span>] = <span class="string">&quot;香蕉&quot;</span></span><br><span class="line">    fmt.Println(m2[<span class="string">&quot;Apple&quot;</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><br></br></p>
<h3 id="map的遍历"><a href="#map的遍历" class="headerlink" title="map的遍历"></a>map的遍历</h3><p>map 是字典结构，如果不清楚所有 key 的值，是无法对 map 进行遍历的，所以 Go 语言中使用了一个叫做range的关键字，配合for循环结构来对map结构进行遍历。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    m := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;<span class="string">&quot;Apple&quot;</span>: <span class="string">&quot;苹果&quot;</span>, <span class="string">&quot;Orange&quot;</span>: <span class="string">&quot;橘子&quot;</span>, <span class="string">&quot;Banana&quot;</span>: <span class="string">&quot;香蕉&quot;</span>&#125;</span><br><span class="line">    <span class="keyword">for</span> k, v := <span class="keyword">range</span> m &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;key:&quot;</span>, k, <span class="string">&quot;, value:&quot;</span>, v)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意：map是无序的，所以每次输出的顺序可能会不一样。<br><br></br></p>
<h3 id="map的删除"><a href="#map的删除" class="headerlink" title="map的删除"></a>map的删除</h3><p>map 在普通的用法中是无法移除只可以增加 key 和 value 的，所以 Go 语言中使用了一个内置函数delete(map,key)来移除 map 中的 key 和 value。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    m := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;<span class="string">&quot;Apple&quot;</span>: <span class="string">&quot;苹果&quot;</span>, <span class="string">&quot;Orange&quot;</span>: <span class="string">&quot;橘子&quot;</span>, <span class="string">&quot;Banana&quot;</span>: <span class="string">&quot;香蕉&quot;</span>&#125;</span><br><span class="line">    fmt.Println(m)</span><br><span class="line">    <span class="built_in">delete</span>(m, <span class="string">&quot;Apple&quot;</span>)</span><br><span class="line">    fmt.Println(m)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><br></br></p>
]]></content>
      <categories>
        <category>note</category>
      </categories>
      <tags>
        <tag>note</tag>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title>九月伊始</title>
    <url>/2021/09/04/blog/%E4%B9%9D%E6%9C%88%E4%BC%8A%E5%A7%8B/</url>
    <content><![CDATA[<h1 id="暑假总结"><a href="#暑假总结" class="headerlink" title="暑假总结"></a>暑假总结</h1><p>暑假结尾就跟泄了气的皮球一样，既没有学习，也没有沉迷在游戏里面。<br>做翻译的心思也少了许多，自制字幕视频出了三期之后就变回了搬运。<br>不过有看到其他人在进行字幕制作，找个借口就是没必要重复造轮子了（</p>
<h1 id="近期状况"><a href="#近期状况" class="headerlink" title="近期状况"></a>近期状况</h1><p>回校之后，在舍友的带动下开始了高强度的学习。<br>目前在学习如何用Spring Cloud + Vue 做一个前后端分离的项目。<br>是<a href="https://blog.refrigetwo.moe/">老胡</a>和他朋友推荐给我的慕课网课程。<br>本来是打算暑假进行的，由于资金问题而拖到了开学，实在是有点拖自己进度了。<br>做不到和舍友一样的高强度学习，所以我在自己的日程安排表里加入了翻译工作的一项。<br>虽然只是在做老胡的私人翻译，但是能听到一些中文上的建议，可以给自己的短缺做一些填补。</p>
<h1 id="宇宙现状"><a href="#宇宙现状" class="headerlink" title="宇宙现状"></a>宇宙现状</h1><p>结果暑假期间也没能写出一点东西，只能说“慢慢来吧”。</p>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>日常</tag>
      </tags>
  </entry>
  <entry>
    <title>八月的if</title>
    <url>/2021/08/04/blog/%E5%85%AB%E6%9C%88%E7%9A%84if/</url>
    <content><![CDATA[<h1 id="近况"><a href="#近况" class="headerlink" title="近况"></a>近况</h1><p>嗯，由于前年出去兼职对自己造成的影响。<br>今年的暑假依旧是选择在家度过，但其实说到底还是因为懒。<br>蹲家挺好的，在家里有空调，有网络，还有零食。<br>只要最低的消耗就能好好活下去。<br>不过，虽然现在可以暂时逃避社会，但是我清楚这样的日子只会越来越少。<br>九月份开始就是大二学生了，要忙的事情会更加多。<br>未来还有实习、考专升本等一系列事情在等着我。<br>实在是没有时间，再过像这样的日子了。</p>
<h1 id="关于牧尾宇宙"><a href="#关于牧尾宇宙" class="headerlink" title="关于牧尾宇宙"></a>关于牧尾宇宙</h1><p>如果有看过我博客的朋友，会发现宇宙已经开始更新了。<br>《牧尾同学记事簿》第一话。<br>500字短的不能再短的小文章，讲述的是拉开宇宙序幕的小故事。</p>
<p>主人公，相信大家都不陌生了吧。</p>
<p><img src="https://makiori.oss-cn-beijing.aliyuncs.com/%E7%89%A7%E5%B0%BE%E4%BC%8A%E7%B9%94/%E7%B4%A0%E6%9D%90%E7%89%88%E6%9C%AC.jpg?versionId=CAEQExiBgMCEwdrD0xciIGM2MWIxYmIxZTIzYzQxMDJhZGM2OThkMjlhMmZkMDMy" alt="牧尾伊織"></p>
<p>《牧尾同学记事簿》以后会继续以牧尾伊織为主人公，描述自己在创作时的各种奇怪想法。<br>敬请期待。</p>
<h1 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h1><p>比起上一个假期的彻底没有学习，这个学期算是稍微进步了一点，不知道为什么能够坚持刷题。<br>最近在看的番剧，比较在意的是《白砂的水族馆》<br>是一个发生在水族馆里，主题为善待动物，友好待人的美好故事。<br>其中一位主角的声优伊藤美来小姐，也去体验水族馆的工作了。<br>以此为契机，我重新开始了搬运与翻译的工作。<br>加上在学习如何写项目<br>另外还想尝试一下制作视频。<br>这个月应该会很忙，但我想暑假变得充实并不是什么坏事呢。</p>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>日常</tag>
      </tags>
  </entry>
  <entry>
    <title>牧尾同学记事簿（1）</title>
    <url>/2021/07/21/novel/%E7%89%A7%E5%B0%BE%E5%90%8C%E5%AD%A6%E8%AE%B0%E4%BA%8B%E7%B0%BF/%E7%89%A7%E5%B0%BE%E5%90%8C%E5%AD%A6%E8%AE%B0%E4%BA%8B%E7%B0%BF%EF%BC%881%EF%BC%89/</url>
    <content><![CDATA[<p>暑假的某一天。</p>
<p>我保持着一直以来的放假习惯。</p>
<p>盘着双腿坐在椅子上，拿着游戏手柄，目光紧盯着电脑屏幕。</p>
<p>上边是调了十八度的空调呼呼吹出的冷风。</p>
<p>下边则是电脑机箱在不断地让我感受它温热的气息。</p>
<p>音响开着的声音并不大，所以我才能够听清楚她突然之间的发言。</p>
<p>“我想创造一个属于自己的宇宙。”</p>
<p>来自一旁正仰着面躺在我床上的女孩</p>
<p>她望着天花板，像是在思考些什么。</p>
<p>“哈？”我发出了疑惑的声音。</p>
<p>握着游戏手柄的手稍微停了下来，目光也望向了她。</p>
<p>“创造……宇宙？”我把耳朵确切听到的内容重复了一遍。</p>
<p>她像是突然起了兴致，猛地坐了起来。</p>
<p>“呀，你看啊，把可爱的女孩子们，放在同一个宇宙里。”</p>
<p>“嗯……嗯……”我眯起眼睛，尝试将她的话语输入脑中。</p>
<p>“让她们各自有各自的故事，又能够出现交集。”</p>
<p>“嗯……嗯……”</p>
<p>“这不是很棒的事情吗？”</p>
<p>她看向我的眼睛正在闪闪发光。</p>
<p>“所以，你想怎么做？” 我把脸向着电脑屏幕转了回去。</p>
<p>老实说我不太懂，但我大受震撼。</p>
<p>只能一步一步顺着她走了吧。</p>
<p>“怎么做……我不是说了吗？要创造一个属于自己的宇宙！”</p>
<p>“……我就是在问你要怎么创造啊……”我无奈地再次问道。</p>
<p>“呼<del>呼</del>呼~”她笑了笑。</p>
<p>这笑声感觉令我的汗毛竖了起来。</p>
<p>“那当然是在梦中啦，晚安！”</p>
<p>奇怪的答案。</p>
<p>然后她就躺回了下去，这次还顺手盖上了我的被子。</p>
<p>本想说她一下，但感觉不会有啥结果，只是白费口水而已</p>
<p>于是就算了。</p>
<p>“好冷。” 她打了一个喷嚏。</p>
<p>“是谁把空调开那么低的。” 我接过话茬。</p>
<p>“是谁啊？” 她抱怨的声音。</p>
<p>“是你啊。” 我冷淡的声音。</p>
]]></content>
      <categories>
        <category>novel</category>
      </categories>
      <tags>
        <tag>小说</tag>
        <tag>牧尾同学记事簿</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Pytorch实现mnist手写数字识别</title>
    <url>/2021/06/27/blog/%E4%BD%BF%E7%94%A8Pytorch%E5%AE%9E%E7%8E%B0mnist%E6%89%8B%E5%86%99%E6%95%B0%E5%AD%97%E8%AF%86%E5%88%AB/</url>
    <content><![CDATA[<h1 id="写在开头"><a href="#写在开头" class="headerlink" title="写在开头"></a>写在开头</h1><p>我其实根本就不想写这方面内容的文章，不过既然人工智能课的结课作业要写项目文档，我就顺便更一下博客而已。（其实说到底就是逮到机会想水博客而已。）没有学过Python，代码来源自网络，整理一下也能方便日后的自己拿出来学习。<br>下面开始就是作业了。</p>
<h1 id="基于Pytorch的MNIST手写数字识别"><a href="#基于Pytorch的MNIST手写数字识别" class="headerlink" title="基于Pytorch的MNIST手写数字识别"></a>基于Pytorch的MNIST手写数字识别</h1><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>数字识别（Digit Recognition）是计算机从纸质文档,照片,或其他来源接收和理解并识别可读的数字的能力。<br>根据数字来源的产生方式的不同,目前数字识别问题可以区分为手写体数字识别,印刷体数字识别,光学数字识别,自然场景下的数字识别等,具有很大的实际应用价值。目前比较受到关注的问题主要是手写体数字识别,由于其具有MNIST这种大型标准易用的成熟数据集,简单的0-9数字识别已经被作为计算机视觉领域的入门问题。本文通过介绍手写数字识别的应用,并指出传统研究方法及其不足之处;然后引入深度学习的概念,以卷积神经网络为例,详细介绍卷积神经网络的关键技术特点。最后通过一个实例说明卷积神经网络在手写数字识别方面的应用。（此段来源自网络）</p>
<h2 id="项目背景概述-介绍"><a href="#项目背景概述-介绍" class="headerlink" title="项目背景概述/介绍"></a>项目背景概述/介绍</h2><p>MNIST手写数字识别，是一个比较简单的入门项目，就相当于我们在学习编程语言时最开始的Hello World，可以让我们快速地了解构建神经网络的大致过程。<br>这次我们选择使用PyTorch的神经网络框架。PyTorch是torch的python版本，它是由Facebook开源的神经网络框架。<br>Torch 是一个经典的对多维矩阵数据进行操作的张量(tensor)库，在机器学习和其他数学密集型应用有广泛应用。与Tensorflow的静态计算图不同，pytorch的计算图是动态的，可以根据计算需要实时改变计算图。但由于Torch语言采用 Lua，导致在国内一直很小众，并逐渐被支持 Python 的 Tensorflow 抢走用户。作为经典机器学习库 Torch 的端口，PyTorch 为 Python 语言使用者提供了舒适的写代码选择。PyTorch的设计追求最少的封装，尽量避免重复造轮子。不像 TensorFlow 中充斥着session、graph、operation、name_scope、variable、tensor、layer等全新的概念，PyTorch 的设计遵循tensor→variable(autograd)→nn.Module 三个由低到高的抽象层次，分别代表高维数组（张量）、自动求导（变量）和神经网络（层/模块），而且这三个抽象之间联系紧密，可以同时进行修改和操作。 简洁的设计带来的另外一个好处就是代码易于理解。PyTorch的源码只有TensorFlow的十分之一左右，更少的抽象、更直观的设计使得PyTorch的源码十分易于阅读。<br>总的来说，选择Pytorch，是因为它能够在短时间内建立结果，适用于小规模的项目。（其实最主要的是因为老师让我们用Pytorch）</p>
<h2 id="项目实现原理"><a href="#项目实现原理" class="headerlink" title="项目实现原理"></a>项目实现原理</h2><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><p>安装PyTorch -&gt; 安装mnist -&gt; 通过代码下载MNIST训练集 -&gt; 通过代码定义卷积神经网络 -&gt; 通过代码使用MNIST训练集中的训练库和测试库训练出一个模型MNIST.pth -&gt; 通过模型与定义的卷积神经网络进行识别</p>
<h3 id="PyTorch安装"><a href="#PyTorch安装" class="headerlink" title="PyTorch安装"></a>PyTorch安装</h3><p>根据自己计算机的实际情况在官网 <a href="https://pytorch.org/">https://pytorch.org</a> 安装相应的PyTorch<br>详细安装教程：<a href="https://blog.csdn.net/learningpawn/article/details/106531514">https://blog.csdn.net/learningpawn/article/details/106531514</a></p>
<h3 id="安装Python的mnist库"><a href="#安装Python的mnist库" class="headerlink" title="安装Python的mnist库"></a>安装Python的mnist库</h3><p>打开cmd，输入<code>pip install mnist</code><br>可以通过 <code>pip list</code> 检查自己是否安装相应的库</p>
<h3 id="通过代码进行的操作"><a href="#通过代码进行的操作" class="headerlink" title="通过代码进行的操作"></a>通过代码进行的操作</h3><p>通过代码下载MNIST的训练集和测试集，同时定义卷积神经网络，然后训练出相应的模型，并将其保存，以下为执行代码。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"><span class="keyword">import</span> torch.optim <span class="keyword">as</span> optim</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> datasets, transforms</span><br><span class="line">torch.__version__</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">BATCH_SIZE=<span class="number">512</span> <span class="comment">#大概需要2G的显存</span></span><br><span class="line">EPOCHS=<span class="number">20</span> <span class="comment"># 总共训练批次</span></span><br><span class="line">DEVICE = torch.device(<span class="string">&quot;cuda&quot;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&quot;cpu&quot;</span>) <span class="comment"># 让torch判断是否使用GPU，建议使用GPU环境，因为会快很多</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#下载训练集</span></span><br><span class="line">train_loader = torch.utils.data.DataLoader(</span><br><span class="line">        datasets.MNIST(<span class="string">&#x27;data&#x27;</span>, train=<span class="literal">True</span>, download=<span class="literal">True</span>, </span><br><span class="line">                       transform=transforms.Compose([</span><br><span class="line">                           transforms.ToTensor(),</span><br><span class="line">                           transforms.Normalize((<span class="number">0.1307</span>,), (<span class="number">0.3081</span>,))</span><br><span class="line">                       ])),</span><br><span class="line">        batch_size=BATCH_SIZE, shuffle=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#下载测试集</span></span><br><span class="line">test_loader = torch.utils.data.DataLoader(</span><br><span class="line">        datasets.MNIST(<span class="string">&#x27;data&#x27;</span>, train=<span class="literal">False</span>, transform=transforms.Compose([</span><br><span class="line">                           transforms.ToTensor(),</span><br><span class="line">                           transforms.Normalize((<span class="number">0.1307</span>,), (<span class="number">0.3081</span>,))</span><br><span class="line">                       ])),</span><br><span class="line">        batch_size=BATCH_SIZE, shuffle=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义卷积神经网络</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConvNet</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="comment"># batch*1*28*28（每次会送入batch个样本，输入通道数1（黑白图像），图像分辨率是28x28）</span></span><br><span class="line">        <span class="comment"># 下面的卷积层Conv2d的第一个参数指输入通道数，第二个参数指输出通道数，第三个参数指卷积核的大小</span></span><br><span class="line">        self.conv1 = nn.Conv2d(<span class="number">1</span>, <span class="number">10</span>, <span class="number">5</span>) <span class="comment"># 输入通道数1，输出通道数10，核的大小5</span></span><br><span class="line">        self.conv2 = nn.Conv2d(<span class="number">10</span>, <span class="number">20</span>, <span class="number">3</span>) <span class="comment"># 输入通道数10，输出通道数20，核的大小3</span></span><br><span class="line">        <span class="comment"># 下面的全连接层Linear的第一个参数指输入通道数，第二个参数指输出通道数</span></span><br><span class="line">        self.fc1 = nn.Linear(<span class="number">20</span>*<span class="number">10</span>*<span class="number">10</span>, <span class="number">500</span>) <span class="comment"># 输入通道数是2000，输出通道数是500</span></span><br><span class="line">        self.fc2 = nn.Linear(<span class="number">500</span>, <span class="number">10</span>) <span class="comment"># 输入通道数是500，输出通道数是10，即10分类</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self,x</span>):</span></span><br><span class="line">        in_size = x.size(<span class="number">0</span>) <span class="comment"># 在本例中in_size=512，也就是BATCH_SIZE的值。输入的x可以看成是512*1*28*28的张量。</span></span><br><span class="line">        out = self.conv1(x) <span class="comment"># batch*1*28*28 -&gt; batch*10*24*24（28x28的图像经过一次核为5x5的卷积，输出变为24x24）</span></span><br><span class="line">        out = F.relu(out) <span class="comment"># batch*10*24*24（激活函数ReLU不改变形状））</span></span><br><span class="line">        out = F.max_pool2d(out, <span class="number">2</span>, <span class="number">2</span>) <span class="comment"># batch*10*24*24 -&gt; batch*10*12*12（2*2的池化层会减半）</span></span><br><span class="line">        out = self.conv2(out) <span class="comment"># batch*10*12*12 -&gt; batch*20*10*10（再卷积一次，核的大小是3）</span></span><br><span class="line">        out = F.relu(out) <span class="comment"># batch*20*10*10</span></span><br><span class="line">        out = out.view(in_size, -<span class="number">1</span>) <span class="comment"># batch*20*10*10 -&gt; batch*2000（out的第二维是-1，说明是自动推算，本例中第二维是20*10*10）</span></span><br><span class="line">        out = self.fc1(out) <span class="comment"># batch*2000 -&gt; batch*500</span></span><br><span class="line">        out = F.relu(out) <span class="comment"># batch*500</span></span><br><span class="line">        out = self.fc2(out) <span class="comment"># batch*500 -&gt; batch*10</span></span><br><span class="line">        out = F.log_softmax(out, dim=<span class="number">1</span>) <span class="comment"># 计算log(softmax(x))</span></span><br><span class="line">        <span class="keyword">return</span> out</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#训练</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train</span>(<span class="params">model, device, train_loader, optimizer, epoch</span>):</span></span><br><span class="line">    model.train()</span><br><span class="line">    <span class="keyword">for</span> batch_idx, (data, target) <span class="keyword">in</span> <span class="built_in">enumerate</span>(train_loader):</span><br><span class="line">        data, target = data.to(device), target.to(device)</span><br><span class="line">        optimizer.zero_grad()</span><br><span class="line">        output = model(data)</span><br><span class="line">        loss = F.nll_loss(output, target)</span><br><span class="line">        loss.backward()</span><br><span class="line">        optimizer.step()</span><br><span class="line">        <span class="keyword">if</span>(batch_idx+<span class="number">1</span>)%<span class="number">30</span> == <span class="number">0</span>: </span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Train Epoch: &#123;&#125; [&#123;&#125;/&#123;&#125; (&#123;:.0f&#125;%)]\tLoss: &#123;:.6f&#125;&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">                epoch, batch_idx * <span class="built_in">len</span>(data), <span class="built_in">len</span>(train_loader.dataset),</span><br><span class="line">                <span class="number">100.</span> * batch_idx / <span class="built_in">len</span>(train_loader), loss.item()))</span><br><span class="line"></span><br><span class="line"><span class="comment">#测试</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">model, device, test_loader</span>):</span></span><br><span class="line">    model.<span class="built_in">eval</span>()</span><br><span class="line">    test_loss = <span class="number">0</span></span><br><span class="line">    correct = <span class="number">0</span></span><br><span class="line">    <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">        <span class="keyword">for</span> data, target <span class="keyword">in</span> test_loader:</span><br><span class="line">            data, target = data.to(device), target.to(device)</span><br><span class="line">            output = model(data)</span><br><span class="line">            test_loss += F.nll_loss(output, target, reduction=<span class="string">&#x27;sum&#x27;</span>).item() <span class="comment"># 将一批的损失相加</span></span><br><span class="line">            pred = output.<span class="built_in">max</span>(<span class="number">1</span>, keepdim=<span class="literal">True</span>)[<span class="number">1</span>] <span class="comment"># 找到概率最大的下标</span></span><br><span class="line">            correct += pred.eq(target.view_as(pred)).<span class="built_in">sum</span>().item()</span><br><span class="line"></span><br><span class="line">    test_loss /= <span class="built_in">len</span>(test_loader.dataset)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\nTest set: Average loss: &#123;:.4f&#125;, Accuracy: &#123;&#125;/&#123;&#125; (&#123;:.0f&#125;%)\n&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">        test_loss, correct, <span class="built_in">len</span>(test_loader.dataset),</span><br><span class="line">        <span class="number">100.</span> * correct / <span class="built_in">len</span>(test_loader.dataset)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    model = ConvNet().to(DEVICE)</span><br><span class="line">    optimizer = optim.Adam(model.parameters())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, EPOCHS + <span class="number">1</span>):</span><br><span class="line">        train(model, DEVICE, train_loader, optimizer, epoch)</span><br><span class="line">        test(model, DEVICE, test_loader)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#保存训练完成后的模型</span></span><br><span class="line">    torch.save(model, <span class="string">&#x27;./MNIST.pth&#x27;</span>)</span><br></pre></td></tr></table></figure>


<p>以下为测试代码，它将指定进行测试的图片通过opencv转化为灰度图，然后使用前面训练好的模型MNIST.pth和定义好的卷积神经网络进行识别<br>（opencv安装代码 ： <code>pip install python-opencv</code>）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> mnist <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> glob</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"><span class="keyword">from</span> torch.autograd <span class="keyword">import</span> Variable</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> datasets, transforms</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">from</span> skimage <span class="keyword">import</span> io,transform</span><br><span class="line"><span class="keyword">from</span> train <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ ==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    device = torch.device(<span class="string">&#x27;cuda&#x27;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&#x27;cpu&#x27;</span>)</span><br><span class="line">    model = torch.load(<span class="string">r&#x27;D:/学习/Python/手写数字识别/MNIST.pth&#x27;</span>) <span class="comment">#加载模型</span></span><br><span class="line">    model = model.to(device)</span><br><span class="line">    model.<span class="built_in">eval</span>()    <span class="comment">#把模型转为test模式</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    img = cv2.imread(<span class="string">&#x27;./numbers/number1.jpg&#x27;</span>, <span class="number">0</span>)  <span class="comment">#以灰度图的方式读取要预测的图片</span></span><br><span class="line">    img = cv2.resize(img, (<span class="number">28</span>, <span class="number">28</span>))</span><br><span class="line"></span><br><span class="line">    height,width=img.shape</span><br><span class="line">    dst=np.zeros((height,width),np.uint8)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(height):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(width):</span><br><span class="line">            dst[i,j]=<span class="number">255</span>-img[i,j]</span><br><span class="line"></span><br><span class="line">    img = dst</span><br><span class="line"></span><br><span class="line">    img=np.array(img).astype(np.float32)</span><br><span class="line">    img=np.expand_dims(img,<span class="number">0</span>)</span><br><span class="line">    img=np.expand_dims(img,<span class="number">0</span>)<span class="comment">#扩展后，为[1，1，28，28]</span></span><br><span class="line">    img=torch.from_numpy(img)</span><br><span class="line">    img = img.to(device)</span><br><span class="line">    output=model(Variable(img))</span><br><span class="line">    prob = F.softmax(output, dim=<span class="number">1</span>)</span><br><span class="line">    prob = Variable(prob)</span><br><span class="line">    prob = prob.cpu().numpy()  <span class="comment">#用GPU的数据训练的模型保存的参数都是gpu形式的，要显示则先要转回cpu，再转回numpy模式</span></span><br><span class="line">    <span class="built_in">print</span>(prob)  <span class="comment">#prob是10个分类的概率</span></span><br><span class="line">    pred = np.argmax(prob) <span class="comment">#选出概率最大的一个</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;识别结果为：&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(pred.item())</span><br></pre></td></tr></table></figure>

<h2 id="项目实现结果-分析"><a href="#项目实现结果-分析" class="headerlink" title="项目实现结果/分析"></a>项目实现结果/分析</h2><p>以下为最终实现的成果，发现手写数字的粗细程度会影响识别的精度，在一定粗细程度的笔触下写下的数字能够实现高精度的识别。</p>
<p>下图为一定粗细程度笔触写下的数字的实现结果，识别波动几乎为无，而且能够完美识别。<br><img src="https://makiori.oss-cn-beijing.aliyuncs.com/%E7%AC%AC%E4%B8%89%E7%AF%87%E5%8D%9A%E5%AE%A2/result.jpg?versionId=CAEQExiBgMCilqyw0hciIDZmM2M1YjFjZjE3NzRjMWM5NzNmMmU5MjhhN2U5ZTI2" alt="正确实现结果"></p>
<p>下图则为过细程度笔触写下的数字的实现结果，可发现识别波动范围比较大，而且出现了识别错误的情况。<br><img src="https://makiori.oss-cn-beijing.aliyuncs.com/%E7%AC%AC%E4%B8%89%E7%AF%87%E5%8D%9A%E5%AE%A2/result2.jpg?versionId=CAEQExiBgID0wMqw0hciIDVlZTY4NTAzNGM1MTQ0NGM4ZjM5ZDczOTY3NGRmMWI2" alt="错误实现结果"></p>
<p>（两图数字皆为博主所写）</p>
<p>要想了解问题为何发生，就得从源头开始查起。<br>MNIST数据集来自美国国家标准与技术研究所（National Institute of Standards and Technology），简称 （NIST）。<br>训练集由来自250个不同人手写的数字构成, 其中50%是高中学生, 50%来自人口普查局的工作人员。测试集也是同样比例的手写数字数据。<br>于是我通过以下代码得到了MNIST训练集和测试集中的手写数字图片。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> skimage <span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> torchvision.datasets.mnist <span class="keyword">as</span> mnist</span><br><span class="line"></span><br><span class="line">root=<span class="string">&quot;D:/学习/Python/手写数字识别/程序/data/MNIST/raw&quot;</span></span><br><span class="line">train_set = (</span><br><span class="line">    mnist.read_image_file(os.path.join(root, <span class="string">&#x27;train-images-idx3-ubyte&#x27;</span>)),</span><br><span class="line">    mnist.read_label_file(os.path.join(root, <span class="string">&#x27;train-labels-idx1-ubyte&#x27;</span>))</span><br><span class="line">        )</span><br><span class="line">test_set = (</span><br><span class="line">    mnist.read_image_file(os.path.join(root, <span class="string">&#x27;t10k-images-idx3-ubyte&#x27;</span>)),</span><br><span class="line">    mnist.read_label_file(os.path.join(root, <span class="string">&#x27;t10k-labels-idx1-ubyte&#x27;</span>))</span><br><span class="line">        )</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;training set :&quot;</span>,train_set[<span class="number">0</span>].size())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;test set :&quot;</span>,test_set[<span class="number">0</span>].size())</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convert_to_img</span>(<span class="params">train=<span class="literal">True</span></span>):</span></span><br><span class="line">    <span class="keyword">if</span>(train):</span><br><span class="line">        f=<span class="built_in">open</span>(root+<span class="string">&#x27;train.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">        data_path=root+<span class="string">&#x27;/train/&#x27;</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">not</span> os.path.exists(data_path)):</span><br><span class="line">            os.makedirs(data_path)</span><br><span class="line">        <span class="keyword">for</span> i, (img,label) <span class="keyword">in</span> <span class="built_in">enumerate</span>(<span class="built_in">zip</span>(train_set[<span class="number">0</span>],train_set[<span class="number">1</span>])):</span><br><span class="line">            img_path=data_path+<span class="built_in">str</span>(i)+<span class="string">&#x27;.jpg&#x27;</span></span><br><span class="line">            io.imsave(img_path,img.numpy())</span><br><span class="line">            f.write(img_path+<span class="string">&#x27; &#x27;</span>+<span class="built_in">str</span>(label)+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        f.close()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        f = <span class="built_in">open</span>(root + <span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">        data_path = root + <span class="string">&#x27;/test/&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">not</span> os.path.exists(data_path)):</span><br><span class="line">            os.makedirs(data_path)</span><br><span class="line">        <span class="keyword">for</span> i, (img,label) <span class="keyword">in</span> <span class="built_in">enumerate</span>(<span class="built_in">zip</span>(test_set[<span class="number">0</span>],test_set[<span class="number">1</span>])):</span><br><span class="line">            img_path = data_path+ <span class="built_in">str</span>(i) + <span class="string">&#x27;.jpg&#x27;</span></span><br><span class="line">            io.imsave(img_path, img.numpy())</span><br><span class="line">            f.write(img_path + <span class="string">&#x27; &#x27;</span> + <span class="built_in">str</span>(label) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        f.close()</span><br><span class="line"></span><br><span class="line">convert_to_img(<span class="literal">True</span>)<span class="comment">#转换训练集</span></span><br><span class="line">convert_to_img(<span class="literal">False</span>)<span class="comment">#转换测试集</span></span><br></pre></td></tr></table></figure>
<p>通过得到的MNIST训练集与测试集中的图片可以看出，虽然他们收集的手写数字皆为不同人所写，但字体的粗细程度几乎相同，或许是使用了同一种笔来进行数据的收集。<br>这才使得字体的粗细程度会影响识别精度的情况发生。<br>根据我的初步理解，要想解决这种情况，得丰富数据库，重新进行深度学习。</p>
<h1 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h1><p>通过这次的学习，进一步了解深度学习，也对卷积神经网络有了一个初步的认识。<br>这个暑假会开展对Python语言的学习，这里的代码算是一个预习了。</p>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>Python</tag>
        <tag>Pytorch</tag>
        <tag>mnist</tag>
        <tag>卷积神经网络</tag>
      </tags>
  </entry>
  <entry>
    <title>题库第一期</title>
    <url>/2021/05/30/question/%E9%A2%98%E5%BA%93%E7%AC%AC%E4%B8%80%E6%9C%9F/</url>
    <content><![CDATA[<h1 id="开头"><a href="#开头" class="headerlink" title="开头"></a>开头</h1><p>放一点学习过程中，觉得有意思的题目。</p>
<h1 id="进入题库理由"><a href="#进入题库理由" class="headerlink" title="进入题库理由"></a>进入题库理由</h1><p>在学习数据结构的过程中，接触到了栈与队列。<br>栈的特性是先入后出<br>而队列的特性是先入先出<br>明明看起来并不相干，但这二者却都能在通过一点算法的帮助下实现对方。</p>
<h1 id="如何用栈实现队列"><a href="#如何用栈实现队列" class="headerlink" title="如何用栈实现队列"></a>如何用栈实现队列</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Stack&lt;Integer&gt; a = <span class="keyword">new</span> Stack&lt;Integer&gt;();       </span><br><span class="line">    <span class="keyword">private</span> Stack&lt;Integer&gt; b = <span class="keyword">new</span> Stack&lt;Integer&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enQueue</span><span class="params">(<span class="keyword">int</span> element)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        a.push(element);</span><br><span class="line">        <span class="keyword">while</span>(!a.empty())</span><br><span class="line">        &#123;</span><br><span class="line">            b.push(a.pop());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">deQueue</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(b.empty())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(a.empty())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> b.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">top</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> b.peek();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">empty</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> b.empty();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        test t = <span class="keyword">new</span> test();</span><br><span class="line">        t.enQueue(<span class="number">1</span>);</span><br><span class="line">        t.enQueue(<span class="number">2</span>);</span><br><span class="line">        t.enQueue(<span class="number">3</span>);</span><br><span class="line">        t.enQueue(<span class="number">4</span>);</span><br><span class="line">        t.deQueue();</span><br><span class="line">        t.deQueue();</span><br><span class="line">        System.out.println(t.top());</span><br><span class="line">        System.out.println(t.empty());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="如何用队列实现栈"><a href="#如何用队列实现栈" class="headerlink" title="如何用队列实现栈"></a>如何用队列实现栈</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.Queue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test2</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Queue&lt;Integer&gt; a = <span class="keyword">new</span> LinkedList();</span><br><span class="line">    <span class="keyword">private</span> Queue&lt;Integer&gt; b = <span class="keyword">new</span> LinkedList();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> element)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        a.offer(element);</span><br><span class="line">        <span class="keyword">while</span>(!b.isEmpty())</span><br><span class="line">        &#123;</span><br><span class="line">            a.offer(b.poll());</span><br><span class="line">        &#125;</span><br><span class="line">        Queue temp = a;</span><br><span class="line">        a = b;</span><br><span class="line">        b = temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> b.poll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">top</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> b.peek();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">empty</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> b.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        test2 a = <span class="keyword">new</span> test2();</span><br><span class="line">        a.push(<span class="number">1</span>);</span><br><span class="line">        a.push(<span class="number">2</span>);</span><br><span class="line">        a.pop();</span><br><span class="line">        System.out.println(a.top());</span><br><span class="line">        System.out.println(a.empty());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h1><p>以上就是第一期的题库。<br>没错，我又在水博客了。</p>
]]></content>
      <categories>
        <category>Questions</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>题库</tag>
      </tags>
  </entry>
  <entry>
    <title>初识数据结构</title>
    <url>/2021/05/29/blog/%E5%88%9D%E8%AF%86%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<h1 id="写在开头"><a href="#写在开头" class="headerlink" title="写在开头"></a>写在开头</h1><p>之前说好要整理出一篇关于如何使用 “GitHub Pages + hexo” 创建博客目前没有一点进展，单纯是因为懒。<br>到六月份就得忙起来了，所以就更没有时间了<br>于是便安排在暑假里吧。由于在自学的过程中，认识到了数据结构。我对此起了些许兴趣，为了让自己对数据结构有所记忆，所以就想先整理出这篇“初识数据结构”的博客。<br><br></br></p>
<h1 id="接触数据结构"><a href="#接触数据结构" class="headerlink" title="接触数据结构"></a>接触数据结构</h1><p>在我开始学习算法的时候，教材首先就给我讲了数据结构的基础。<br><br><code>程序设计 = 数据结构 + 算法。</code><br>这充分地说明数据结构与算法的关联性。<br>我对它的基本理解是：数据结构是计算机存储数据的方式，<br>数据以怎样的组织，怎样的存储格式，被计算机所管理。<br><br></br></p>
<h1 id="数据结构分类"><a href="#数据结构分类" class="headerlink" title="数据结构分类"></a>数据结构分类</h1><p>数据结构的分类一般有两种维度，一种是根据数据结构的原理从它们的<code>逻辑结构</code>来区分，一种是从数据结构存储时的<code>物理结构</code>来区分。<br><br></br></p>
<h2 id="逻辑结构"><a href="#逻辑结构" class="headerlink" title="逻辑结构"></a>逻辑结构</h2><p>是指数据与数据之间的关系，通常可以分为线性结构和非线性结构。</p>
<h3 id="线性结构"><a href="#线性结构" class="headerlink" title="线性结构:"></a>线性结构:</h3><p>数据元素之间存在着一对一的关系。<br><br><code>例：顺序表，栈，队列</code></p>
<h3 id="非线性结构"><a href="#非线性结构" class="headerlink" title="非线性结构:"></a>非线性结构:</h3><p>数据元素之间存在着一对多或者多对多的关系。<br><br><code>例：树形结构，图形结构</code><br><br></br></p>
<h2 id="物理结构"><a href="#物理结构" class="headerlink" title="物理结构"></a>物理结构</h2><p>是指数据在计算机是以何种方式存储的，也就是所谓的映像。针对数据在存储器中的存储方法而言的，通常可以分为顺序存储和链式存储。</p>
<h3 id="顺序存储结构"><a href="#顺序存储结构" class="headerlink" title="顺序存储结构"></a>顺序存储结构</h3><p>顺序存储的数据是在一段连续的空间中，靠相对位置来表示元素之间的相互关系，像在一个小教室上课的同班同学靠前后座关系就能建立联系<br><br><code>例：数组</code></p>
<h3 id="链序存储结构"><a href="#链序存储结构" class="headerlink" title="链序存储结构"></a>链序存储结构</h3><p>链式存储的数据内存地址不一定是连续的，每一个节点上都有一个指针存储域，靠指针来建立元素之间的相互关系，像几个班级的同学同时上公选课时分散在一个大教室里，同一个班级的同学之间需要靠学号来建立联系。<br><code>例：链表</code></p>
<h1 id="八大数据结构"><a href="#八大数据结构" class="headerlink" title="八大数据结构"></a>八大数据结构</h1><p>Array（数组）<br>Stack（栈）<br>Linked List（链表）<br>Graph（图）<br>Hash（散列表）<br>Queue（队列）<br>Tree（树）<br>Heap（堆）<br><br></br></p>
<h1 id="Java中常用的数据结构"><a href="#Java中常用的数据结构" class="headerlink" title="Java中常用的数据结构"></a>Java中常用的数据结构</h1><p>Java 中常用的数据结构都在 java.util 包下，都是对 Collection 和 Map 两个顶级接口的实现类。<br><br>实现该接口的几种数据类型<br></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">蓝标是&#96;&#96;&#96;Map&#96;&#96;&#96; 接口和实现该接口的&#96;&#96;&#96;SortedMap&#96;&#96;&#96;&lt;br&gt;</span><br><span class="line">此外实现&#96;&#96;&#96; Map&#96;&#96;&#96; 接口的还有&#96;&#96;&#96;HashMap、TreeMap、Hashtable、SortedMap&#96;&#96;&#96;&lt;br&gt;</span><br><span class="line">另外还有 &#96;&#96;&#96;Collections、Arrays&#96;&#96;&#96;两个工具类。</span><br><span class="line"></span><br><span class="line"># 树形结构——红黑树</span><br><span class="line">&#96;&#96;&#96;红黑树&#96;&#96;&#96;是一种接近平衡的二叉搜索树，它能够保证任意一个节点左右子树的高度差不会超过较低子树的高度，也就是两棵子树的高度比值不会超过 2 倍。这样我们可以使搜索的时间复杂度更接近 O (logN)。为了保证树的平衡，我们需要在添加或删除元素的时候不断的调整树的结构，使每个节点的左右子树上的节点个数尽可能相等。</span><br><span class="line">&lt;br&gt;&lt;&#x2F;br&gt;</span><br><span class="line"></span><br><span class="line">## 红黑树的性质</span><br><span class="line">&gt; 1. 每个节点不是红色就是黑色。</span><br><span class="line">&gt; 2. 根节点永远是黑色。</span><br><span class="line">&gt; 3. 红色节点的子节点必须是黑色。</span><br><span class="line">&gt; 4. 任意一个节点到每个叶子节点的路径上都包含相同数量的黑色节点。</span><br><span class="line">&gt; 5. 每次添加新节点都默认为红色。</span><br><span class="line"></span><br><span class="line">&lt;br&gt;&lt;&#x2F;br&gt;</span><br><span class="line">## 红黑树调整的方式</span><br><span class="line">如果每次添加节点都设置为红色，当父节点已经是红色时，会违背上面的第 3 条性质，这时候我们需要按照一定的方法去调整树，调整的方式有三种：改变节点颜色、左旋和右旋。</span><br><span class="line">&lt;br&gt;&lt;&#x2F;br&gt;</span><br><span class="line"></span><br><span class="line">## 红黑树的插入操作</span><br><span class="line">插入元素会导致原本平衡的红黑树失去平衡，还会导致红黑树五大特性的不满足。因此插入后我们需要做调整，使其重新成为一个红黑树。</span><br><span class="line">&lt;br&gt;&lt;&#x2F;br&gt;</span><br><span class="line"></span><br><span class="line">### 第一步：插入</span><br><span class="line">要把元素插进红黑树的第一步就是要找到插入的位置。</span><br><span class="line">&gt; 1. 如果是空树，直接插入到跟节点。</span><br><span class="line">&gt; 2. 如果与当前节点的key值相等，则更新当前节点的value值。</span><br><span class="line">&gt; 3. 如果比当前节点的key值大，则继续寻找当前节点的右子节点。</span><br><span class="line">&gt; 4. 如果比当前节点的key值小，则继续寻找当前节点的左子节点</span><br><span class="line">&gt; 5. 如果当前节点为null（或nil节点），则插入在当前节点的父节点下。</span><br><span class="line"></span><br><span class="line">&lt;br&gt;&lt;&#x2F;br&gt;</span><br><span class="line"></span><br><span class="line">### 第二步：插入后重新调整至平衡状态</span><br><span class="line">以下为&#96;&#96;&#96;JDK1.8&#96;&#96;&#96;的HashMap中对红黑树的调整源码。</span><br><span class="line">&#96;&#96;&#96;java</span><br><span class="line">   static &lt;K,V&gt; TreeNode&lt;K,V&gt; balanceInsertion(TreeNode&lt;K,V&gt; root, TreeNode&lt;K,V&gt; x) &#123;</span><br><span class="line">       x.red &#x3D; true;</span><br><span class="line">       for (TreeNode&lt;K,V&gt; xp, xpp, xppl, xppr;;) &#123;</span><br><span class="line">           &#x2F;&#x2F;false条件：当前节点存在父节点</span><br><span class="line">           if ((xp &#x3D; x.parent) &#x3D;&#x3D; null) &#123;</span><br><span class="line">               &#x2F;&#x2F;父节点为空，当前节点是根节点，直接设置根节点为黑色后返回</span><br><span class="line">               x.red &#x3D; false;</span><br><span class="line">               return x;</span><br><span class="line">           &#125;</span><br><span class="line">           &#x2F;&#x2F;false条件：且父节点是红色，且存在爷爷节点</span><br><span class="line">           else if (!xp.red || (xpp &#x3D; xp.parent) &#x3D;&#x3D; null)</span><br><span class="line">               return root;</span><br><span class="line">           if (xp &#x3D;&#x3D; (xppl &#x3D; xpp.left)) &#123;</span><br><span class="line">               &#x2F;&#x2F;false条件：且叔叔节点为空，或者是黑色；</span><br><span class="line">               if ((xppr &#x3D; xpp.right) !&#x3D; null &amp;&amp; xppr.red) &#123;</span><br><span class="line">                   xppr.red &#x3D; false;</span><br><span class="line">                   xp.red &#x3D; false;</span><br><span class="line">                   xpp.red &#x3D; true;</span><br><span class="line">                   x &#x3D; xpp;</span><br><span class="line">               &#125;</span><br><span class="line">               else &#123;</span><br><span class="line">                   &#x2F;&#x2F;true条件：当前节点是其父节点的右子节点；</span><br><span class="line">                   if (x &#x3D;&#x3D; xp.right) &#123;</span><br><span class="line">                       &#x2F;&#x2F; 左旋父节点</span><br><span class="line">                       root &#x3D; rotateLeft(root, x &#x3D; xp);</span><br><span class="line">                       &#x2F;&#x2F; 爷爷节点不存在则结束，存在则将指针指向父节点</span><br><span class="line">                       xpp &#x3D; (xp &#x3D; x.parent) &#x3D;&#x3D; null ? null : xp.parent;</span><br><span class="line">                   &#125;</span><br><span class="line">                   &#x2F;&#x2F; true条件：父节点不为空</span><br><span class="line">                   if (xp !&#x3D; null) &#123;</span><br><span class="line">                       &#x2F;&#x2F; 父节点变为黑色</span><br><span class="line">                       xp.red &#x3D; false;</span><br><span class="line">                       &#x2F;&#x2F; true条件：祖父节点不为空</span><br><span class="line">                       if (xpp !&#x3D; null) &#123;</span><br><span class="line">                           &#x2F;&#x2F; 祖父节点变为红色</span><br><span class="line">                           xpp.red &#x3D; true;</span><br><span class="line">                           &#x2F;&#x2F; 右旋祖父节点</span><br><span class="line">                           root &#x3D; rotateRight(root, xpp);</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           else &#123;</span><br><span class="line">               &#x2F;&#x2F;false条件：且叔叔节点为空，或者是黑色；</span><br><span class="line">               if (xppl !&#x3D; null &amp;&amp; xppl.red) &#123;</span><br><span class="line">                   &#x2F;&#x2F; 当前节点的父节点以及左叔父节点都是红色 则颜色变为黑色</span><br><span class="line">                   xppl.red &#x3D; false;</span><br><span class="line">                   xp.red &#x3D; false;</span><br><span class="line">                   &#x2F;&#x2F; 黑节点的父节点必须红色</span><br><span class="line">                   xpp.red &#x3D; true;</span><br><span class="line">                   x &#x3D; xpp;</span><br><span class="line">               &#125;</span><br><span class="line">               else &#123;</span><br><span class="line">                   &#x2F;&#x2F;true条件：当前节点是其父节点的左子节点；</span><br><span class="line">                   if (x &#x3D;&#x3D; xp.left) &#123;</span><br><span class="line">                       &#x2F;&#x2F; 右旋父节点</span><br><span class="line">                       root &#x3D; rotateRight(root, x &#x3D; xp);</span><br><span class="line">                       &#x2F;&#x2F; 指针指向父节点</span><br><span class="line">                       xpp &#x3D; (xp &#x3D; x.parent) &#x3D;&#x3D; null ? null : xp.parent;</span><br><span class="line">                   &#125;</span><br><span class="line">                   &#x2F;&#x2F; true条件：父节点不为空</span><br><span class="line">                   if (xp !&#x3D; null) &#123;</span><br><span class="line">                       &#x2F;&#x2F; 父节点变为黑色</span><br><span class="line">                       xp.red &#x3D; false;</span><br><span class="line">                       &#x2F;&#x2F; true条件：祖父节点不为空</span><br><span class="line">                       if (xpp !&#x3D; null) &#123;</span><br><span class="line">                           &#x2F;&#x2F; 祖父节点变为红色</span><br><span class="line">                           xpp.red &#x3D; true;</span><br><span class="line">                           &#x2F;&#x2F;  右旋祖父节点</span><br><span class="line">                           root &#x3D; rotateLeft(root, xpp);</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><br></br></p>
<h2 id="红黑树的删除操作"><a href="#红黑树的删除操作" class="headerlink" title="红黑树的删除操作"></a>红黑树的删除操作</h2><p>删除操作可能触发的情况分为有子节点和无子节点，没有子节点的情况非常简单，直接删除后执行自平衡即可。有子节点的时候我们要先找到替换节点，如果只有一个子节点，这个节点就是替换节点；如果有两个子节点，要找到左子树的最大节点或右子树的最小节点作为替换节点。</p>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>2021年的五一假期</title>
    <url>/2021/05/04/blog/2021%E5%B9%B4%E7%9A%84%E4%BA%94%E4%B8%80%E5%81%87%E6%9C%9F/</url>
    <content><![CDATA[<h1 id="开头"><a href="#开头" class="headerlink" title="开头"></a>开头</h1><p>今年的五一假期有5天，虽然前后都要调课，但是由于课本来就不是很多，所以没所谓。<br>反正对处于学习疲倦期的我来说，可以回家的小长假真的是太感激了。</p>
<h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1><p>十年炼金无人问,一朝肉腿天下知。我就是从莱莎这代知晓并且入坑炼金工房系列的人。<br>说来惭愧，写这篇博客的时候还没有通关，因为买了pc版后才发觉这游戏适合用ns玩。<br>于是这时刚好遇上了《不可思议的炼金术士合集》DX版发售的消息，再加上曾经微博上的互关，五风老师的安利。<br>趁这次假期，我就去入手了，苏菲真可爱！（目前进度为：苏菲的炼金工房 ～不可思议书的炼金术士～ DX）<br>如果有时间的话，会写一下游戏感想。（挖个坑，以后会在博客上写一些对玩过的游戏的感想）<br><img src="https://makiori.oss-cn-beijing.aliyuncs.com/%E4%BA%94%E4%B8%80%E5%81%87%E6%9C%9F/5562DFAA95D46B7B0959CD02AFB25040.jpg?versionId=CAEQERiBgMCB9tHeyRciIDNjZGViOWE3YTkwNDRlZWNhYzYwOGYyYzE5NDczNzQy" alt="是我的新游戏哦"></p>
<h1 id="吃的（别问为什么专门弄一个标题）"><a href="#吃的（别问为什么专门弄一个标题）" class="headerlink" title="吃的（别问为什么专门弄一个标题）"></a>吃的（别问为什么专门弄一个标题）</h1><p>在华南秋叶原买游戏时，偶然发现的店，味道不错。<br><img src="https://makiori.oss-cn-beijing.aliyuncs.com/%E4%BA%94%E4%B8%80%E5%81%87%E6%9C%9F/435819689BB3F21AEE308DE013709219.jpg?versionId=CAEQERiBgICC9tHeyRciIGI3NjMzNWNkZDkwMDQ5ODU4MGJjNjY4NDZiMDhkNDU4" alt="章鱼烧"></p>
<p>跟好久没见的网络群友，一起去漫展玩了一天，晚餐自然就是经典的萨莉亚了。<br><img src="https://makiori.oss-cn-beijing.aliyuncs.com/%E4%BA%94%E4%B8%80%E5%81%87%E6%9C%9F/5671C8145163EC6946CFA5DC0B1A340C.jpg?versionId=CAEQERiBgICJ9tHeyRciIDQ5MGViNjRlYzMzMjQ4M2RhYWY1ZmM2ODM3Y2E4ZTY3" alt="萨"></p>
<h1 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h1><p>好好地休息了一下，接下来得调整好自己，迎接后面的学习。</p>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>日常</tag>
      </tags>
  </entry>
</search>
