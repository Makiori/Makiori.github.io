<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Makiori&#39;s blog</title>
  
  <subtitle>运行异常</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-09-12T02:17:11.752Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>牧尾伊織</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>角落里的魔女（1）</title>
    <link href="http://example.com/2021/09/12/novel/%E8%A7%92%E8%90%BD%E9%87%8C%E7%9A%84%E9%AD%94%E5%A5%B3/%E8%A7%92%E8%90%BD%E9%87%8C%E7%9A%84%E9%AD%94%E5%A5%B3%EF%BC%881%EF%BC%89/"/>
    <id>http://example.com/2021/09/12/novel/%E8%A7%92%E8%90%BD%E9%87%8C%E7%9A%84%E9%AD%94%E5%A5%B3/%E8%A7%92%E8%90%BD%E9%87%8C%E7%9A%84%E9%AD%94%E5%A5%B3%EF%BC%881%EF%BC%89/</id>
    <published>2021-09-12T02:00:00.000Z</published>
    <updated>2021-09-12T02:17:11.752Z</updated>
    
    <content type="html"><![CDATA[<p>“所以说，小姐姐是魔女啰？” 在我面前的女孩子，双手不知所措地乱动着，看上去有点兴奋又有点紧张。<br>毕竟就在刚刚，我做了件一般人做不太到的稀奇事情嘛……我从茶几上拿起了自己的茶杯，抿了一小口，里面刚冲泡好的茶水有点小烫，先吹一吹就好了。</p><p>大概在半个小时前，我和往常一样，飞在半空中整理着店里的书籍。不用把梯子搬来搬去，会魔法就是这点方便，虽然好像我也可以用魔法搬运梯子就是了。我坐着的也不是惯例的木扫帚，而是最近新购入的扫地机器人，圆圆的平板坐着比扫帚那单根木棍要舒服不少，要是能加个垫子就更好了。</p><p>而就当我开始专心的时候，门口用来提醒我客人进门的铃铛却响了起来。明明记得门口挂着的是“休息中”的牌子才对啊。我还没反应过来，紧接而来地传来了女孩子大叫的声音。老实说，我对突然出现的事物都不擅长，比如说我原来并不害怕小强，但如果它突然出现在意想不到的地方的话，我还是能被它吓一大跳。于是就这么被吓到的我，一下子失去了重心，从扫地机器人上面摔了下来。</p><p>“小姐姐你没事吧？！” 摔得我屁股疼，眼前也是黑漆漆的一片，但我确切地听到了这个声音，它的主人好像是个年轻的女孩子。接下来的事情，就是她扶我起身，坐到店里供客人看书的椅子上。然后我用魔法治疗了一下自己，让疼痛消散之后，去泡了一壶茶，与她面对面地坐在了一起。</p><p>回到现在。在我面前的，是一个穿着初中校服的女孩子，头发扎成了马尾辫，头在动的时候马尾也会跟着一甩一甩的，莫名感觉到可爱。脸也是充满稚气，比起初中生更像是小学生的样子。要说我怎么知道那是初中校服的，这是因为几年前我也在那所初中就读。</p><p>听着她从“你是怎么飞在空中的？”，到“原来你会魔法吗？好厉害！”，再到“所以说，小姐姐是魔女啰？”；老实说，我一直都没有掩藏自己是魔女的事情，生活上常联络的熟人也大概全都知道自己的这个身份吧，不过大家也还是挺接纳我的，也有可能是沾了奶奶的光吧，具体情况就留到下次再讲。只要还不到极端情况，我就不需要去担心身份的问题。不过要是我想的话，对方可能连提问的机会也没有吧？于是我对她的提问都一一作出了实际的回答。</p><p>她的眼睛一亮，紧张的心情似乎都消失不见了，兴奋到双手都紧握成了拳头。<br>“我，一直希望自己能找到这个世界里的不可思议啊。”<br>“不可思议？”<br>“没错，现在小姐姐你就是这个不可思议哦！”<br>“嗯？”<br>“因为小姐姐你可是魔女啊。” 我面前这个穿着初中校服的女孩子，激动地说着这番话。<br>“但这个世界里不只有我一个魔女哦…在很久很久之前，这个世界甚至能到处都见到魔女呢。” 我苦笑着说道。<br>“但我相信，小姐姐你会是一位独一无二的魔女，这个世界的不可思议哦！” 她突然将身子从桌子那头伸过来，紧握着我随意摆在桌上的的双手。<br>“所以你提到的不可思议究竟是什么啊？” 我有点被吓到了，她的力气虽然不大，但我怎么都甩不开她的手，还有我已经跟不上这孩子的想法了。感觉这样闹腾下去，会出一身的汗，于是我偷偷地调低了几度空调。在这之后，她开始一边不断提问，一边拿出来笔记本来做起了笔记，不过就像是夹带了私货一般，问我姓名年龄身高体重以及电话号码就算了，还要问我的三围是什么意思哦… 整个过程当中，唯一不变的就是她那眼中的星星，一直都在闪闪发光。</p><p>人身调查了我大半天，她终于提出了“该回家了”的说法，在向我表示感谢之后，便起身向门口走去。<br>“下次来的时候，小姐姐能给我讲讲关于魔女的故事吗？”<br>“可以是可以…” 但是流传下来关于魔女的故事都感觉挺没意思的啊，也可能是因为都听到耳朵生茧了吧。<br>“那么就下次见咯。” 然后她推开门，回头向我挥了挥手，接着就走到了门外。<br>我看着她出门，当铃铛的声音消失时，书店里又重回了寂静。我继续坐了一会，直到杯中已经凉透的茶水喝完，才起身继续完成今天的工作。由于剩下的书都是摆在下层的，所以我既不用梯子，也用不着用飞的了。一切工作都做完之后，我无所事事地坐回在柜台里，用于午休的躺椅上面，手里还不断地转动着一只笔，试图消磨时间。</p><p>门口的铃铛再次响起，这次我可没再被吓着了，而这次走进来的人，不是什么客人，而是我熟悉到不能再熟悉的人——我的同居人，名字是“云”，我一般叫她云云。</p><p>“来客人了？今天不是休息吗？” 她肩膀上挂着的环保袋里装得满满的。<br>“云云~晚饭吃什么？”<br>“我问题的回答呢？算了，今晚吃糖醋排骨哦。”<br>“好耶！” 我欢呼道。<br>“唉，这个是什么？” 我看着她弯下腰，捡起了我之前没有都注意到的东西。<br>“这不是学生证吗？而且还是我们以前那个中学的…” 她走过来，然后把东西递给了我。<br>不久还在面前的女孩子如今出现在相片里面，样子没怎么变化，看来是最近才拍的照片，难道说是初一刚入学吗。<br>“不可思议的联系吗…” 我自言自语道。<br>“什么？” 云云不解道。<br>“没什么，我找个时间去一趟学校吧。” 我将证件随手一放，从柜台后面走出来，打算帮云云提她的袋子。<br>“说起来怎么那么冷啊，空调你开多少度了？”<br>“啊…18度？”<br>“我不是说过只能开26度吗？你是不知道电费有多贵吗？……”<br>“…” 预感到云云的训话会很长的我，像被训斥的孩子无法找到反驳的理由一般，只好加快脚步默默带着手中的重物们，逃进了书店的后屋里面。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;“所以说，小姐姐是魔女啰？” 在我面前的女孩子，双手不知所措地乱动着，看上去有点兴奋又有点紧张。&lt;br&gt;毕竟就在刚刚，我做了件一般人做不太到的稀奇事情嘛……我从茶几上拿起了自己的茶杯，抿了一小口，里面刚冲泡好的茶水有点小烫，先吹一吹就好了。&lt;/p&gt;
&lt;p&gt;大概在半个小时前，</summary>
      
    
    
    
    <category term="novel" scheme="http://example.com/categories/novel/"/>
    
    
    <category term="小说" scheme="http://example.com/tags/%E5%B0%8F%E8%AF%B4/"/>
    
  </entry>
  
  <entry>
    <title>九月伊始</title>
    <link href="http://example.com/2021/09/04/blog/%E4%B9%9D%E6%9C%88%E4%BC%8A%E5%A7%8B/"/>
    <id>http://example.com/2021/09/04/blog/%E4%B9%9D%E6%9C%88%E4%BC%8A%E5%A7%8B/</id>
    <published>2021-09-04T01:13:01.000Z</published>
    <updated>2021-09-05T01:13:06.583Z</updated>
    
    <content type="html"><![CDATA[<h1 id="暑假总结"><a href="#暑假总结" class="headerlink" title="暑假总结"></a>暑假总结</h1><p>暑假结尾就跟泄了气的皮球一样，既没有学习，也没有沉迷在游戏里面。<br>做翻译的心思也少了许多，自制字幕视频出了三期之后就变回了搬运。<br>不过有看到其他人在进行字幕制作，找个借口就是没必要重复造轮子了（</p><h1 id="近期状况"><a href="#近期状况" class="headerlink" title="近期状况"></a>近期状况</h1><p>回校之后，在舍友的带动下开始了高强度的学习。<br>目前在学习如何用Spring Cloud + Vue 做一个前后端分离的项目。<br>是<a href="https://blog.refrigetwo.moe/">老胡</a>和他朋友推荐给我的慕课网课程。<br>本来是打算暑假进行的，由于资金问题而拖到了开学，实在是有点拖自己进度了。<br>做不到和舍友一样的高强度学习，所以我在自己的日程安排表里加入了翻译工作的一项。<br>虽然只是在做老胡的私人翻译，但是能听到一些中文上的建议，可以给自己的短缺做一些填补。</p><h1 id="宇宙现状"><a href="#宇宙现状" class="headerlink" title="宇宙现状"></a>宇宙现状</h1><p>结果暑假期间也没能写出一点东西，只能说“慢慢来吧”。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;暑假总结&quot;&gt;&lt;a href=&quot;#暑假总结&quot; class=&quot;headerlink&quot; title=&quot;暑假总结&quot;&gt;&lt;/a&gt;暑假总结&lt;/h1&gt;&lt;p&gt;暑假结尾就跟泄了气的皮球一样，既没有学习，也没有沉迷在游戏里面。&lt;br&gt;做翻译的心思也少了许多，自制字幕视频出了三期之后就变</summary>
      
    
    
    
    <category term="blog" scheme="http://example.com/categories/blog/"/>
    
    
    <category term="日常" scheme="http://example.com/tags/%E6%97%A5%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>八月的if</title>
    <link href="http://example.com/2021/08/04/blog/%E5%85%AB%E6%9C%88%E7%9A%84if/"/>
    <id>http://example.com/2021/08/04/blog/%E5%85%AB%E6%9C%88%E7%9A%84if/</id>
    <published>2021-08-03T19:27:58.000Z</published>
    <updated>2021-09-04T01:16:15.156Z</updated>
    
    <content type="html"><![CDATA[<h1 id="近况"><a href="#近况" class="headerlink" title="近况"></a>近况</h1><p>嗯，由于前年出去兼职对自己造成的影响。<br>今年的暑假依旧是选择在家度过，但其实说到底还是因为懒。<br>蹲家挺好的，在家里有空调，有网络，还有零食。<br>只要最低的消耗就能好好活下去。<br>不过，虽然现在可以暂时逃避社会，但是我清楚这样的日子只会越来越少。<br>九月份开始就是大二学生了，要忙的事情会更加多。<br>未来还有实习、考专升本等一系列事情在等着我。<br>实在是没有时间，再过像这样的日子了。</p><h1 id="关于牧尾宇宙"><a href="#关于牧尾宇宙" class="headerlink" title="关于牧尾宇宙"></a>关于牧尾宇宙</h1><p>如果有看过我博客的朋友，会发现宇宙已经开始更新了。<br>《牧尾同学记事簿》第一话。<br>500字短的不能再短的小文章，讲述的是拉开宇宙序幕的小故事。</p><p>主人公，相信大家都不陌生了吧。</p><p><img src="https://makiori.oss-cn-beijing.aliyuncs.com/%E7%89%A7%E5%B0%BE%E4%BC%8A%E7%B9%94/%E7%B4%A0%E6%9D%90%E7%89%88%E6%9C%AC.jpg?versionId=CAEQExiBgMCEwdrD0xciIGM2MWIxYmIxZTIzYzQxMDJhZGM2OThkMjlhMmZkMDMy" alt="牧尾伊織"></p><p>《牧尾同学记事簿》以后会继续以牧尾伊織为主人公，描述自己在创作时的各种奇怪想法。<br>敬请期待。</p><h1 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h1><p>比起上一个假期的彻底没有学习，这个学期算是稍微进步了一点，不知道为什么能够坚持刷题。<br>最近在看的番剧，比较在意的是《白砂的水族馆》<br>是一个发生在水族馆里，主题为善待动物，友好待人的美好故事。<br>其中一位主角的声优伊藤美来小姐，也去体验水族馆的工作了。<br>以此为契机，我重新开始了搬运与翻译的工作。<br>加上在学习如何写项目<br>另外还想尝试一下制作视频。<br>这个月应该会很忙，但我想暑假变得充实并不是什么坏事呢。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;近况&quot;&gt;&lt;a href=&quot;#近况&quot; class=&quot;headerlink&quot; title=&quot;近况&quot;&gt;&lt;/a&gt;近况&lt;/h1&gt;&lt;p&gt;嗯，由于前年出去兼职对自己造成的影响。&lt;br&gt;今年的暑假依旧是选择在家度过，但其实说到底还是因为懒。&lt;br&gt;蹲家挺好的，在家里有空调，有网络</summary>
      
    
    
    
    <category term="blog" scheme="http://example.com/categories/blog/"/>
    
    
    <category term="日常" scheme="http://example.com/tags/%E6%97%A5%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>牧尾同学记事簿（1）</title>
    <link href="http://example.com/2021/07/21/novel/%E7%89%A7%E5%B0%BE%E5%90%8C%E5%AD%A6%E8%AE%B0%E4%BA%8B%E7%B0%BF/%E7%89%A7%E5%B0%BE%E5%90%8C%E5%AD%A6%E8%AE%B0%E4%BA%8B%E7%B0%BF%EF%BC%881%EF%BC%89/"/>
    <id>http://example.com/2021/07/21/novel/%E7%89%A7%E5%B0%BE%E5%90%8C%E5%AD%A6%E8%AE%B0%E4%BA%8B%E7%B0%BF/%E7%89%A7%E5%B0%BE%E5%90%8C%E5%AD%A6%E8%AE%B0%E4%BA%8B%E7%B0%BF%EF%BC%881%EF%BC%89/</id>
    <published>2021-07-21T13:31:58.000Z</published>
    <updated>2021-07-28T08:10:41.620Z</updated>
    
    <content type="html"><![CDATA[<p>暑假的某一天。</p><p>我保持着一直以来的放假习惯。</p><p>盘着双腿坐在椅子上，拿着游戏手柄，目光紧盯着电脑屏幕。</p><p>上边是调了十八度的空调呼呼吹出的冷风。</p><p>下边则是电脑机箱在不断地让我感受它温热的气息。</p><p>音响开着的声音并不大，所以我才能够听清楚她突然之间的发言。</p><p>“我想创造一个属于自己的宇宙。”</p><p>来自一旁正仰着面躺在我床上的女孩</p><p>她望着天花板，像是在思考些什么。</p><p>“哈？”我发出了疑惑的声音。</p><p>握着游戏手柄的手稍微停了下来，目光也望向了她。</p><p>“创造……宇宙？”我把耳朵确切听到的内容重复了一遍。</p><p>她像是突然起了兴致，猛地坐了起来。</p><p>“呀，你看啊，把可爱的女孩子们，放在同一个宇宙里。”</p><p>“嗯……嗯……”我眯起眼睛，尝试将她的话语输入脑中。</p><p>“让她们各自有各自的故事，又能够出现交集。”</p><p>“嗯……嗯……”</p><p>“这不是很棒的事情吗？”</p><p>她看向我的眼睛正在闪闪发光。</p><p>“所以，你想怎么做？” 我把脸向着电脑屏幕转了回去。</p><p>老实说我不太懂，但我大受震撼。</p><p>只能一步一步顺着她走了吧。</p><p>“怎么做……我不是说了吗？要创造一个属于自己的宇宙！”</p><p>“……我就是在问你要怎么创造啊……”我无奈地再次问道。</p><p>“呼<del>呼</del>呼~”她笑了笑。</p><p>这笑声感觉令我的汗毛竖了起来。</p><p>“那当然是在梦中啦，晚安！”</p><p>奇怪的答案。</p><p>然后她就躺回了下去，这次还顺手盖上了我的被子。</p><p>本想说她一下，但感觉不会有啥结果，只是白费口水而已</p><p>于是就算了。</p><p>“好冷。” 她打了一个喷嚏。</p><p>“是谁把空调开那么低的。” 我接过话茬。</p><p>“是谁啊？” 她抱怨的声音。</p><p>“是你啊。” 我冷淡的声音。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;暑假的某一天。&lt;/p&gt;
&lt;p&gt;我保持着一直以来的放假习惯。&lt;/p&gt;
&lt;p&gt;盘着双腿坐在椅子上，拿着游戏手柄，目光紧盯着电脑屏幕。&lt;/p&gt;
&lt;p&gt;上边是调了十八度的空调呼呼吹出的冷风。&lt;/p&gt;
&lt;p&gt;下边则是电脑机箱在不断地让我感受它温热的气息。&lt;/p&gt;
&lt;p&gt;音响开着的声音</summary>
      
    
    
    
    <category term="novel" scheme="http://example.com/categories/novel/"/>
    
    
    <category term="小说" scheme="http://example.com/tags/%E5%B0%8F%E8%AF%B4/"/>
    
  </entry>
  
  <entry>
    <title>使用Pytorch实现mnist手写数字识别</title>
    <link href="http://example.com/2021/06/27/blog/%E4%BD%BF%E7%94%A8Pytorch%E5%AE%9E%E7%8E%B0mnist%E6%89%8B%E5%86%99%E6%95%B0%E5%AD%97%E8%AF%86%E5%88%AB/"/>
    <id>http://example.com/2021/06/27/blog/%E4%BD%BF%E7%94%A8Pytorch%E5%AE%9E%E7%8E%B0mnist%E6%89%8B%E5%86%99%E6%95%B0%E5%AD%97%E8%AF%86%E5%88%AB/</id>
    <published>2021-06-27T06:03:57.000Z</published>
    <updated>2021-09-05T01:10:09.868Z</updated>
    
    <content type="html"><![CDATA[<h1 id="写在开头"><a href="#写在开头" class="headerlink" title="写在开头"></a>写在开头</h1><p>我其实根本就不想写这方面内容的文章，不过既然人工智能课的结课作业要写项目文档，我就顺便更一下博客而已。（其实说到底就是逮到机会想水博客而已。）没有学过Python，代码来源自网络，整理一下也能方便日后的自己拿出来学习。<br>下面开始就是作业了。</p><h1 id="基于Pytorch的MNIST手写数字识别"><a href="#基于Pytorch的MNIST手写数字识别" class="headerlink" title="基于Pytorch的MNIST手写数字识别"></a>基于Pytorch的MNIST手写数字识别</h1><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>数字识别（Digit Recognition）是计算机从纸质文档,照片,或其他来源接收和理解并识别可读的数字的能力。<br>根据数字来源的产生方式的不同,目前数字识别问题可以区分为手写体数字识别,印刷体数字识别,光学数字识别,自然场景下的数字识别等,具有很大的实际应用价值。目前比较受到关注的问题主要是手写体数字识别,由于其具有MNIST这种大型标准易用的成熟数据集,简单的0-9数字识别已经被作为计算机视觉领域的入门问题。本文通过介绍手写数字识别的应用,并指出传统研究方法及其不足之处;然后引入深度学习的概念,以卷积神经网络为例,详细介绍卷积神经网络的关键技术特点。最后通过一个实例说明卷积神经网络在手写数字识别方面的应用。（此段来源自网络）</p><h2 id="项目背景概述-介绍"><a href="#项目背景概述-介绍" class="headerlink" title="项目背景概述/介绍"></a>项目背景概述/介绍</h2><p>MNIST手写数字识别，是一个比较简单的入门项目，就相当于我们在学习编程语言时最开始的Hello World，可以让我们快速地了解构建神经网络的大致过程。<br>这次我们选择使用PyTorch的神经网络框架。PyTorch是torch的python版本，它是由Facebook开源的神经网络框架。<br>Torch 是一个经典的对多维矩阵数据进行操作的张量(tensor)库，在机器学习和其他数学密集型应用有广泛应用。与Tensorflow的静态计算图不同，pytorch的计算图是动态的，可以根据计算需要实时改变计算图。但由于Torch语言采用 Lua，导致在国内一直很小众，并逐渐被支持 Python 的 Tensorflow 抢走用户。作为经典机器学习库 Torch 的端口，PyTorch 为 Python 语言使用者提供了舒适的写代码选择。PyTorch的设计追求最少的封装，尽量避免重复造轮子。不像 TensorFlow 中充斥着session、graph、operation、name_scope、variable、tensor、layer等全新的概念，PyTorch 的设计遵循tensor→variable(autograd)→nn.Module 三个由低到高的抽象层次，分别代表高维数组（张量）、自动求导（变量）和神经网络（层/模块），而且这三个抽象之间联系紧密，可以同时进行修改和操作。 简洁的设计带来的另外一个好处就是代码易于理解。PyTorch的源码只有TensorFlow的十分之一左右，更少的抽象、更直观的设计使得PyTorch的源码十分易于阅读。<br>总的来说，选择Pytorch，是因为它能够在短时间内建立结果，适用于小规模的项目。（其实最主要的是因为老师让我们用Pytorch）</p><h2 id="项目实现原理"><a href="#项目实现原理" class="headerlink" title="项目实现原理"></a>项目实现原理</h2><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><p>安装PyTorch -&gt; 安装mnist -&gt; 通过代码下载MNIST训练集 -&gt; 通过代码定义卷积神经网络 -&gt; 通过代码使用MNIST训练集中的训练库和测试库训练出一个模型MNIST.pth -&gt; 通过模型与定义的卷积神经网络进行识别</p><h3 id="PyTorch安装"><a href="#PyTorch安装" class="headerlink" title="PyTorch安装"></a>PyTorch安装</h3><p>根据自己计算机的实际情况在官网 <a href="https://pytorch.org/">https://pytorch.org</a> 安装相应的PyTorch<br>详细安装教程：<a href="https://blog.csdn.net/learningpawn/article/details/106531514">https://blog.csdn.net/learningpawn/article/details/106531514</a></p><h3 id="安装Python的mnist库"><a href="#安装Python的mnist库" class="headerlink" title="安装Python的mnist库"></a>安装Python的mnist库</h3><p>打开cmd，输入<code>pip install mnist</code><br>可以通过 <code>pip list</code> 检查自己是否安装相应的库</p><h3 id="通过代码进行的操作"><a href="#通过代码进行的操作" class="headerlink" title="通过代码进行的操作"></a>通过代码进行的操作</h3><p>通过代码下载MNIST的训练集和测试集，同时定义卷积神经网络，然后训练出相应的模型，并将其保存，以下为执行代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"><span class="keyword">import</span> torch.optim <span class="keyword">as</span> optim</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> datasets, transforms</span><br><span class="line">torch.__version__</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">BATCH_SIZE=<span class="number">512</span> <span class="comment">#大概需要2G的显存</span></span><br><span class="line">EPOCHS=<span class="number">20</span> <span class="comment"># 总共训练批次</span></span><br><span class="line">DEVICE = torch.device(<span class="string">&quot;cuda&quot;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&quot;cpu&quot;</span>) <span class="comment"># 让torch判断是否使用GPU，建议使用GPU环境，因为会快很多</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#下载训练集</span></span><br><span class="line">train_loader = torch.utils.data.DataLoader(</span><br><span class="line">        datasets.MNIST(<span class="string">&#x27;data&#x27;</span>, train=<span class="literal">True</span>, download=<span class="literal">True</span>, </span><br><span class="line">                       transform=transforms.Compose([</span><br><span class="line">                           transforms.ToTensor(),</span><br><span class="line">                           transforms.Normalize((<span class="number">0.1307</span>,), (<span class="number">0.3081</span>,))</span><br><span class="line">                       ])),</span><br><span class="line">        batch_size=BATCH_SIZE, shuffle=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#下载测试集</span></span><br><span class="line">test_loader = torch.utils.data.DataLoader(</span><br><span class="line">        datasets.MNIST(<span class="string">&#x27;data&#x27;</span>, train=<span class="literal">False</span>, transform=transforms.Compose([</span><br><span class="line">                           transforms.ToTensor(),</span><br><span class="line">                           transforms.Normalize((<span class="number">0.1307</span>,), (<span class="number">0.3081</span>,))</span><br><span class="line">                       ])),</span><br><span class="line">        batch_size=BATCH_SIZE, shuffle=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义卷积神经网络</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConvNet</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="comment"># batch*1*28*28（每次会送入batch个样本，输入通道数1（黑白图像），图像分辨率是28x28）</span></span><br><span class="line">        <span class="comment"># 下面的卷积层Conv2d的第一个参数指输入通道数，第二个参数指输出通道数，第三个参数指卷积核的大小</span></span><br><span class="line">        self.conv1 = nn.Conv2d(<span class="number">1</span>, <span class="number">10</span>, <span class="number">5</span>) <span class="comment"># 输入通道数1，输出通道数10，核的大小5</span></span><br><span class="line">        self.conv2 = nn.Conv2d(<span class="number">10</span>, <span class="number">20</span>, <span class="number">3</span>) <span class="comment"># 输入通道数10，输出通道数20，核的大小3</span></span><br><span class="line">        <span class="comment"># 下面的全连接层Linear的第一个参数指输入通道数，第二个参数指输出通道数</span></span><br><span class="line">        self.fc1 = nn.Linear(<span class="number">20</span>*<span class="number">10</span>*<span class="number">10</span>, <span class="number">500</span>) <span class="comment"># 输入通道数是2000，输出通道数是500</span></span><br><span class="line">        self.fc2 = nn.Linear(<span class="number">500</span>, <span class="number">10</span>) <span class="comment"># 输入通道数是500，输出通道数是10，即10分类</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self,x</span>):</span></span><br><span class="line">        in_size = x.size(<span class="number">0</span>) <span class="comment"># 在本例中in_size=512，也就是BATCH_SIZE的值。输入的x可以看成是512*1*28*28的张量。</span></span><br><span class="line">        out = self.conv1(x) <span class="comment"># batch*1*28*28 -&gt; batch*10*24*24（28x28的图像经过一次核为5x5的卷积，输出变为24x24）</span></span><br><span class="line">        out = F.relu(out) <span class="comment"># batch*10*24*24（激活函数ReLU不改变形状））</span></span><br><span class="line">        out = F.max_pool2d(out, <span class="number">2</span>, <span class="number">2</span>) <span class="comment"># batch*10*24*24 -&gt; batch*10*12*12（2*2的池化层会减半）</span></span><br><span class="line">        out = self.conv2(out) <span class="comment"># batch*10*12*12 -&gt; batch*20*10*10（再卷积一次，核的大小是3）</span></span><br><span class="line">        out = F.relu(out) <span class="comment"># batch*20*10*10</span></span><br><span class="line">        out = out.view(in_size, -<span class="number">1</span>) <span class="comment"># batch*20*10*10 -&gt; batch*2000（out的第二维是-1，说明是自动推算，本例中第二维是20*10*10）</span></span><br><span class="line">        out = self.fc1(out) <span class="comment"># batch*2000 -&gt; batch*500</span></span><br><span class="line">        out = F.relu(out) <span class="comment"># batch*500</span></span><br><span class="line">        out = self.fc2(out) <span class="comment"># batch*500 -&gt; batch*10</span></span><br><span class="line">        out = F.log_softmax(out, dim=<span class="number">1</span>) <span class="comment"># 计算log(softmax(x))</span></span><br><span class="line">        <span class="keyword">return</span> out</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#训练</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train</span>(<span class="params">model, device, train_loader, optimizer, epoch</span>):</span></span><br><span class="line">    model.train()</span><br><span class="line">    <span class="keyword">for</span> batch_idx, (data, target) <span class="keyword">in</span> <span class="built_in">enumerate</span>(train_loader):</span><br><span class="line">        data, target = data.to(device), target.to(device)</span><br><span class="line">        optimizer.zero_grad()</span><br><span class="line">        output = model(data)</span><br><span class="line">        loss = F.nll_loss(output, target)</span><br><span class="line">        loss.backward()</span><br><span class="line">        optimizer.step()</span><br><span class="line">        <span class="keyword">if</span>(batch_idx+<span class="number">1</span>)%<span class="number">30</span> == <span class="number">0</span>: </span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Train Epoch: &#123;&#125; [&#123;&#125;/&#123;&#125; (&#123;:.0f&#125;%)]\tLoss: &#123;:.6f&#125;&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">                epoch, batch_idx * <span class="built_in">len</span>(data), <span class="built_in">len</span>(train_loader.dataset),</span><br><span class="line">                <span class="number">100.</span> * batch_idx / <span class="built_in">len</span>(train_loader), loss.item()))</span><br><span class="line"></span><br><span class="line"><span class="comment">#测试</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">model, device, test_loader</span>):</span></span><br><span class="line">    model.<span class="built_in">eval</span>()</span><br><span class="line">    test_loss = <span class="number">0</span></span><br><span class="line">    correct = <span class="number">0</span></span><br><span class="line">    <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">        <span class="keyword">for</span> data, target <span class="keyword">in</span> test_loader:</span><br><span class="line">            data, target = data.to(device), target.to(device)</span><br><span class="line">            output = model(data)</span><br><span class="line">            test_loss += F.nll_loss(output, target, reduction=<span class="string">&#x27;sum&#x27;</span>).item() <span class="comment"># 将一批的损失相加</span></span><br><span class="line">            pred = output.<span class="built_in">max</span>(<span class="number">1</span>, keepdim=<span class="literal">True</span>)[<span class="number">1</span>] <span class="comment"># 找到概率最大的下标</span></span><br><span class="line">            correct += pred.eq(target.view_as(pred)).<span class="built_in">sum</span>().item()</span><br><span class="line"></span><br><span class="line">    test_loss /= <span class="built_in">len</span>(test_loader.dataset)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\nTest set: Average loss: &#123;:.4f&#125;, Accuracy: &#123;&#125;/&#123;&#125; (&#123;:.0f&#125;%)\n&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">        test_loss, correct, <span class="built_in">len</span>(test_loader.dataset),</span><br><span class="line">        <span class="number">100.</span> * correct / <span class="built_in">len</span>(test_loader.dataset)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    model = ConvNet().to(DEVICE)</span><br><span class="line">    optimizer = optim.Adam(model.parameters())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, EPOCHS + <span class="number">1</span>):</span><br><span class="line">        train(model, DEVICE, train_loader, optimizer, epoch)</span><br><span class="line">        test(model, DEVICE, test_loader)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#保存训练完成后的模型</span></span><br><span class="line">    torch.save(model, <span class="string">&#x27;./MNIST.pth&#x27;</span>)</span><br></pre></td></tr></table></figure><p>以下为测试代码，它将指定进行测试的图片通过opencv转化为灰度图，然后使用前面训练好的模型MNIST.pth和定义好的卷积神经网络进行识别<br>（opencv安装代码 ： <code>pip install python-opencv</code>）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> mnist <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> glob</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"><span class="keyword">from</span> torch.autograd <span class="keyword">import</span> Variable</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> datasets, transforms</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">from</span> skimage <span class="keyword">import</span> io,transform</span><br><span class="line"><span class="keyword">from</span> train <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ ==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    device = torch.device(<span class="string">&#x27;cuda&#x27;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&#x27;cpu&#x27;</span>)</span><br><span class="line">    model = torch.load(<span class="string">r&#x27;D:/学习/Python/手写数字识别/MNIST.pth&#x27;</span>) <span class="comment">#加载模型</span></span><br><span class="line">    model = model.to(device)</span><br><span class="line">    model.<span class="built_in">eval</span>()    <span class="comment">#把模型转为test模式</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    img = cv2.imread(<span class="string">&#x27;./numbers/number1.jpg&#x27;</span>, <span class="number">0</span>)  <span class="comment">#以灰度图的方式读取要预测的图片</span></span><br><span class="line">    img = cv2.resize(img, (<span class="number">28</span>, <span class="number">28</span>))</span><br><span class="line"></span><br><span class="line">    height,width=img.shape</span><br><span class="line">    dst=np.zeros((height,width),np.uint8)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(height):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(width):</span><br><span class="line">            dst[i,j]=<span class="number">255</span>-img[i,j]</span><br><span class="line"></span><br><span class="line">    img = dst</span><br><span class="line"></span><br><span class="line">    img=np.array(img).astype(np.float32)</span><br><span class="line">    img=np.expand_dims(img,<span class="number">0</span>)</span><br><span class="line">    img=np.expand_dims(img,<span class="number">0</span>)<span class="comment">#扩展后，为[1，1，28，28]</span></span><br><span class="line">    img=torch.from_numpy(img)</span><br><span class="line">    img = img.to(device)</span><br><span class="line">    output=model(Variable(img))</span><br><span class="line">    prob = F.softmax(output, dim=<span class="number">1</span>)</span><br><span class="line">    prob = Variable(prob)</span><br><span class="line">    prob = prob.cpu().numpy()  <span class="comment">#用GPU的数据训练的模型保存的参数都是gpu形式的，要显示则先要转回cpu，再转回numpy模式</span></span><br><span class="line">    <span class="built_in">print</span>(prob)  <span class="comment">#prob是10个分类的概率</span></span><br><span class="line">    pred = np.argmax(prob) <span class="comment">#选出概率最大的一个</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;识别结果为：&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(pred.item())</span><br></pre></td></tr></table></figure><h2 id="项目实现结果-分析"><a href="#项目实现结果-分析" class="headerlink" title="项目实现结果/分析"></a>项目实现结果/分析</h2><p>以下为最终实现的成果，发现手写数字的粗细程度会影响识别的精度，在一定粗细程度的笔触下写下的数字能够实现高精度的识别。</p><p>下图为一定粗细程度笔触写下的数字的实现结果，识别波动几乎为无，而且能够完美识别。<br><img src="https://makiori.oss-cn-beijing.aliyuncs.com/%E7%AC%AC%E4%B8%89%E7%AF%87%E5%8D%9A%E5%AE%A2/result.jpg?versionId=CAEQExiBgMCilqyw0hciIDZmM2M1YjFjZjE3NzRjMWM5NzNmMmU5MjhhN2U5ZTI2" alt="正确实现结果"></p><p>下图则为过细程度笔触写下的数字的实现结果，可发现识别波动范围比较大，而且出现了识别错误的情况。<br><img src="https://makiori.oss-cn-beijing.aliyuncs.com/%E7%AC%AC%E4%B8%89%E7%AF%87%E5%8D%9A%E5%AE%A2/result2.jpg?versionId=CAEQExiBgID0wMqw0hciIDVlZTY4NTAzNGM1MTQ0NGM4ZjM5ZDczOTY3NGRmMWI2" alt="错误实现结果"></p><p>（两图数字皆为博主所写）</p><p>要想了解问题为何发生，就得从源头开始查起。<br>MNIST数据集来自美国国家标准与技术研究所（National Institute of Standards and Technology），简称 （NIST）。<br>训练集由来自250个不同人手写的数字构成, 其中50%是高中学生, 50%来自人口普查局的工作人员。测试集也是同样比例的手写数字数据。<br>于是我通过以下代码得到了MNIST训练集和测试集中的手写数字图片。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> skimage <span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> torchvision.datasets.mnist <span class="keyword">as</span> mnist</span><br><span class="line"></span><br><span class="line">root=<span class="string">&quot;D:/学习/Python/手写数字识别/程序/data/MNIST/raw&quot;</span></span><br><span class="line">train_set = (</span><br><span class="line">    mnist.read_image_file(os.path.join(root, <span class="string">&#x27;train-images-idx3-ubyte&#x27;</span>)),</span><br><span class="line">    mnist.read_label_file(os.path.join(root, <span class="string">&#x27;train-labels-idx1-ubyte&#x27;</span>))</span><br><span class="line">        )</span><br><span class="line">test_set = (</span><br><span class="line">    mnist.read_image_file(os.path.join(root, <span class="string">&#x27;t10k-images-idx3-ubyte&#x27;</span>)),</span><br><span class="line">    mnist.read_label_file(os.path.join(root, <span class="string">&#x27;t10k-labels-idx1-ubyte&#x27;</span>))</span><br><span class="line">        )</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;training set :&quot;</span>,train_set[<span class="number">0</span>].size())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;test set :&quot;</span>,test_set[<span class="number">0</span>].size())</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convert_to_img</span>(<span class="params">train=<span class="literal">True</span></span>):</span></span><br><span class="line">    <span class="keyword">if</span>(train):</span><br><span class="line">        f=<span class="built_in">open</span>(root+<span class="string">&#x27;train.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">        data_path=root+<span class="string">&#x27;/train/&#x27;</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">not</span> os.path.exists(data_path)):</span><br><span class="line">            os.makedirs(data_path)</span><br><span class="line">        <span class="keyword">for</span> i, (img,label) <span class="keyword">in</span> <span class="built_in">enumerate</span>(<span class="built_in">zip</span>(train_set[<span class="number">0</span>],train_set[<span class="number">1</span>])):</span><br><span class="line">            img_path=data_path+<span class="built_in">str</span>(i)+<span class="string">&#x27;.jpg&#x27;</span></span><br><span class="line">            io.imsave(img_path,img.numpy())</span><br><span class="line">            f.write(img_path+<span class="string">&#x27; &#x27;</span>+<span class="built_in">str</span>(label)+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        f.close()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        f = <span class="built_in">open</span>(root + <span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">        data_path = root + <span class="string">&#x27;/test/&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">not</span> os.path.exists(data_path)):</span><br><span class="line">            os.makedirs(data_path)</span><br><span class="line">        <span class="keyword">for</span> i, (img,label) <span class="keyword">in</span> <span class="built_in">enumerate</span>(<span class="built_in">zip</span>(test_set[<span class="number">0</span>],test_set[<span class="number">1</span>])):</span><br><span class="line">            img_path = data_path+ <span class="built_in">str</span>(i) + <span class="string">&#x27;.jpg&#x27;</span></span><br><span class="line">            io.imsave(img_path, img.numpy())</span><br><span class="line">            f.write(img_path + <span class="string">&#x27; &#x27;</span> + <span class="built_in">str</span>(label) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        f.close()</span><br><span class="line"></span><br><span class="line">convert_to_img(<span class="literal">True</span>)<span class="comment">#转换训练集</span></span><br><span class="line">convert_to_img(<span class="literal">False</span>)<span class="comment">#转换测试集</span></span><br></pre></td></tr></table></figure><p>通过得到的MNIST训练集与测试集中的图片可以看出，虽然他们收集的手写数字皆为不同人所写，但字体的粗细程度几乎相同，或许是使用了同一种笔来进行数据的收集。<br>这才使得字体的粗细程度会影响识别精度的情况发生。<br>根据我的初步理解，要想解决这种情况，得丰富数据库，重新进行深度学习。</p><h1 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h1><p>通过这次的学习，进一步了解深度学习，也对卷积神经网络有了一个初步的认识。<br>这个暑假会开展对Python语言的学习，这里的代码算是一个预习了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;写在开头&quot;&gt;&lt;a href=&quot;#写在开头&quot; class=&quot;headerlink&quot; title=&quot;写在开头&quot;&gt;&lt;/a&gt;写在开头&lt;/h1&gt;&lt;p&gt;我其实根本就不想写这方面内容的文章，不过既然人工智能课的结课作业要写项目文档，我就顺便更一下博客而已。（其实说到底就是逮到机</summary>
      
    
    
    
    <category term="blog" scheme="http://example.com/categories/blog/"/>
    
    
    <category term="学习" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="Pytorch" scheme="http://example.com/tags/Pytorch/"/>
    
    <category term="mnist" scheme="http://example.com/tags/mnist/"/>
    
    <category term="卷积神经网络" scheme="http://example.com/tags/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>题库第一期</title>
    <link href="http://example.com/2021/05/30/%E9%A2%98%E5%BA%93/%E9%A2%98%E5%BA%93%E7%AC%AC%E4%B8%80%E6%9C%9F/"/>
    <id>http://example.com/2021/05/30/%E9%A2%98%E5%BA%93/%E9%A2%98%E5%BA%93%E7%AC%AC%E4%B8%80%E6%9C%9F/</id>
    <published>2021-05-30T07:54:59.000Z</published>
    <updated>2021-05-30T08:11:03.490Z</updated>
    
    <content type="html"><![CDATA[<h1 id="开头"><a href="#开头" class="headerlink" title="开头"></a>开头</h1><p>放一点学习过程中，觉得有意思的题目。</p><h1 id="进入题库理由"><a href="#进入题库理由" class="headerlink" title="进入题库理由"></a>进入题库理由</h1><p>在学习数据结构的过程中，接触到了栈与队列。<br>栈的特性是先入后出<br>而队列的特性是先入先出<br>明明看起来并不相干，但这二者却都能在通过一点算法的帮助下实现对方。</p><h1 id="如何用栈实现队列"><a href="#如何用栈实现队列" class="headerlink" title="如何用栈实现队列"></a>如何用栈实现队列</h1><pre><code>import java.util.Stack;public class test&#123;    private Stack&lt;Integer&gt; a = new Stack&lt;Integer&gt;();           private Stack&lt;Integer&gt; b = new Stack&lt;Integer&gt;();    public void enQueue(int element)    &#123;        a.push(element);        while(!a.empty())        &#123;            b.push(a.pop());        &#125;    &#125;    public Integer deQueue()    &#123;        if(b.empty())        &#123;            if(a.empty())            &#123;                return null;            &#125;        &#125;        return b.pop();    &#125;    public Integer top()    &#123;        return b.peek();    &#125;    public boolean empty()    &#123;        return b.empty();    &#125;    public static void main(String[] args)    &#123;        test t = new test();        t.enQueue(1);        t.enQueue(2);        t.enQueue(3);        t.enQueue(4);        t.deQueue();        t.deQueue();        System.out.println(t.top());        System.out.println(t.empty());    &#125;&#125;</code></pre><h1 id="如何用队列实现栈"><a href="#如何用队列实现栈" class="headerlink" title="如何用队列实现栈"></a>如何用队列实现栈</h1><pre><code>import java.util.LinkedList;import java.util.Queue;public class test2 &#123;    private Queue&lt;Integer&gt; a = new LinkedList();    private Queue&lt;Integer&gt; b = new LinkedList();    public void push(int element)    &#123;        a.offer(element);        while(!b.isEmpty())        &#123;            a.offer(b.poll());        &#125;        Queue temp = a;        a = b;        b = temp;    &#125;    public int pop()    &#123;        return b.poll();    &#125;    public int top()    &#123;        return b.peek();    &#125;    public boolean empty()    &#123;        return b.isEmpty();    &#125;    public static void main(String[] args)    &#123;        test2 a = new test2();        a.push(1);        a.push(2);        a.pop();        System.out.println(a.top());        System.out.println(a.empty());    &#125;&#125;</code></pre><h1 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h1><p>以上就是第一期的题库。<br>没错，我又在水博客了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;开头&quot;&gt;&lt;a href=&quot;#开头&quot; class=&quot;headerlink&quot; title=&quot;开头&quot;&gt;&lt;/a&gt;开头&lt;/h1&gt;&lt;p&gt;放一点学习过程中，觉得有意思的题目。&lt;/p&gt;
&lt;h1 id=&quot;进入题库理由&quot;&gt;&lt;a href=&quot;#进入题库理由&quot; class=&quot;header</summary>
      
    
    
    
    <category term="Questions" scheme="http://example.com/categories/Questions/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
    <category term="题库" scheme="http://example.com/tags/%E9%A2%98%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>初识数据结构</title>
    <link href="http://example.com/2021/05/29/blog/%E5%88%9D%E8%AF%86%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <id>http://example.com/2021/05/29/blog/%E5%88%9D%E8%AF%86%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</id>
    <published>2021-05-29T12:07:57.000Z</published>
    <updated>2021-09-07T10:02:50.051Z</updated>
    
    <content type="html"><![CDATA[<h1 id="写在开头"><a href="#写在开头" class="headerlink" title="写在开头"></a>写在开头</h1><p>之前说好要整理出一篇关于如何使用 “GitHub Pages + hexo” 创建博客目前没有一点进展，单纯是因为懒。<br>到六月份就得忙起来了，所以就更没有时间了<br>于是便安排在暑假里吧。由于在自学的过程中，认识到了数据结构。我对此起了些许兴趣，为了让自己对数据结构有所记忆，所以就想先整理出这篇“初识数据结构”的博客。<br><br></br></p><h1 id="接触数据结构"><a href="#接触数据结构" class="headerlink" title="接触数据结构"></a>接触数据结构</h1><p>在我开始学习算法的时候，教材首先就给我讲了数据结构的基础。<br><br><code>程序设计 = 数据结构 + 算法。</code><br>这充分地说明数据结构与算法的关联性。<br>我对它的基本理解是：数据结构是计算机存储数据的方式，<br>数据以怎样的组织，怎样的存储格式，被计算机所管理。<br><br></br></p><h1 id="数据结构分类"><a href="#数据结构分类" class="headerlink" title="数据结构分类"></a>数据结构分类</h1><p>数据结构的分类一般有两种维度，一种是根据数据结构的原理从它们的<code>逻辑结构</code>来区分，一种是从数据结构存储时的<code>物理结构</code>来区分。<br><br></br></p><h2 id="逻辑结构"><a href="#逻辑结构" class="headerlink" title="逻辑结构"></a>逻辑结构</h2><p>是指数据与数据之间的关系，通常可以分为线性结构和非线性结构。</p><h3 id="线性结构"><a href="#线性结构" class="headerlink" title="线性结构:"></a>线性结构:</h3><p>数据元素之间存在着一对一的关系。<br><br><code>例：顺序表，栈，队列</code></p><h3 id="非线性结构"><a href="#非线性结构" class="headerlink" title="非线性结构:"></a>非线性结构:</h3><p>数据元素之间存在着一对多或者多对多的关系。<br><br><code>例：树形结构，图形结构</code><br><br></br></p><h2 id="物理结构"><a href="#物理结构" class="headerlink" title="物理结构"></a>物理结构</h2><p>是指数据在计算机是以何种方式存储的，也就是所谓的映像。针对数据在存储器中的存储方法而言的，通常可以分为顺序存储和链式存储。</p><h3 id="顺序存储结构"><a href="#顺序存储结构" class="headerlink" title="顺序存储结构"></a>顺序存储结构</h3><p>顺序存储的数据是在一段连续的空间中，靠相对位置来表示元素之间的相互关系，像在一个小教室上课的同班同学靠前后座关系就能建立联系<br><br><code>例：数组</code></p><h3 id="链序存储结构"><a href="#链序存储结构" class="headerlink" title="链序存储结构"></a>链序存储结构</h3><p>链式存储的数据内存地址不一定是连续的，每一个节点上都有一个指针存储域，靠指针来建立元素之间的相互关系，像几个班级的同学同时上公选课时分散在一个大教室里，同一个班级的同学之间需要靠学号来建立联系。<br><code>例：链表</code></p><h1 id="八大数据结构"><a href="#八大数据结构" class="headerlink" title="八大数据结构"></a>八大数据结构</h1><p>Array（数组）<br>Stack（栈）<br>Linked List（链表）<br>Graph（图）<br>Hash（散列表）<br>Queue（队列）<br>Tree（树）<br>Heap（堆）<br><br></br></p><h1 id="Java中常用的数据结构"><a href="#Java中常用的数据结构" class="headerlink" title="Java中常用的数据结构"></a>Java中常用的数据结构</h1><p>Java 中常用的数据结构都在 java.util 包下，都是对 Collection 和 Map 两个顶级接口的实现类。<br><br>实现该接口的几种数据类型<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line">蓝标是&#96;&#96;&#96;Map&#96;&#96;&#96; 接口和实现该接口的&#96;&#96;&#96;SortedMap&#96;&#96;&#96;&lt;br&gt;</span><br><span class="line">此外实现&#96;&#96;&#96; Map&#96;&#96;&#96; 接口的还有&#96;&#96;&#96;HashMap、TreeMap、Hashtable、SortedMap&#96;&#96;&#96;&lt;br&gt;</span><br><span class="line">另外还有 &#96;&#96;&#96;Collections、Arrays&#96;&#96;&#96;两个工具类。</span><br><span class="line"></span><br><span class="line"># 树形结构——红黑树</span><br><span class="line">&#96;&#96;&#96;红黑树&#96;&#96;&#96;是一种接近平衡的二叉搜索树，它能够保证任意一个节点左右子树的高度差不会超过较低子树的高度，也就是两棵子树的高度比值不会超过 2 倍。这样我们可以使搜索的时间复杂度更接近 O (logN)。为了保证树的平衡，我们需要在添加或删除元素的时候不断的调整树的结构，使每个节点的左右子树上的节点个数尽可能相等。</span><br><span class="line">&lt;br&gt;&lt;&#x2F;br&gt;</span><br><span class="line"></span><br><span class="line">## 红黑树的性质</span><br><span class="line">&gt; 1. 每个节点不是红色就是黑色。</span><br><span class="line">&gt; 2. 根节点永远是黑色。</span><br><span class="line">&gt; 3. 红色节点的子节点必须是黑色。</span><br><span class="line">&gt; 4. 任意一个节点到每个叶子节点的路径上都包含相同数量的黑色节点。</span><br><span class="line">&gt; 5. 每次添加新节点都默认为红色。</span><br><span class="line"></span><br><span class="line">&lt;br&gt;&lt;&#x2F;br&gt;</span><br><span class="line">## 红黑树调整的方式</span><br><span class="line">如果每次添加节点都设置为红色，当父节点已经是红色时，会违背上面的第 3 条性质，这时候我们需要按照一定的方法去调整树，调整的方式有三种：改变节点颜色、左旋和右旋。</span><br><span class="line">&lt;br&gt;&lt;&#x2F;br&gt;</span><br><span class="line"></span><br><span class="line">## 红黑树的插入操作</span><br><span class="line">插入元素会导致原本平衡的红黑树失去平衡，还会导致红黑树五大特性的不满足。因此插入后我们需要做调整，使其重新成为一个红黑树。</span><br><span class="line">&lt;br&gt;&lt;&#x2F;br&gt;</span><br><span class="line"></span><br><span class="line">### 第一步：插入</span><br><span class="line">要把元素插进红黑树的第一步就是要找到插入的位置。</span><br><span class="line">&gt; 1. 如果是空树，直接插入到跟节点。</span><br><span class="line">&gt; 2. 如果与当前节点的key值相等，则更新当前节点的value值。</span><br><span class="line">&gt; 3. 如果比当前节点的key值大，则继续寻找当前节点的右子节点。</span><br><span class="line">&gt; 4. 如果比当前节点的key值小，则继续寻找当前节点的左子节点</span><br><span class="line">&gt; 5. 如果当前节点为null（或nil节点），则插入在当前节点的父节点下。</span><br><span class="line"></span><br><span class="line">&lt;br&gt;&lt;&#x2F;br&gt;</span><br><span class="line"></span><br><span class="line">### 第二步：插入后重新调整至平衡状态</span><br><span class="line">以下为&#96;&#96;&#96;JDK1.8&#96;&#96;&#96;的HashMap中对红黑树的调整源码。</span><br><span class="line">&#96;&#96;&#96;java</span><br><span class="line">   static &lt;K,V&gt; TreeNode&lt;K,V&gt; balanceInsertion(TreeNode&lt;K,V&gt; root, TreeNode&lt;K,V&gt; x) &#123;</span><br><span class="line">       x.red &#x3D; true;</span><br><span class="line">       for (TreeNode&lt;K,V&gt; xp, xpp, xppl, xppr;;) &#123;</span><br><span class="line">           &#x2F;&#x2F;false条件：当前节点存在父节点</span><br><span class="line">           if ((xp &#x3D; x.parent) &#x3D;&#x3D; null) &#123;</span><br><span class="line">               &#x2F;&#x2F;父节点为空，当前节点是根节点，直接设置根节点为黑色后返回</span><br><span class="line">               x.red &#x3D; false;</span><br><span class="line">               return x;</span><br><span class="line">           &#125;</span><br><span class="line">           &#x2F;&#x2F;false条件：且父节点是红色，且存在爷爷节点</span><br><span class="line">           else if (!xp.red || (xpp &#x3D; xp.parent) &#x3D;&#x3D; null)</span><br><span class="line">               return root;</span><br><span class="line">           if (xp &#x3D;&#x3D; (xppl &#x3D; xpp.left)) &#123;</span><br><span class="line">               &#x2F;&#x2F;false条件：且叔叔节点为空，或者是黑色；</span><br><span class="line">               if ((xppr &#x3D; xpp.right) !&#x3D; null &amp;&amp; xppr.red) &#123;</span><br><span class="line">                   xppr.red &#x3D; false;</span><br><span class="line">                   xp.red &#x3D; false;</span><br><span class="line">                   xpp.red &#x3D; true;</span><br><span class="line">                   x &#x3D; xpp;</span><br><span class="line">               &#125;</span><br><span class="line">               else &#123;</span><br><span class="line">                   &#x2F;&#x2F;true条件：当前节点是其父节点的右子节点；</span><br><span class="line">                   if (x &#x3D;&#x3D; xp.right) &#123;</span><br><span class="line">                       &#x2F;&#x2F; 左旋父节点</span><br><span class="line">                       root &#x3D; rotateLeft(root, x &#x3D; xp);</span><br><span class="line">                       &#x2F;&#x2F; 爷爷节点不存在则结束，存在则将指针指向父节点</span><br><span class="line">                       xpp &#x3D; (xp &#x3D; x.parent) &#x3D;&#x3D; null ? null : xp.parent;</span><br><span class="line">                   &#125;</span><br><span class="line">                   &#x2F;&#x2F; true条件：父节点不为空</span><br><span class="line">                   if (xp !&#x3D; null) &#123;</span><br><span class="line">                       &#x2F;&#x2F; 父节点变为黑色</span><br><span class="line">                       xp.red &#x3D; false;</span><br><span class="line">                       &#x2F;&#x2F; true条件：祖父节点不为空</span><br><span class="line">                       if (xpp !&#x3D; null) &#123;</span><br><span class="line">                           &#x2F;&#x2F; 祖父节点变为红色</span><br><span class="line">                           xpp.red &#x3D; true;</span><br><span class="line">                           &#x2F;&#x2F; 右旋祖父节点</span><br><span class="line">                           root &#x3D; rotateRight(root, xpp);</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           else &#123;</span><br><span class="line">               &#x2F;&#x2F;false条件：且叔叔节点为空，或者是黑色；</span><br><span class="line">               if (xppl !&#x3D; null &amp;&amp; xppl.red) &#123;</span><br><span class="line">                   &#x2F;&#x2F; 当前节点的父节点以及左叔父节点都是红色 则颜色变为黑色</span><br><span class="line">                   xppl.red &#x3D; false;</span><br><span class="line">                   xp.red &#x3D; false;</span><br><span class="line">                   &#x2F;&#x2F; 黑节点的父节点必须红色</span><br><span class="line">                   xpp.red &#x3D; true;</span><br><span class="line">                   x &#x3D; xpp;</span><br><span class="line">               &#125;</span><br><span class="line">               else &#123;</span><br><span class="line">                   &#x2F;&#x2F;true条件：当前节点是其父节点的左子节点；</span><br><span class="line">                   if (x &#x3D;&#x3D; xp.left) &#123;</span><br><span class="line">                       &#x2F;&#x2F; 右旋父节点</span><br><span class="line">                       root &#x3D; rotateRight(root, x &#x3D; xp);</span><br><span class="line">                       &#x2F;&#x2F; 指针指向父节点</span><br><span class="line">                       xpp &#x3D; (xp &#x3D; x.parent) &#x3D;&#x3D; null ? null : xp.parent;</span><br><span class="line">                   &#125;</span><br><span class="line">                   &#x2F;&#x2F; true条件：父节点不为空</span><br><span class="line">                   if (xp !&#x3D; null) &#123;</span><br><span class="line">                       &#x2F;&#x2F; 父节点变为黑色</span><br><span class="line">                       xp.red &#x3D; false;</span><br><span class="line">                       &#x2F;&#x2F; true条件：祖父节点不为空</span><br><span class="line">                       if (xpp !&#x3D; null) &#123;</span><br><span class="line">                           &#x2F;&#x2F; 祖父节点变为红色</span><br><span class="line">                           xpp.red &#x3D; true;</span><br><span class="line">                           &#x2F;&#x2F;  右旋祖父节点</span><br><span class="line">                           root &#x3D; rotateLeft(root, xpp);</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><br></br></p><h2 id="红黑树的删除操作"><a href="#红黑树的删除操作" class="headerlink" title="红黑树的删除操作"></a>红黑树的删除操作</h2><p>删除操作可能触发的情况分为有子节点和无子节点，没有子节点的情况非常简单，直接删除后执行自平衡即可。有子节点的时候我们要先找到替换节点，如果只有一个子节点，这个节点就是替换节点；如果有两个子节点，要找到左子树的最大节点或右子树的最小节点作为替换节点。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;写在开头&quot;&gt;&lt;a href=&quot;#写在开头&quot; class=&quot;headerlink&quot; title=&quot;写在开头&quot;&gt;&lt;/a&gt;写在开头&lt;/h1&gt;&lt;p&gt;之前说好要整理出一篇关于如何使用 “GitHub Pages + hexo” 创建博客目前没有一点进展，单纯是因为懒。&lt;br</summary>
      
    
    
    
    <category term="blog" scheme="http://example.com/categories/blog/"/>
    
    
    <category term="日常" scheme="http://example.com/tags/%E6%97%A5%E5%B8%B8/"/>
    
    <category term="学习" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>2021年的五一假期</title>
    <link href="http://example.com/2021/05/04/blog/2021%E5%B9%B4%E7%9A%84%E4%BA%94%E4%B8%80%E5%81%87%E6%9C%9F/"/>
    <id>http://example.com/2021/05/04/blog/2021%E5%B9%B4%E7%9A%84%E4%BA%94%E4%B8%80%E5%81%87%E6%9C%9F/</id>
    <published>2021-05-04T13:31:58.000Z</published>
    <updated>2021-07-05T07:07:14.817Z</updated>
    
    <content type="html"><![CDATA[<h1 id="开头"><a href="#开头" class="headerlink" title="开头"></a>开头</h1><p>今年的五一假期有5天，虽然前后都要调课，但是由于课本来就不是很多，所以没所谓。<br>反正对处于学习疲倦期的我来说，可以回家的小长假真的是太感激了。</p><h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1><p>十年炼金无人问,一朝肉腿天下知。我就是从莱莎这代知晓并且入坑炼金工房系列的人。<br>说来惭愧，写这篇博客的时候还没有通关，因为买了pc版后才发觉这游戏适合用ns玩。<br>于是这时刚好遇上了《不可思议的炼金术士合集》DX版发售的消息，再加上曾经微博上的互关，五风老师的安利。<br>趁这次假期，我就去入手了，苏菲真可爱！（目前进度为：苏菲的炼金工房 ～不可思议书的炼金术士～ DX）<br>如果有时间的话，会写一下游戏感想。（挖个坑，以后会在博客上写一些对玩过的游戏的感想）<br><img src="https://makiori.oss-cn-beijing.aliyuncs.com/%E4%BA%94%E4%B8%80%E5%81%87%E6%9C%9F/5562DFAA95D46B7B0959CD02AFB25040.jpg?versionId=CAEQERiBgMCB9tHeyRciIDNjZGViOWE3YTkwNDRlZWNhYzYwOGYyYzE5NDczNzQy" alt="是我的新游戏哦"></p><h1 id="吃的（别问为什么专门弄一个标题）"><a href="#吃的（别问为什么专门弄一个标题）" class="headerlink" title="吃的（别问为什么专门弄一个标题）"></a>吃的（别问为什么专门弄一个标题）</h1><p>在华南秋叶原买游戏时，偶然发现的店，味道不错。<br><img src="https://makiori.oss-cn-beijing.aliyuncs.com/%E4%BA%94%E4%B8%80%E5%81%87%E6%9C%9F/435819689BB3F21AEE308DE013709219.jpg?versionId=CAEQERiBgICC9tHeyRciIGI3NjMzNWNkZDkwMDQ5ODU4MGJjNjY4NDZiMDhkNDU4" alt="章鱼烧"></p><p>跟好久没见的网络群友，一起去漫展玩了一天，晚餐自然就是经典的萨莉亚了。<br><img src="https://makiori.oss-cn-beijing.aliyuncs.com/%E4%BA%94%E4%B8%80%E5%81%87%E6%9C%9F/5671C8145163EC6946CFA5DC0B1A340C.jpg?versionId=CAEQERiBgICJ9tHeyRciIDQ5MGViNjRlYzMzMjQ4M2RhYWY1ZmM2ODM3Y2E4ZTY3" alt="萨"></p><h1 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h1><p>好好地休息了一下，接下来得调整好自己，迎接后面的学习。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;开头&quot;&gt;&lt;a href=&quot;#开头&quot; class=&quot;headerlink&quot; title=&quot;开头&quot;&gt;&lt;/a&gt;开头&lt;/h1&gt;&lt;p&gt;今年的五一假期有5天，虽然前后都要调课，但是由于课本来就不是很多，所以没所谓。&lt;br&gt;反正对处于学习疲倦期的我来说，可以回家的小长假真的是太</summary>
      
    
    
    
    <category term="blog" scheme="http://example.com/categories/blog/"/>
    
    
    <category term="日常" scheme="http://example.com/tags/%E6%97%A5%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>第一篇博客</title>
    <link href="http://example.com/2021/04/20/blog/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
    <id>http://example.com/2021/04/20/blog/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</id>
    <published>2021-04-20T07:31:49.000Z</published>
    <updated>2021-09-04T01:36:55.137Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于博客"><a href="#关于博客" class="headerlink" title="关于博客"></a>关于博客</h1><p>上一年建的博客，因为个人原因删除了。<br>主要就是当时选的主题过于复杂，后面不想整理。<br>再加上放了太多可能涉及版权问题的四格漫画。<br>（虽然说本来就经常做灰色地带的勾当）<br>一二月放寒假的时候，每天躺在床上什么都不想做，所以就拖到了开学。<br>但有动力做事的情况下，还是出了一系列的意外，就不多说了。<br>于是摸鱼摸了几个月之后，终于在19岁生日的时候，重新建好了自己的小地盘。<br>后面会专门写一篇关于如何用 Hexo+GitPages 建立个人博客的文章。<br>算是给自己留个记录，也希望能在以后帮到想建个人博客的朋友。</p><h1 id="关于现状"><a href="#关于现状" class="headerlink" title="关于现状"></a>关于现状</h1><p>这摸过去的几个月里，发生了很多事情，比如说我的人际关系就发生了翻天覆地的变化。<br>嘛，有相遇就会有分别，一段关系的结束或许会是另一段关系的开始呢？<br>而且我也深刻地认识到了自己在人际交往中的种种问题，<br>于是我注销掉了自己的微博账号，还退掉了许多已经没有交流的QQ群。<br>在圈子里面彻底消失，而且已经没有回归的机会了。<br>希望自己能在下一个圈子里有更为理想的形态。<br>我一直在盼望自己的人生会发生不同寻常的事情，<br>但当它已经在发生变化的时候，我却没有意识到。</p><h1 id="关于未来"><a href="#关于未来" class="headerlink" title="关于未来"></a>关于未来</h1><p>以后会在这里分享一下自己的学习情况，以及生活上各种各样的小事情。<br>还会稍微放一些翻译工作，如果还能有这样的工作机会的话，<br>又或者是还能遇到让自己兴奋的事物的话。<br>最后还有自己的脑洞，属于我的牧尾宇宙。<br>会慢慢地更新，能写多少就不知道了。<br>先放一个题目：《角落里的魔女》<br>嗯，然后还有很多想尝试的事情，比如说：制作游戏啊，到处旅行然后用视频记录下来之类的。<br>嘛，只有一次的人生，应该好好地享受。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;关于博客&quot;&gt;&lt;a href=&quot;#关于博客&quot; class=&quot;headerlink&quot; title=&quot;关于博客&quot;&gt;&lt;/a&gt;关于博客&lt;/h1&gt;&lt;p&gt;上一年建的博客，因为个人原因删除了。&lt;br&gt;主要就是当时选的主题过于复杂，后面不想整理。&lt;br&gt;再加上放了太多可能涉及版权问</summary>
      
    
    
    
    <category term="blog" scheme="http://example.com/categories/blog/"/>
    
    
    <category term="日常" scheme="http://example.com/tags/%E6%97%A5%E5%B8%B8/"/>
    
    <category term="学习" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
</feed>
